TIM_Id,Subject,Severity,Description,Initiation_DateProjectA - TIM - 2115,Build 5.3: Unitialized Variables,3,Filename: sts_df.c Function: TSdf_Undervolt_Condition Line # : 2693 Variables buv_state_a and buv_state_b may not be properly initialized via the if/else if conditional statements. An else clause should be added to ensure variable initializations.,3/25/07ProjectA - TIM - 2114,Build 5.3 FSW: Typecast Mismatch in Memory Deallocation,3,"File: inflateData.c Function: huft_free Line #: 474 The statement free((char *)p) is an incorrect memory deallocation for the huft struct variable p. Depending on compiler and system memory recovery, this could result in memory issues or reduced performance.",3/20/07ProjectA - TIM - 2113,Build 5.3 FSW: Parameter Type Mismatch,3,"File: ProjectAmain.c Function: inflateTable Line: 703 The FlexeLint message: “Symbol 'inflateData(unsigned long *, unsigned char *, unsigned long *)' has arg. type conflict (arg. no. 2 -- ptrs to incompatible types) with line 703, file ./main/ProjectAmain.c” describes a parameter type mismatch in the following function call: ""if( inflateData ( eepromPtr,(u_dword *)destPtr, &tblSize) )"". The function call's unsigned double word pointer typecast does not match the expected prototype's unsigned character pointer. Depending on compiler, this could lead to pointer errors.",3/19/07ProjectA - TIM - 2112,Build 5.3 FSW: Unchecked Return Status,3,"File: acprocesscommands.c Function: AC_GenerateSMResponse Line: 1416 The u_word variable SB_ReturnStatus is assigned a value, but not checked for an error / nominal return status. If an error code is returned, this module will not respond to the off-nominal condition.",3/19/07ProjectA - TIM - 2111,Build 5.3 FSW: Typecast Mismatch in Memory Deallocation,3,"File: inflateData.c Function: huft_free Line #: 474 The statement free((char *)p) is an incorrect memory deallocation for the huft struct variable p. Depending on compiler and system memory recovery, this could result in memory issues or reduced performance.",3/18/07ProjectA - TIM - 2110,"Uninitialized variable ""Status"" in acnavigate.c",3,"In the function ac_CalculateSunFrame, the return value Status is not set until the error cases at lines 751 and 780. When the error condition is encountered the value STATUS_ERROR (0) is assigned to Status. Since Status is a local variable it will contain an undefined (possibly random) value until this error condition occurs, when Status is set to STATUS_ERROR. In subsequent processing the return value is only tested against STATUS_ERROR, thus as long as the initial value happens to be non-zero the function will perform as expected. If the value at the address of Status happens to be zero then the function will incorrectly report failure.",10/12/06ProjectA - TIM - 2109,L3-SFS-925 no traceability links from L4,3,"According to the project DOORS database snapshot provided to the IV&V team, L3-SFS-925 has no incoming links; however, the requirement has specific FSW implications. Referenced Requirements [L2-FPR-39] The FP system design shall preclude the collision of overlapping fault responses and shall be free of deadlocks. Definition: A deadlock is the condition where two processes cannot proceed because they both simultaneously require the exclusive use of shared resources held by one another. Child of L2-FPR-29: [L3-SFS-925] The Spacecraft FP responses shall be configured to use the system design such that no deadlock occurs (e.g. aborting VML commanding, command timing to dedicated components, etc.) and preclude the collisions of overlapping FP responses.",6/26/06ProjectA - TIM - 2108,L3-SFS-919 incomplete traceability links from L4,3,"According to the project DOORS database snapshot provided to the IV&V team, L3-SFS-919 only has links from the L4 SuROM SRS. Since this requirement is levying functionality on the entire FP system, the L4 OBC, ACS, and UPL requirements need to respond to L3-SFS-919. Therefore, L3-SFS-919 is not satisfied by the currently linked requirements. Referenced Requirements: [L3-SFS-919] The Spacecraft FP shall be designed to autonomously recognize sets of symptoms stemming from any single failure or fault. Children of L3-SFS-919: [L4-SROSU-17] Flight Software shall trap the processor interrupts and make an Exception Log entry: [L4-SROSU-19] Machine Check Interrupt [L4-SROSU-20] Data Storage Interrupt [L4-SROSU-21] Instruction Storage Interrupt [L4-SROSU-23] Alignment Interrupt [L4-SROSU-28] On RESET, the Flight Software shall examine the Sanity Codes in SuROM memory. If the Sanity Codes in SRAM do not match the hard-coded pattern in SuROM, it is assumed that the OBC has lost power. In that event the exception log shall be initialized. [L4-SROSU-29] Flight Software shall determine whether a processor mode transition was due to a Command, POWER_ON or External Hardware Reset command. [L4-SROSU-30] Flight Software shall store RAD6000 processor exception data in a log. [L4-SROSU-31] The Flight Software exception log shall fill each entry until it reaches the last entry (23); all subsequent entries are written in the same location. [L4-SROSU-32] If sufficient RAD6000 and LIO processing resources are operable, restart operations shall progress to completion in SuROM Diagnostic (Monitor) Mode or Normal Mode. [L4-SROSU-33] Unless physically unavoidable, errors detected during startup processes shall not cause the restart processes to terminate before reaching their commanded termination location. [L4-SROSU-34] Machine error interrupt services shall leave the processor in a known repeatable state. No service routine will be designed to skip command execution.",6/26/06ProjectA - TIM - 2107,L3-SFS-1028 no traceability links from L4,3,"According to the project DOORS database snapshot provided to the IV&V team, L3-SFS-1028 has no incoming links; however, the requirement has specific FSW implications. Referenced Requirement: [L3-SFS-1028] Spacecraft supplied critical temperature sensor inputs to software thermal control shall be actively redundant. Definition: A critical temperature sensor is defined as one which is required to keep some spacecraft device within its thermal operational limits (where no thermal functional or hardware redundancy exists)",6/26/06ProjectA - TIM - 2104,L3-SFS-904 and L3-SFS-974 no traceability links from L4,3,"According to the project DOORS database snapshot provided to the IV&V team, neither L3-SFS-904 nor L3-SFS-974 has an incoming link, yet both requirements seem to have flight software implications. Referenced Requirements: [L3-SFS-904] No single fault in the Flight System shall preclude use of and entry to Safe Mode from any other mission mode. [L3-SFS-974] The Spacecraft FSW shall be designed to accommodate processor resets during the mission-critical event of launch and solar array deployment.",6/26/06ProjectA - TIM - 2102,L3-SFS-887 incomplete traceability to the L4 requirements,3,"According to the project DOORS database snapshot provided to the IV&V team, the only incoming link for L2-FPR-105 is from L3-SFS-887. L3-SFS-887 has incoming links from L4-ACS-204 and L4-ACS-232, and an internal link from L3-SFS-1008, which is Engine-specific. Although, L3-SFS-887 implies applicability to all “flight system processors”, its incoming links are specific to ACS and Engine. Therefore, L3-SFS-887 is missing links from the L4 OBC, UPL, and possibly ACE requirements. Consequently, the traceability for L2-FPR-105 from L2-to-L3-to-L4 is incomplete as well. Referenced Requirements: [L2-FPR-105] No single failure of a science instrument shall cause permanent loss of data of the other science instrument data. Child of L2-FPR-105: [L3-SFS-887] The Flight System shall have Fault Containment Regions (FCR) around each of the following flight system sections: [HW] CEU, ACE, ACE peripherals (reaction wheel, gyro, thruster, sun sensor, SADE/SADA) , SDST, PDU/HVEA, EngCntrl, EngCntrl peripherals (PPU, thruster, gimbal assembly, XFA), and Instruments (FC, VIR, GRaND) - [SW] flight system processors. Related to L3-SFS-887: [L3-SFS-2580] A FCR is a region (component or specific zone) of the Flight System defined for the purpose of fault analysis to ensure redundancy and cross strapping are applied in a way that allow the SFT requirements to be met. Child of L3-SFS-887: [L4-ACS-232] A failure of an ACS component shall not propagate to any other component or subsystem on the spacecraft. [L4-ACS-204] Fault detection and correction (FDC) logic shall be implemented in the ACS software for the star trackers, the IRU, the RWAs, the CSS, the SADs / POTs, and the RCS thrusters. A violation of any of these component FDC tests, if enabled, shall result in a Telemetry Monitor (TMON) flag being set to TRUE, which will signal the Fault Protection (FP) system to initiate the appropriate corrective action. [L3-SFS-1008] Spacecraft Engine failures shall not propagate to other Spacecraft subsystems. Child of L3-SFS-1008: NONE",6/26/06ProjectA - TIM - 2101,L3-SFS-2725 and L3-SFS-886 incomplete traceability to L4 requirements,3,"According to the project DOORS database snapshot provided to the IV&V team, the only incoming link for L2-FPR-106 is from L3-SFS-2725, which only has an incoming link from L3-SFS-886. Although L3-SFS-886 has flight software implications, there are no incoming links from the L4 requirements documents. Since L3-SFS-2725 is more specific than its child, L3-SFS-886, the traceability for both requirements is incomplete. Referenced Requirements: [L2-FPR-106] To meet minimum mission requirements, no single failure of the Flight System shall cause the loss of more than one science instrument. Child of L2-FPR-106: [L3-SFS-2725] No single failure of the Flight System shall cause the loss of more than one Science instrument. Child of L3-SFS-2725: [L3-SFS-886] The Flight System subsystems shall be single fault tolerant.",6/26/06ProjectA - TIM - 2099,L2-PRD-712 inconsistent with L3-SFS-1985,3,"According to the project DOORS database snapshot provided to the IV&V team, L2-PRD-712 has a link from L3-SFS-1985. L2-PRD-712 requires the functionality ""to estimate the inertial attitude of the spacecraft +Z axis, with a pointing knowledge error of better than 0.250 mrad per axis; whereas, L3-SFS-1985 specifies the capability to ""estimate…the inertial attitude of either imaging camera's mounting reference, with a real-time pointing knowledge error of better than 0.9 mrad (0.052 deg) per axis."" It appears the parent and child requirements are inconsistent. However, possibly these two requirements have different contexts, since the child is written specific to the imaging camera; whereas, the parent is applicable to the entire spacecraft +Z axis. If L2-PRD-712 is not applicable to L3-SFS-1985, then the trace is invalid. Referenced Requirements: [L2-PRD-712] Allocation: The Spacecraft System shall be able to estimate the inertial attitude of the spacecraft +Z axis, with a pointing knowledge error of better than 0.250 mrad per axis (3 sigma, zero-to-peak). Child of L2-PRD-712: [L3-SFS-1985] The Spacecraft System shall be able to estimate, record, and telemeter the inertial attitude of either imaging camera's mounting reference, with a real-time pointing knowledge error of better than 0.9 mrad (0.052 deg) per axis (3 sigma, zero-to-peak). Note: The knowledge error is defined as the difference between the estimated and actual pointing.",6/26/06ProjectA - TIM - 2098,Build 5.1 OBC Code: Symbol 'tbl_ptr' and 'sm_cond_commit_crc' not initialized,3,"Based upon IV&V verification, variable 'tbl_ptr' and 'sm_cond_commit_crc' appears to have been used before they were initialized. The variables should be initialized to some known state before being used. FlexeLint Message # 530: Symbol 'tbl_ptr' (line 733) not initialized Symbol 'sm_cond_commit_crc' (line 1709) not initialized FlexeLint Message # 530 Description: An auto variable was used before it was initialized. Source Code References: File - sm_tbl.c Line # 985: sm_table_cntrl.checksum = SM_compute_dword_checksum ( tbl_ptr, sm_table_cntrl.wsize >> 1 ) ; Line # 1920: totDesc.crc = sm_cond_commit_crc;",12/21/05ProjectA - TIM - 2097,Build 5.1 OBC Code: loss of sign in assigning an integer to an unsigned long,3,"Based upon IV&V verification it appears as though there is a possible loss of sign when assigning an integer to an unsigned long. ""bufSize"" is an unsigned double word. ""size"" is an integer. ""size"" is assigned the value of ""bufSize"" minus one, which is fine. If ""bufSize"" holds the lowest possible value of zero, then ""size"" would then be assigned the value of negative one. Based upon the following if conditional, ""bufSize"" can then be reassigned the value of ""size"". If in fact ""size"" holds the value of negative one, then the sign would be lost when assigning the value to ""bufSize"". FlexeLint Message #732: Loss of sign (assignment) (int to unsigned long) FlexeLint Message #732 Description: An assignment (or implied assignment, see Context) is made from a signed quantity to an unsigned quantity. Also, it could not be determined that the signed quantity had no sign. For example: u = n; /* Info 732 */ u = 4; /* OK */ where u is unsigned and n is not, warrants a message only for the first assignment, even though the constant 4 is nominally a signed int. Make sure that this is not an error (that the assigned value is never negative) and then use a cast (to unsigned) to remove the message. sm_tbl.c (Lines 2578 - 2589): /* Decrement size */ size -= bufSize; /* Determine the next bufSize */ if( size < AS_EEPROM_PAGE_SIZE ) { bufSize = size; } else { bufSize = AS_EEPROM_PAGE_SIZE; }",12/21/05ProjectA - TIM - 2096,OBC Build 5.1 Code: Unusual pointer cast,3,"In sm_main.c there is an unusual pointer cast on line 744 in the call to SM_tbl_load. line 744: if ( do_load == TRUE ) { SM_tbl_load ( ( sm_tbl_load_fmt * ) sm_cmd_pkt ) ; } The variable sm_cmd_pkt is defined as type sm_cmd_pkt_fmt. where sm_cmd_pkt_fmt is defined as: typedef struct { seds_packet_header_type hdr ; cmd_sec_header_type sec_hdr ; u_word data_load [ SM_MAX_PKT_WSIZE ] ; } sm_cmd_pkt_fmt ; Function SM_tbl_load accepts a paramter of type sm_tbl_load_fmt, which is defined as: typedef struct { seds_packet_header_type hdr ; cmd_sec_header_type sec_hdr ; u_word offset ; u_word num_words ; u_word spare ; u_word load_data [ SM_MAX_DATA_WSIZE ] ; } sm_tbl_load_fmt ; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection, whether this unusual casting will result in a software error. This particular issue was flagged by the FlexeLint tool. There are similar unusual pointer casts on lines 307, 311, 315, 319, 323, 338, and 508 of sm_main.c.",12/21/05ProjectA - TIM - 2095,OBC Build 5.1 Code: Unusual pointer cast,3,"In scstate.c there is an unusual pointer cast on line 604. line 604: cmd_ptr = ( sc_rts_command_header_type *)&rts_buffers[rts_num][cmd_offset]; The variable cmd_ptr is defined as: sc_rts_command_header_type *cmd_ptr; where sc_rts_command_header_type is defined as: typedef struct { sc_rel_time_tag_type time_tag; seds_packet_header_type header; cmd_sec_header_type sec_hdr; } sc_rts_command_header_type; Variable rts_buffers is defined as: u_word rts_buffers[ SC_NUMBER_OF_RTS ][ SC_RTS_BUFF_SIZE ] = { ... This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool.",12/21/05ProjectA - TIM - 2094,OBC Build 5.1 Code: Unusual pointer cast,3,"In ts_tlm.c there is an unusual pointer cast on lines 933 and 937. if ( ( ( packet_header_type * ) &( tlm_packet_Ptr->pri_header ) )->sec_hdr_flag) { line 933: mon_point_val = TSt_mon_stripper ( ( packet_offset_type * ) tlm_packet_Ptr->data); } else { line 937: mon_point_val = TSt_mon_stripper ( ( packet_offset_type * ) ( ( ts_tlm_packet_type_no_sec_hdr * )( tlm_packet_Ptr ) )->data); } The variable mon_point_val is defined as: mon_point_val_type mon_point_val; where mon_point_val_type is a dword. Variable tlm_packet_Ptr is defined to be of type ts_tlm_packet_type: typedef struct { seds_packet_header_type pri_header; time_code_sec_hdr_type sec_header; u_word data [MAX_PACKET_DATA_LEN]; } ts_tlm_packet_type; ts_tlm_packet_type_no_sec_hdr is defined as: typedef struct { seds_packet_header_type pri_header; u_word data [MAX_PACKET_DATA_LEN]; } ts_tlm_packet_type_no_sec_hdr; packet_offset_type is defined as: typedef u_byte packet_offset_type; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool.",12/21/05ProjectA - TIM - 2093,UPL Build 5.1 Code: 'WORDS_PER_MONITOR' macro usage inconsistent with description,3,"The file tspk.h line 62 defines MAX_MONITOR_POINTS as ‘48’. Line 68 defines WORDS_PER_MONITOR as ((MAX_MONITOR_POINTS+15)/16). The comment on line 67 indicates the purpose of WORDS_PER_MONITOR is to “Add 1 when MAX_MONITOR_POINTS is not evenly divisible by 16.” Since the value assigned to MAX_MONITOR POINTS is evenly divisible by 16, this suggests the UPLC FSW should never use WORDS_PER_MONITOR. However, the WORDS_PER_MONITOR macro is used by the files ts_cmd.c and ts_tlm.c in several cases. Assuming the comment on line 67 is being interpreted correctly, the multiple usages of WORDS_PER_MONITOR seem contrary to the intended purpose of this macro. Referenced Source Code: File - tspkt.h: 57: /* Defines the number of telemetry monitors. 58: 59: This define is used to size the support types and structures for the 60: Telemetry and Statistics Task. */ 61: 62: #define MAX_MONITOR_POINTS 48 63: 64: /* ts_monitors_fmt is a bit array type used throughout the TS code. 65: It is sized one bit for each monitor point. 66: 67: Add 1 when MAX_MONITOR_POINTS is not evenly divisible by 16 */ 68: #define WORDS_PER_MONITOR ((MAX_MONITOR_POINTS+15)/16)",12/19/05ProjectA - TIM - 2092,OBC Build 5.1 Code: possible data overrun for function 'memcpy',3,"The file vm_memory_adapt.c defines the function ‘memcpy_d32_safe’ on lines 600-637, which is a modified version of the standard library function ‘memcpy’. Line 402 of the file vm_if_cmd.c contains a call to ‘memcpy_d32_safe’ in which the source data type is bigger than the target data type. This could potentially cause a data overrun. In addition, the standard library function ‘memcpy’ is redefined in terms of the function ‘memcpy_d32_safe’ by several source code files. However, line 634 within the definition of ‘memcpy_d32_safe’ contains a call to ‘memcpy’. Build 5.1 FlexeLint Message: Apparent data overrun for function 'memcpy(void *, const void *, unsigned int)', argument 3 (size=264) exceeds argument 1 (size=256) [Reference: file vm_if_cmd.c: line 402] FlexeLint Message ID #419 Referenced Source Code: File - ../vm/src/vm_memory_adapt.c: 600: void *memcpy_d32_safe(void *dest_ptr, const void *source_ptr, size_t len) 601: { 602: boolean dest_within_dram; 603: boolean source_within_dram; 604: 605: unsigned int size; 606: unsigned int remaining_bytes; 607: unsigned int max_shiftable_size; 608: 609: uint8_t *dest_d8_ptr; 610: const uint8_t *source_d8_ptr; 611: 612: dest_within_dram = within_dram(dest_ptr); 613: source_within_dram = within_dram(source_ptr); 614: 615: if (dest_within_dram || source_within_dram) 616: { 617: source_d8_ptr = source_ptr; 618: dest_d8_ptr = dest_ptr; 619: remaining_bytes = len; 620: 621: while (remaining_bytes > 0) 622: { 623: max_shiftable_size = COPY_BUFFER_SIZE - CHUNK_SIZE; 624: size = min(remaining_bytes, max_shiftable_size); 625: 626: copy_d32_safe(size, source_d8_ptr, dest_d8_ptr); 627: 628: remaining_bytes = remaining_bytes - size; 629: source_d8_ptr = source_d8_ptr + size; 630: dest_d8_ptr = dest_d8_ptr + size; 631: } 632: } 633: else 634: memcpy(dest_ptr, source_ptr, len); 635: 636: return dest_ptr; 637: } File - ../vm/src/vm_if_cmd.c: 381: SBret_status vm_send_seqcmd_tlm(vm_cmd_pkt_fmt *ccsds_cmd) : 401: /* Fill data section with the CCSDS CMD sent to S/C by VMLFC */ 402: memcpy_d32_safe(&vm_tlm_send.data_seq_load, ccsds_cmd, sizeof(vm_cmd_pkt_fmt));",12/19/05ProjectA - TIM - 2090,OBC Build 5.1 Code: variable 'vm_10Hz_frame_delay’ tested against out-of-range value,3,"The file vm_main.c line 254 tests the variable ‘vm_10Hz_frame_delay’, defined as unsigned short (16 bits), against the constant ‘VM_18HRS_COMP’, defined as ‘68400’ (17 bits). Build 5.1 FlexeLint Message: Constant out of range for operator '>=' FlexeLint Message ID #650 Referenced Source Code: File - ../vm/src/vm_main.c: 135: #define VM_18HRS_COMP 68400 /* Roll-over number - 18 Hours (Secs) */ : 153: u_word vm_10Hz_frame_delay; /* Dynamic cntr */ : 253: /* Reset Major Frame Rate Cntr after 18 Hrs */ 254: if( vm_10Hz_frame_delay >= VM_18HRS_COMP) { 255: vm_10Hz_frame_delay = 0; 256: } File - ../packets/fdstypes.h 22: typedef unsigned short u_word; /* 16 bits unsigned */",12/19/05ProjectA - TIM - 2087,OBC Build 5.1 Code: function 'check_to_report_tag' missing return value,3,"The file vm_if_cmd.c defines the function ‘check_to_report_tag’ on lines 296-375. This function specifies a return value of type ‘vm_cmd_opcode_type’. However, if the condition on line 310 is satisfied, the function exits without a return value on line 311. This becomes a problem on line 183 within the same file, when the function ‘cmd_send’ calls ‘vm_cmd_opcode_type’ and assigns the undefined return value to another variable. Build 5.1 FlexeLint Message: function 'check_to_report_tag(int, const unsigned char *)' should return a value (see line 296) FlexeLint Message ID #533 Referenced Source Code: File - ../vm/src/vm_if_cmd.c: 151: int cmd_send(int source, const uint8_t *cmd_ptr) : 182: /* Check to report TAGs */ 183: tag_opcode = check_to_report_tag(source, cmd_ptr); 184: /* Send S/C SEQ Command to SW Bus which will */ 185: /* route it to the specified task */ 186: /* The SWBus will provide a dispatch status only */ 187: /* Yet, send only valid commands */ 188: if((vm_extract_ccsds_part.hdr.packet_id & CMD_VALID) 189: && (tag_opcode == NOT_A_TAG)) : 296: vm_cmd_opcode_type check_to_report_tag(int cmd_source_id, const uint8_t *cmd_ptr) 297: { 298: 299: const uint8_t *parm_ptr; 300: vm_cmd_opcode_type opcode; 301: char function_name[VM_NUM_SYMBOL_CHARS]; 302: char return_value[VM_NUM_CMD_RETURN_STRING_CHARS]; 303: Event_Message_ID evr_info; 304: u_dword evr_id; 305: 306: 307: memset(function_name, 0, VM_NUM_SYMBOL_CHARS); 308: memcpy_d32_safe(&opcode, cmd_ptr, sizeof(opcode)); 309: 310: if (cmd_source_id < 0 || cmd_source_id >= VM_NUM_ENGINES) 311: return;",12/19/05ProjectA - TIM - 2085,Build 5.1.1 OBC Code: Version Conflict of eepromImage.bld Referenced by Build 5.1 SMD,4,"The project has produced OBC Software Media Descriptions (SMDs) Revisions C, F, G, K, and L to support the OBC Builds 3.0, 4.0, 5.0, 5.1, and 5.1 respectively, which represents all builds delivered to the NASA IV&V Facility. All of these SMDs contain a Section 6.2.1: Build Procedure for RAD6000. Step 2 of this procedure requires the use of the “build” file, ‘eepromImage.bld’, which serves as the parent “make-like” file for building the RAD6000 version of the OBC FSW, by defining a set of global preprocessor directives and specifying the module-level .bld files responsible for building the individual OBC FSW modules. Revision C of the SMD indicates version 1.8 of the file eepromImage.bld is applicable to the Build 3.0 OBC code, which has evolved to version 1.12 in the Revision K of the SMD applicable to the Build 5.1 OBC code. Between the Build 3.0 and 5.1 releases of the OBC code, the substantive changes to eepromImage.bld have been limited to the VM-related module. Revision L of the SMD applicable to the Build 5.1.1 OBC code cites version 1.12 of eepromImage.bld as being a changed version for this file; however, the Revision K SMD applicable to the Build 5.1 code also cites version 1.12 as the latest version of this file. Therefore, either Revision K or L of the OBC SMD is inaccurately reflecting the applicable version of eepromImage.bld. This problem could be dismissed as a typographical error, except the version of the eepromImage.bld file provided with the Build 5.1.1 code is significantly different from the version provided with the Build 5.1 code. The Build 5.1.1. version of eepromImage.bld has been reduced to only three lines, none of which contain the global preprocessor directive definitions or the module-level .bld files responsible for building the individual OBC FSW modules. Referenced Files: File – Build 3.0 eepromImage.bld: #!build default: object_file :c_option=slashcomment :ppc_cputype=rsc :c_mode=ansi :target=/project/ProjectAsvr/green/vxwppc.bld :sourcedirs=/export/home/ProjectA/wind/radbuild22/target/h :defines=CPU=RSC :defines=_GREEN_TOOL :defines=DAVES_TEST :defines=_VXWORKS_PPC_ :defines=_OV4_ :defines=HS_TS_TOOL_SET :defines=GOODS_EXCLUDE_DOPPLER=1 :defines=REDUCED_DRAG_TABLES=1 :defines=GOODS_PRAGMA_PACK4=1 :defines=GOODS_PROP_STATE_ONLY :defines=OV4_RAD6K :defines=LIO_BLD :defines=_EMBED_ :ada_compiler.name=cxvxppc :c_compiler.name=ccomppc :linker.args=@VM_Relocate.lnk ../s1/s1.bld subproject ../s2/s2.bld subproject ../s3/s3.bld subproject ../tg/tg.bld subproject ../lio/lio.bld subproject ../ac/ac.bld subproject ../au/au.bld subproject ../at/at.bld subproject ../an/an.bld subproject ../ds/ds.bld subproject ../xb/xb_edu.bld subproject ../di/di.bld subproject ../main/main.bld subproject ../sb/sb.bld subproject ../sc/sc.bld subproject ../sm/sm.bld subproject ../tc/tc.bld subproject ../to/to.bld subproject ../tp/tp.bld subproject ../hs/hs.bld subproject ../ts/ts.bld subproject ../ms/ms.bld subproject ../cs/cs.bld subproject #../vm/vm.bld # subproject File – Build 5.1 eepromImage.bld: #!build default: object_file :c_option=slashcomment :ppc_cputype=rsc :c_mode=ansi :target=/project/ProjectAsvr/green/vxwppc.bld :sourcedirs=/export/home/ProjectA/wind/radbuild50/target/h :defines=CPU=RSC :defines=_GREEN_TOOL :defines=DAVES_TEST :defines=_VXWORKS_PPC_ :defines=_OV4_ :defines=HS_TS_TOOL_SET :defines=GOODS_EXCLUDE_DOPPLER=1 :defines=REDUCED_DRAG_TABLES=1 :defines=GOODS_PRAGMA_PACK4=1 :defines=GOODS_PROP_STATE_ONLY :defines=OV4_RAD6K :defines=LIO_BLD :defines=_EMBED_ :defines=VM_PRESENT :ada_compiler.name=cxvxppc :c_compiler.name=ccomppc ../s1/s1.bld subproject ../s2/s2.bld subproject ../s3/s3.bld subproject ../tg/tg.bld subproject ../lio/lio.bld subproject ../ac/ac.bld subproject ../au/au.bld subproject ../at/at.bld subproject ../an/an.bld subproject ../ds/ds.bld subproject ../xb/xb_edu.bld subproject ../di/di.bld subproject ../main/main.bld subproject ../sb/sb.bld subproject ../sc/sc.bld subproject ../sm/sm.bld subproject ../tc/tc.bld subproject ../to/to.bld subproject ../tp/tp.bld subproject ../hs/hs.bld subproject ../ts/ts.bld subproject ../ms/ms.bld subproject ../cs/cs.bld subproject ../vm/vm.bld subproject File – Build 5.1.1 eepromImage.bld: #!build default: program",12/19/05ProjectA - TIM - 2084,Build 5.1 OBC Code: Possible use of null pointer,4,"Based upon IV&V verification, it appears as though a null pointer is being used within an assignment statement. This issue exists at line 356 and at line 357 within file ta_main.c. ""rt_frame_pointer"" is set equal to NULL. Within the switch for (TA_state), if ""TA_state"" equals ""TA_OUTPUT_RVCDU_ONLY"" then the following code is processed where ""rt_frame_pointer"" is still null and is used within an assignment statement: #ifdef OV4_RAD6K // // Re-init the function_code and packet_length because they may have been // altered by the logic in the TA_OUTPUT_RVCDU_AND_PVCDU state. // rt_frame_pointer->sxCmd.sec_hdr.function_code = eHSS_CMD_REQ; rt_frame_pointer->sxCmd.hdr.packet_length = TA_S2_RVCDU_PKT_LEN; FlexeLint Message # 613: Possible use of null pointer 'rt_frame_pointer' in left argument to operator '->' [Reference: file tamain.c: line 319] FlexeLint Message # 613 Description: From information gleaned from earlier statements, it is possible that a null pointer (a pointer whose value is 0) can be used in a context where null pointers are inappropriate. Such contexts include: Unary *, pointer increment (++) or decrement(--), addition of pointer to numeric, and subtraction of two pointers. In the case of binary operators, one of the words 'left' or 'right' is used to designate which operand is null. Symbol identifies the pointer variable that may be NULL. See also messages 413 and 794. Source Code References: File - ta_main.c Line # 319: rt_frame_pointer = NULL; output_pvcdu = FALSE; // // State Machine processing while Process == TRUE // while (Process == TRUE) { switch (TA_state) { case TA_OUTPUT_RVCDU: /*D100-010*/ rt_frame_pointer = get_real_time_vcdu(); if (rt_frame_pointer != NULL) { fill_in_vcdu_count(rt_frame_pointer); TA_state = TA_OUTPUT_RVCDU_ONLY; } else TA_state = TA_EXIT; break; case TA_OUTPUT_PVCDU: /*D100-010*/ output_pvcdu = ds_GetPVCDU(&addr_word_cnt, TA_TASK_ID); if (output_pvcdu) /*D100-010*/ TA_state = TA_OUTPUT_PVCDU_ONLY; /*D100-010*/ else /*D100-010*/ TA_state = TA_OUTPUT_RVCDU; /*D100-010*/ break; case TA_OUTPUT_RVCDU_ONLY: #ifdef OV4_RAD6K // // Re-init the function_code and packet_length because they may have been // altered by the logic in the TA_OUTPUT_RVCDU_AND_PVCDU state. // rt_frame_pointer->sxCmd.sec_hdr.function_code = eHSS_CMD_REQ; rt_frame_pointer->sxCmd.hdr.packet_length = TA_S2_RVCDU_PKT_LEN;",12/9/05ProjectA - TIM - 2083,Requirement XB007 Is Not Verified By Script xb_write_test.scr.,3,"L4-SROBC-57 / XB007 - The OBC C&DH software shall accept and execute a XB_WRITE command which transfers the specified single data message within the command packet (up to 32 words) from the 1553 Bus Controller to the specified Remote Terminal and Subaddress. Issue: The 10-12-05 DOORS data base shows that XB007 is tested by Procedure S912-TP4925 (an RTM procedure not made available to IV&V) using xb_write_test.scr. This script is found in the B5.1 script file and the script header indicates that XB007 is linked. It appears there are several problems with this test: (1) it does not transfer ""up to 32 words"" and (2) there is no verification that an RT could accept the transfer because a false RT and subaddress was specified (this test just shows that a message was sent by the BC). Unless this script is modified for ProjectA under the RTM procedure, it does not fully test the requirement.",12/2/05ProjectA - TIM - 2082,Requirement XB006 Is Not Verified By Script xb_select_bus_test.scr.,3,"L4-SROBC-56 / XB006 - The OBC C&DH software shall provide a command to select the 1553 preferred bus side (A or B) for a single RT. The 10-12-05 DOORS data base shows that XB006 is tested by Procedure S912-TP4925 (an RTM procedure not made available to IV&V) using xb_select_bus_test.scr. This script is found in the B5.1 script file and the script header indicates that XB006 is linked. The ProjectA FSW CDR (May 26-28 2004) shows that there are nine 1553 RTs for the ProjectA spacecraft. The script only shows that commands are sent to four RTs. Unless this script is modified for ProjectA under the RTM procedure, it does not fully test the requirement.",12/2/05ProjectA - TIM - 2081,HSS1 Requirements S1002 and S1003 Are Not Linked To The Assigned Test Script,3,"The 10-12-05 DOORS data base shows that S1002 (L4-SROBC-66) and S1003 (L4-SROBC-67) are linked to script s1_critical_vcdu_test.scr. The associated test procedure is S912-TP4925 (an RTM procedure not made available to IV&V). This test script is found in the B5.1 data drop and does not show that these two requirements are linked. Unless this script is modified for RTM testing, S1002 and S1003 will not be verified by the test program.",11/30/05ProjectA - TIM - 2080,Build 5.1 OBC Code: Symbol not referenced,4,"Based upon IV&V verification, The static function ""HS_FDC_G3_Handler"" at line 1778 of file hs_main.c was not referenced in the module after having been declared and defined within hs_main.c. FlexeLint Message # 528: Symbol 'packet_buffer' (line 629, file xbm_out.c) not referenced FlexeLint Message # 528 Description: The named static variable or static function was not referenced in the module after having been declared. Source Code References: File - hs_main.c: 1778: static void HS_FDC_G3_Handler ( int cmdSet )",11/30/05ProjectA - TIM - 2079,Uplink HLP Requirements Should be Verified by Test rather than Analysis as specified in DOORS DB,2,"The 10-12-05 DOORS DB contains many Uplink requirements with are listed as verification by analysis and contain a note in the ""test script"" column that states ""Delete: Not a Software Requirement."" A list of these requirements is presented in the attachment to this TIM. The ""test script"" column annotation is confusing because the ""Type"" column states ""Requirement"" which accords with IV&V's assessment of these items. These items are related to the implementation of HLP commands and IV&V notes that the FSW User Manual has many references to HLP command processing in the Uplink firmware. Since most of the requirements in question are related to receiving, translating, validating, and routing commands via the Uplink interface to Hardware Logic Pulses, the IV&V team believes that Test is the most appropriate verification method, or possibly Inspection if the hardware response can not be easily verified. Furthermore it is noted that some of these items are tied to ""parent"" L4 requirements such as the relationship between L4-SRUP-56 and the subsequent ""children"" L4-SRUP-57, L4-SRUP-58, and L4-SRUP-59. In this example L4-SRUP-56 is verified by test and the latter cite analysis as the verification method. L4-SRUP-56 - The Uplink FSW shall write the HLP command field from the following Standard PCC commands to the HLP hardware if it is non-zero: L4-SRUP-57 - PCC HLP Function: ACE LVPS Power Control A-On / B-Off L4-SRUP-58 - PCC HLP Function: ACE HLP Code Enable L4-SRUP-59 - PCC HLP Function: ACE Safe Hold On",11/22/05ProjectA - TIM - 2078,Build 5.1 OBC Code: Confusing Combination of Operators; Possible Algorithm Implementation Error,5,"Issue: Possible algorithm implementation error, which the IV&V team could not confirm or refute for the cascade filter in aucfilter.c. Filter State Translation logic was added to this function since build 3.0, lines 63 - 73. FlexeLint Message #68: Operator '/' followed by operator '*' is confusing. Use parentheses. FlexeLint Message #64 Description: Some combinations of operators seem to be confusing. For example: a = b / c * d; To reduce confusion we recommend using parentheses to make the association of these operators explicit. For example: a = (b / c) * d; Code analysis: line 68 U = U / ( 1 + pFilter->A[i][0] + pFilter->A[i][1] ) * ( 1 + pFilter->B[i][0] + pFilter->B[i][1] ); As the lint message indicates this code is confusing and the user may believe that the two parenthesized quantities are in the denominator; however, due to the precedence of operators the second quantity is in the numerator.",11/17/05ProjectA - TIM - 2077,Uplink Build 5.1 Code: Unusual pointer cast,3,"In uplflog.c there is an unusual pointer cast on line 232: line 232: pkt_size = ( ((UL_FAULT_LOG_ENTRY *)new_event)->hdr.packet_length + 1 )/2 + sizeof(seds_packet_header_type); The variables pkt_size and new_event are defined as type u_word. The data type seds_packet_header_type is defined as: typedef struct { u_word packet_id; /* packet id */ bit_field seq_flags:2; /* packet sequence flags */ bit_field seq_count:14; /* packet sequence count */ u_word packet_length; /* packet data bytes -1 */ } seds_packet_header_type; The data type UL_FAULT_LOG_ENTRY is defined as: typedef struct { seds_packet_header_type hdr; time_code_sec_hdr_type event_time; u_word pad; Event_Message_ID event_id; u_word params[16]; } UL_FAULT_LOG_ENTRY; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool.",11/16/05ProjectA - TIM - 2076,Uplink Build 5.1 Code: Unusual pointer cast,3,"In ul2ul.c there is an unusual pointer cast on line 149: line 149: pktPtr = (seds_packet_header_type *)&rxFrameBuffer[rxRcvdBuffer][CMD_PTR]; The variable pktPtr is defined as type seds_packet_header_type. where seds_packet_header_type is defined as: typedef struct { u_word packet_id; /* packet id */ bit_field seq_flags:2; /* packet sequence flags */ bit_field seq_count:14; /* packet sequence count */ u_word packet_length; /* packet data bytes -1 */ } seds_packet_header_type; The array rxFrameBuffer is defined as: u_word rxFrameBuffer[2][(UU_FRAME_LEN/2)]; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool. There are similar unusual pointer casts on lines 200, 274, and 379 of ul2ul.c.",11/16/05ProjectA - TIM - 2075,Uplink Build 5.1 Code: Too few initializers for table,4,In tmon_rts.c there are eight (8) entries in the rts_buffers table that appear to have too few initializers. The entries in the table are as follows: line 240 (RTS number 7) line 272 (RTS number 8) line 304 (RTS number 9) line 336 (RTS number 10) line 368 (RTS number 11) line 400 (RTS number 12) line 432 (RTS number 13) line 703 (RTS number 21) The rts_buffers table is defined as: u_word rts_buffers[ SC_NUMBER_OF_RTS ][ SC_RTS_BUFF_SIZE ],11/15/05ProjectA - TIM - 2074,Uplink Build 5.1 Code: Unusual pointer cast,3,"In sm_main.c there is an unusual pointer cast on line 302 in the call to SM_tbl_load. line 302: if ( do_load == TRUE ) { SM_tbl_load ( ( sm_tbl_load_fmt * ) sm_cmd_pkt ) ; } The variable sm_cmd_pkt is defined as type sm_cmd_pkt_fmt. where sm_cmd_pkt_fmt is defined as: typedef struct { seds_packet_header_type hdr ; cmd_sec_header_type sec_hdr ; u_word data_load [ SM_MAX_PKT_WSIZE ] ; } sm_cmd_pkt_fmt ; Function SM_tbl_load accepts a paramter of type sm_tbl_load_fmt which is defined as: typedef struct { seds_packet_header_type hdr ; cmd_sec_header_type sec_hdr ; u_word offset ; u_word num_words ; u_word spare ; u_word load_data [ SM_MAX_DATA_WSIZE ] ; } sm_tbl_load_fmt ; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool. There are similar unusual pointer casts on lines 307, 311, 315, 319, 323, 338, and 508 of sm_main.c.",11/15/05ProjectA - TIM - 2073,Uplink Build 5.1 Code: Unusual pointer cast,3,"In scstate.c there is an unusual pointer cast on line 423. line 423: cmd_ptr = ( sc_rts_command_header_type *)&rts_buffer_0[cmd_offset]; The variable cmd_ptr is defined as: sc_rts_command_header_type *cmd_ptr; where sc_rts_command_header_type is defined as: typedef struct { sc_rel_time_tag_type time_tag; seds_packet_header_type header; cmd_sec_header_type sec_hdr; } sc_rts_command_header_type; Variable rts_buffer_0 is defined as: u_word rts_buffer_0[SC_RTS_BUFF_SIZE]; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool.",11/15/05ProjectA - TIM - 2071,Uplink Build 5.1 Code: Unusual pointer cast,3,"In ts_tlm.c there is an unusual pointer cast on line 880. line 880: if ( whichPkt == OBC ) mon_point_val = TSt_mon_stripper ( ( packet_offset_type * ) ( ( ts_tlm_packet_type_no_sec_hdr * )( tlm_packet_Ptr ) )->data); The variable mon_point_val is defined as: mon_point_val_type mon_point_val; where mon_point_val_type is a dword. Variable tlm_packet_Ptr is defined to be of type ts_tlm_packet_type: typedef struct { seds_packet_header_type pri_header; time_code_sec_hdr_type sec_header; u_word data [MAX_PACKET_DATA_LEN]; } ts_tlm_packet_type; ts_tlm_packet_type_no_sec_hdr is defined as: typedef struct { seds_packet_header_type pri_header; u_word data [MAX_PACKET_DATA_LEN]; } ts_tlm_packet_type_no_sec_hdr; packet_offset_type is defined as: typedef u_word packet_offset_type; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool.",11/14/05ProjectA - TIM - 2070,Uplink Build 5.1 Code: Switch statement has no default case,3,"In file ts_tlm.c function TSt_exec_scs, the switch statement below does not provide a default case statement: switch ( curr_threshold ) { ...",11/14/05ProjectA - TIM - 2069,Uplink Build 5.1 Code: Switch statement has no default case,3,"In file ts_tlm.c function TSt_mon_stripper, the switch statement below does not provide a default case statement: switch ( ts_curr_monitor_Ptr->data_size ) { ...",11/14/05ProjectA - TIM - 2067,Uplink Build 5.1 Code: Unusual pointer cast,3,"In ts_task.c there are two unusual pointer casts. They can be found on lines 127 and 135. line 127: packet_Ptr = (ts_tlm_packet_type *) statusBuffer; The variable statusBuffer is defined as: u_word statusBuffer[ UU_STATUS_LEN / 2]; line 135: packet_Ptr = (ts_tlm_packet_type *) TSStatBuffer; The variable TSStatBuffer is defined as: u_word TSStatBuffer [ TSSTAT_BUFF_LEN ]; The variable packet_Ptr is defined as: ts_tlm_packet_type *packet_Ptr; typedef struct { seds_packet_header_type pri_header; time_code_sec_hdr_type sec_header; u_word data [MAX_PACKET_DATA_LEN]; } ts_tlm_packet_type; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool.",11/14/05ProjectA - TIM - 2066,Uplink Build 5.1 Code: Redundant macros,4,"In file ts_limst.c, the following macros are redundantly defined elsewhere: Redundant macro 'CONTINUE' defined identically at line 62, file ts_lim.h Redundant macro 'NO_CONTINUE' defined identically at line 63, file ts_lim.h Redundant macro 'THRESH_ACT' defined identically at line 57, file ts_lim.h Redundant macro 'THRESH_NOT_ACT' defined identically at line 58, file ts_lim.h Redundant macro 'OPER_EQ' defined identically at line 69, file ts_lim.h Redundant macro 'OPER_NE' defined identically at line 68, file ts_lim.h Redundant macro 'OPER_LE' defined identically at line 71, file ts_lim.h Redundant macro 'OPER_GE' defined identically at line 70, file ts_lim.h Redundant macro 'OPER_G' defined identically at line 66, file ts_lim.h Redundant macro 'OPER_L' defined identically at line 67, file ts_lim.h Redundant macro 'NOMASK' defined identically at line 60, file ts_lim.h Redundant macro 'SCS_ACTIVE' defined identically at line 73, file ts_lim.h Redundant macro 'SCS_INACTIVE' defined identically at line 74, file ts_lim.h Redundant macro 'NOPARM' defined identically at line 55, file ts_lim.h Redundant macro 'NOFUNC' defined identically at line 54, file ts_lim.h Redundant macro 'DATA_BYTE' defined identically at line 45, file ts_lim.h Redundant macro 'DATA_U_BYTE' defined identically at line 46, file ts_lim.h Redundant macro 'DATA_WORD' defined identically at line 47, file ts_lim.h Redundant macro 'DATA_U_WORD' defined identically at line 48, file ts_lim.h Redundant macro 'DATA_DWORD' defined identically at line 49, file ts_lim.h",11/14/05ProjectA - TIM - 2065,Uplink Build 5.1 Code: Possible Out-of-Bounds Pointer,2,"In file ts_cmd.c on lines 190 and 272, function TSc_monitor_reset, there are possible uses of an out of bounds pointer (cntrl_byte) because of pointer arithmetic: line 190 and 272: cntrl_byte += sizeof(threshold_data_type); The pointer cntrl_byte is defined to be of type thresh_ctrl_byte_type shown below: typedef struct { bit_field threshold_active : 1; bit_field continue_flag : 1; bit_field operator : 3; bit_field stored_comm_seq_active : 1; bit_field reserved : 2; } thresh_ctrl_byte_type; The threshold_data_type is shown below: typedef struct { thresh_ctrl_byte_type thresh_ctrl_byte; bit_field stored_comm_seq_id : 8 ; mon_point_val_type threshold_limit; /* dword */ u_dword failure_minimum; } threshold_data_type; It appears that cntrl_byte on lines 190 and 272 could be 10 bytes beyond the end of data based on definitions above.",11/14/05ProjectA - TIM - 2063,OBC Build 5.1 Code: Converting enumeration to integer,4,"In file s1task.c in function 's1_init', lines 409 and 414, the variables 'rc' and 's1Fd' is compared with enumerated values. The variables 'rc' and s1Fd' are defined to be of type int. While it is technically okay to compare an enumerated type with an integer (since that is what enumerated types are), it would make sense logically to declare 'rc' and 's1Fd' as enumerated type TerrorCODE.",11/11/05ProjectA - TIM - 2062,OBC Build 5.1 Code: Unusual pointer cast,3,"In S1task.c there are two unusual pointer casts. They can be found on lines 220 and 274. line 220: packet_header = (sx_hss_cmd_fmt *)packet_buffer; The variable packet_buffer is defined as: static u_word packet_buffer[SX_MAX_PKT_WSIZE]; line 274: s1_command_exec((sx_hss_cmd_fmt *) &event_buff); The variable event_buff is declared to be of S1_EventBufferType as it is shown below: typedef struct { seds_packet_header_type sx_hdr; cmd_sec_header_type sec_hdr; sx_cmd_args hss_cmd; u_word response_sid; u_word wordCount; seds_packet_header_type evntbuf_pkthdr; u_byte packet_data[EVENT_BUFFER_BSIZE]; } S1_EventBufferType; This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool.",11/11/05ProjectA - TIM - 2058,"Build 5.1 OBC Code: Variable ""pUTgtInr"" may not have been initialized",2,"Issue: Based upon IV&V verification, the variable ""pUTgtInr"" (line #574) will be used before it is assigned a value in the function ""AC_ChangeTarget"" of the file ""accommandattitude.c"" under these conditions: if ( pTgt->InrTgtSelect <= RaDecTarget )and if (pAcGlobal->ModeRequested != TargetInertial) or if (pTgt->InrTgtSelect == NadirTarget) and (pAcGlobal->ModeRequested != AsteroidNadirPointing) or if (pTgt->InrTgtSelect == TrackingTarget) and (pAcGlobal->ModeRequested != AsteroidTgtTracking) or if (pTgt->InrTgtSelect == DvEngineTarget) and (pAcGlobal->ModeRequested != DeltaVEngine) or if (pTgt->InrTgtSelect == DvRcsTarget) and (pAcGlobal->ModeRequested != DeltaVRCS) pUTgtInr declaration: 347 vector_type uTgtBdyOld, *pUTgtInrOld, uTgtBdy, uTgtInr, *pUTgtInr, uSunBdy; pUTgtInr is used in this assignment. 574 pAcGlobal->Control.pInrTgtUnitV = pUTgtInr; FlexeLint Message #644: Variable 'pUTgtInr' (defined line 347) may not have been initialized FlexeLint Message #644 Description: An auto variable was not necessarily assigned A value before use.",11/11/05ProjectA - TIM - 2057,OBC Build 5.1 Code: Unusual pointer cast,3,"In S1cmd.c there are a number of unusual pointer casts. They can be found on lines 514, 526, 532, 533, 541, 564, and 565. An example from line 514 is as follows: switch( ((sx_ioctl_fmt*)sxCommand)->function ) { ... This type of pointer casting with the 'C' language is legal, but is unusual. It is difficult to assess via manual code inspection. This particular issue was flagged by the FlexeLint tool.",11/11/05ProjectA - TIM - 2055,OBC Build 5.1 Code: Structure redeclared differently,4,"The typedef 'sx_qhssDatBuf_fmt' is declared in S1.H, S2.H and S3.H as shown below. From S1: typedef struct { qddBuffer sxBufCtl; u_word cmd[2]; /* Command Words Cmd/Word Count */ qddDMA dataDMA; /* Mode for data x-fer */ int dataContentWords; /* Content Words for data */ u_word *pDataContent; /* Pointer to data */ u_word data[S1_VCDU_WSIZE]; /* Allocate max transfer size */ } sx_qhssDatBuf_fmt; From S2: typedef struct { qddBuffer sxBufCtl; u_word cmd[2]; /* Command Words Cmd/Word Count */ qddDMA dataDMA; /* Mode for data x-fer */ int dataContentWords; /* Content Words for data */ u_word *pDataContent; /* Pointer to data */ u_word data[S2_VCDU_WSIZE]; /* Allocate max transfer size */ } sx_qhssDatBuf_fmt; From S3: typedef struct { qddBuffer sxBufCtl; u_word cmd[2]; /* Command Words Cmd/Word Count */ qddDMA dataDMA; /* Mode for data x-fer */ int dataContentWords; /* Content Words for data */ u_word *pDataContent; /* Pointer to data */ u_word data[S3_DATA_WSIZE]; /* Allocate max transfer size */ } sx_qhssDatBuf_fmt; The only difference is the size of the 'data' element.",11/10/05ProjectA - TIM - 2053,OBC Build 5.1 Code: Switch statement has no default case,3,"In file ts_tlm.c function TSt_mon_stripper, the switch statement below does not provide a default case statement: switch ( ts_curr_monitor_Ptr->data_size ) { ...",11/10/05ProjectA - TIM - 2052,OBC Build 5.1 Code: Possible loss of information at initialization,3,"In file ts_limst.c, it appears that entries 164 and 165 of ts_monitor_table contain values where there is a potential for loss of information. The table ts_monitor_table is defined to be of type monitor_record_type which is defined as follows: typedef struct { u_byte monitor_id; u_byte monitor_active; u_byte data_size; u_byte derived_func_active; u_word stream_id; u_word packet_offset; u_dword bit_mask; u_byte derived_func_offset; u_byte der_func_param_list [MAX_DER_FUNC_PARAM]; threshold_data_type threshold_data [MAX_THRESHOLDS]; u_word event_message_max; } monitor_record_type; The potential problem is with the value assigned for the failure minimum in one of the threshold_data array entries. The definition of threshold_data_type is provided below. typedef struct { thresh_ctrl_byte_type thresh_ctrl_byte; u_byte stored_comm_seq_id; mon_point_val_type threshold_limit; u_word failure_minimum; } threshold_data_type; A value of 86400 is provided for the failure_minimum on lines 3343 and 3364 for entries 164 and 165 respectively. The number 86400 is represented by the binary value 10101000110000000 which is 17 bits in length. The failure_minimum is defined to be of type u_word which is 16 bits in length and cannot represent a number as large as 86400.",11/10/05ProjectA - TIM - 2051,OBC Build 5.1 Code: Redundant macros,4,"In file ts_limst.c, the following macros are redundantly defined elsewhere: Redundant macro 'CONTINUE' defined identically at line 125, file ts_lim.h Redundant macro 'NO_CONTINUE' defined identically at line 126, file ts_lim.h Redundant macro 'THRESH_ACT' defined identically at line 120, file ts_lim.h Redundant macro 'THRESH_NOT_ACT' defined identically at line 121, file ts_lim.h Redundant macro 'OPER_EQ' defined identically at line 132, file ts_lim.h Redundant macro 'OPER_NE' defined identically at line 131, file ts_lim.h Redundant macro 'OPER_LE' defined identically at line 134, file ts_lim.h Redundant macro 'OPER_GE' defined identically at line 133, file ts_lim.h Redundant macro 'OPER_G' defined identically at line 129, file ts_lim.h Redundant macro 'OPER_L' defined identically at line 130, file ts_lim.h Redundant macro 'NOMASK' defined identically at line 123, file ts_lim.h Redundant macro 'SCS_ACTIVE' defined identically at line 136, file ts_lim.h Redundant macro 'SCS_INACTIVE' defined identically at line 137, file ts_lim.h Redundant macro 'NOPARM' defined identically at line 118, file ts_lim.h Redundant macro 'NOFUNC' defined identically at line 117, file ts_lim.h Redundant macro 'DATA_BYTE' defined identically at line 110, file ts_lim.h Redundant macro 'DATA_U_BYTE' defined identically at line 111, file ts_lim.h Redundant macro 'DATA_WORD' defined identically at line 112, file ts_lim.h Redundant macro 'DATA_U_WORD' defined identically at line 113, file ts_lim.h Redundant macro 'DATA_DWORD' defined identically at line 114, file ts_lim.h Redundant macro 'MAX_MONITOR_POINTS' defined identically at line 68, file tspkt.h",11/10/05ProjectA - TIM - 2050,OBC Build 5.1 Code: Switch statement has no default case,3,"In file ts_cmd.c function TSc_pkt_prcsr, the switch statement below does not provide a default case statement: switch (cmd_packet_Ptr->pri_header.packet_id) { ...",11/10/05ProjectA - TIM - 2049,OBC Build 5.1 Code: Variable may not have been initialized,4,"In file sts_df.c, variable 'Twta_Pwr_State' (line 1716) may not have been initialized.",11/10/05ProjectA - TIM - 2048,OBC Build 5.1 Code: Functions are empty,4,"In file sts_df.c, the following functions are empty and perform no action: TSdf_for_TMON_Groups_of_4_htrs TSdf_for_TMON_Groups_of_5_htrs TSdf_for_TMON_Groups_of_6_htrs",11/10/05ProjectA - TIM - 2047,OBC Build 5.1 Code: Variable may not have been initialized,4,In file sts_df.c. variable 'TempLevelStat' (line 972) may not have been initialized.,11/10/05ProjectA - TIM - 2046,Six VM Requirements Linked to Test Procedure S912-TP4971 Cannot Be Verified By IV&V,3,"The 10-12-05 DOORS data base indicates that requirements VM005.3 (L4-SRVML-20), VM007.1 (L4-SRVML-24), VM007.2 (L4-SRVML-25), VM007.3 (L4-SRVML-26), VM007.4 (L4-SRVML-27) and VM007.5 (L4-SRVML-28) are linked to Test Procedure S912-TP4971 and to scripts vm_rtm_test.scr and vm_runtest3(). These artifacts were not made available to IV&V, therefore, it is unknown if the tests are adequate to verify the linked requirements or if they have been executed. It is noted that script vm_runtest3() for Build 5.1 links VM001.4, not VM007.4.",11/9/05ProjectA - TIM - 2045,Seven VM Requirements Linked to B5.0 and B5.1 Scripts Are Not Verified,3,"The 10-12-05 DOORS data base shows: VM002.2 (L4-SRVML-8) and VM004.2 (L4-SRVML-15) are linked to vm_runseqtest1.scr for B5.1. VM004.3 (L4-SRVML-16), VM008.1 (L4-SRVML-31), VM008.2 (L4-SRVML-32), VM008.3 (L4-SRVML-33) are linked to vm_runseqtest2.scr for B5.1. VM004.1 (L4-SRVML-14) is linked to vm_runseqtest1.scr for B5.0. Sub-Issue #1: None of the VM requirements listed above are found linked to specific test steps in the three scripts. Therefore, these requirements were apparently not verified by either the B5.0 or the B5.1 VM tests. In addition, the as-run procedure S912-TP4970, Section 11, Rev-A, does not link any VM requirements to the two test scripts that were run in the B5.1 VM test. IV&V notes that DOORS from the B5.1 data drop does not contain a sheet for VM. Sub-Issue #2: ProjectA Virtual Machine (VM) Task Flight Software Test Procedures S912-TP4970, REVISION – A Section 11.1 shows three VM test scripts: vm_runseqtest1(),vm_runseqtest2() and vm_runseqtest4(). The As-Run version of this procedure shows that only the first two scripts were execxuted with vm_runseqtest4() omitted by redline. The script vm_runseqtest4() is not in the B5.1 script library furnished to IV&V. Sections 8, 9 and 10 are missing from the procedure.",11/9/05ProjectA - TIM - 2044,"Build 5.1 OBC Code: Enum constant ""ac_mode_::TargetAttSteering"" not used within defaulted switch - case #5",2,"Issue: Based upon IV&V verification, the switch expression ""switch ( pAcGlobal->Mode )"" is an enumerated type and the enumerated constant ""TargetAttSteering"" was not present as a case label in the function ""AC_AC_Select_Mode"" of the file ""acprocesscommands.c"". The control error may need to be verified for the mode ""TargetAttSteering"". FlexeLint Message #788: enum constant 'ac_mode_::TargetAttSteering' not used within defaulted switch FlexeLint Message #788 Description: A switch expression is An enumerated type and at least one of the enumerated constants was not present as a case label. However, unlike Info 787, a default case was provided. This is a mild form of the case reported by Info 787. The user may thus elect to inhibit this mild form while retaining Info 787. Source Code References: File - acprocesscommands.c: 1149: switch ( pAcGlobal->ModeRequested )",11/8/05ProjectA - TIM - 2043,"Build 5.1 OBC Code: Enum constant ""ac_mode_::TargetAttSteering"" not used within defaulted switch - case #4",2,"Issue: Based upon IV&V verification, the switch expression ""switch ( pAcGlobal->Mode )"" is an enumerated type and the enumerated constant ""TargetAttSteering"" was not present as a case label in the function ""AC_ModeTransition"" of the file ""acmain.c"". The control error may need to be verified for the mode ""TargetAttSteering"". FlexeLint Message #788: enum constant 'ac_mode_::TargetAttSteering' not used within defaulted switch FlexeLint Message #788 Description: A switch expression is An enumerated type and at least one of the enumerated constants was not present as a case label. However, unlike Info 787, a default case was provided. This is a mild form of the case reported by Info 787. The user may thus elect to inhibit this mild form while retaining Info 787. Source Code References: File - acmain.c: 314: switch ( RequestedMode )",11/8/05ProjectA - TIM - 2042,"The hs_test.scr, Test #3(OBC Health Status Message), Does Not Verify the Linked HS Requirements",3,"Test #3 is linked to the following HS requirements: L4-SROBC-291 / HS005 - Flight Software shall generate an OBC health status telemetry packet consisting of an OBC state (healthy, reset, fault), the status of telemetry monitoring (enabled/disabled), and shall be timestamped. L4-SROBC-292 / HS006 - The Flight Software shall send an OBC health status telemetry packet to the Uplink Card at no less than 2 Hz. A script comment states: “This has to be an implicit verification since there is no direct telemetry.” The script itself does not appear to verify either HS005 or HS006 as there is no check on the content of the packet, or that it is time stamped or that it is sent a no less than 2Hz.",11/3/05ProjectA - TIM - 2041,"The hs_test.scr, Test #1 (Basic HS Functions), Does Not Fully Verify the Linked OBC Healt & Safety (HS) Requirements",3,"Sub-Issue #1: Requirement L4-SROBC-288 / HS002 - Flight Software associated with the software health monitoring function shall maintain a list of critical software tasks for each software mode and perform a corrective action in the event that one or more of the critical tasks fails to ""check-in"". The term “software mode” is either incorrect or Test #1 is incomplete. Software mode is described in various ProjectA documents and includes Launch Mode, Acquisition/CSP Mode, Target Point Mode, etc. This test does not address these various modes. It is possible that the correct statement is “software group” as the test addresses four “groups”. The list of critical functions is not defined nor is it verified in this test. The term “corrective action is not specific. According to the test a “group flag” is set or the WDT is allowed to expire, depending on the Group Number. Beyond this, there are no other indications of a “corrective action” that is taken. It is noted that TIM 1160 presents an issue concerning the completeness and correctness of HS requirements. Recommendation: Revise HS002 to fully and accurately state the intended requirement. Revise the test as needed to verify the revised requirement. Sub-Issue #2: The test script includes: local NUM_OF_TASKS = 21 ; Verify current task indicator telemetry for i=0 to NUM_OF_TASKS-1 loop The loop executes for 21 tasks yet the list of tasks indicates there are 23 as follows: ; Task IDs (in glorious HRF) task_id[0] = ""AC"" task_id[1] = ""AN"" task_id[2] = ""CS"" task_id[3] = ""DI"" task_id[4] = ""DS"" task_id[5] = ""HS"" task_id[6] = ""TA"" task_id[7] = ""MS"" task_id[8] = ""S1"" task_id[9] = ""S2"" task_id[10] = ""S3"" task_id[11] = ""SB"" task_id[12] = ""SC"" task_id[13] = ""SM"" task_id[14] = ""TC"" task_id[15] = ""TG"" task_id[16] = ""TO"" task_id[17] = ""TP"" task_id[18] = ""XB"" task_id[19] = ""TS"" task_id[20] = ""IT"" task_id[21] = ""VS"" task_id[22] = ""VT"" It is unclear why two tasks are omitted. Recommendation: Change the test to ensure consistency between the listed tasks and the loop control parameter. Sub-Issue #3: The script includes: ; Task groupings are checked in reverse order (4, 3, 2, 1). for i=1 to 3 loop ; Test two tasks in each group for j=0 to 1 loop ; Form the telemetry lookup tlmlu = hs_grouptest_tlmlu[${i}][${j}] reset point event_id ; Disable HS reception of HK packets from the selected task @${hs_grouptest_cmd[${i}][${j}][0]} This logic seems to omit Group 4. According to the FSW Users Manual DI is in group 4; however, it is a “secondary task” and as such does not send its housekeeping telemetry directly to HS. Using the “Disable HS reception of HK packets from the selected task” command would, therefore, not cause an indication that DI was not active. If no action is to be taken for this Group, it is not clear why it is found in this test. Recommendation: Either change the test script logic to include Group 4 or explain why this Group should be omitted. Sub-Issue #4: According to the DOORS data base delivered with B5.1 the HS001 (L4-SROBC-287)requirement is: “Flight Software associated with the software health monitoring function shall periodically (every 2 seconds) request and collect software execution status and housekeeping data from a predetermined list of Flight Software components.” According to hs_test.scr HS001 is stated as: “Flight Software associated with the software health monitoring function shall periodically request and collect software execution status and housekeeping data from a predetermined list of Flight Software components.” The nominal rate of 2 seconds has been omitted and is not verified by this test. Recommendation: Revise the test to show that the nominal rate is 2 seconds.",11/3/05ProjectA - TIM - 2040,"Inconsistent Definition of Health & Safety Testing in Procedure S912-TP4920, Rev-D, As-Run",4,The DOORS Excel file delivered with the B5.1 data base shows that S912-TP4920 Build 5.1 is the procedure associated with verification of HS requirements. The As-Run version of S912-TP4920 for Build 5.1 is Rev-D. Section 8.1 in Rev-D is titled “Health and Safety Test” yet there is no HS test identified in Section 11. The DOORS Excel file delivered with the B5.1 data base shows that the test script for HS requirements is hs_test.scr. A hand written addendum to the procedure indicates that the script was run and that the test passed. It is noted that the script contains linked HS requirements.,11/3/05ProjectA - TIM - 2039,Build 5.1 UPL Code: Array 'tlmBuffer' Possibly Out-of-Bounds,4,"The file ul2ul.c line 45 defines the array 'tlmBuffer' as having 'UU_MAX_TLM_LEN/2'. Line 18 of the file def_equ.h sets 'UU_MAX_TLM_LEN' = 446. Therefore, 'tlmBuffer' has 223 elements. Line 17 of the file def_equ.h sets 'UU_TLM_LEN' to a summation that resolves to 536. Then line 243 of ul2ul.c tests whether the array index is less than 'UU_TLM_LEN/2' or 268. If true, the corresponding element of 'tlmBuffer' is initialized to 0. This introduces the possibility that indices of 223 - 267 may be accessed, which would create an out-of-bounds condition. KlocWork Message: ""Buffer overflow, array index of 'tlmBuffer' may be outside the bounds. Array 'tlmBuffer' of size 223 declared at line 45 may use index values 223..267"" Referenced Source Code: File - def_equ.h: 11 #define UU_FRAME_LEN 920 12 #define UU_SYNC_LEN 2 13 #define UU_STATUS_LEN 250 14 #define UU_CMD_LEN 128 15 #define UU_PKT_PTR_LEN 2 16 #define UU_CRC_LEN 2 17 #define UU_TLM_LEN (UU_FRAME_LEN-(UU_SYNC_LEN+UU_STATUS_LEN+UU_CMD_LEN+UU_PKT_PTR_LEN+UU_CRC_LEN)) 18 #define UU_MAX_TLM_LEN 446 File - ul2ul.c: 45 u_word tlmBuffer[UU_MAX_TLM_LEN/2]; : 242 /* If not at the end, clear the last location in the buffer */ 243 if( i < UU_TLM_LEN/2 ) 244 tlmBuffer[i] = 0;",10/31/05ProjectA - TIM - 2038,Build 5.1 UPL Code: Suspiciously Placed ';' in sm_main.c,3,Lines 510 - 511 of the file sm_main.c contain an 'if' statement with a semicolon immediately after the test condition. KlocWork Message: “Suspiciously placed semicolon” Referenced Source Code: File - sm_main.c: 510 if( sm_tbl_load_cmd->hdr.packet_length >= 511 2* ( sizeof( sm_tbl_load_fmt ) - sizeof( seds_packet_header_type ) - SM_MAX_DATA_WSIZE + sm_tbl_load_cmd->num_words ) - 1 ) ; 512 { 513 do_load = TRUE ; 514 },10/31/05ProjectA - TIM - 2037,Build 5.1 OBC Code: Function Return in vm_if_cmd.c,4,"Non-void function returns void value and the value is used. vm_sizing.h: 69 typedef uint32_t vm_cmd_opcode_type; vm_if_cmd.c: 296 vm_cmd_opcode_type check_to_report_tag(int cmd_source_id, const uint8_t *cmd_ptr) 297 { 298 299 const uint8_t *parm_ptr; 300 vm_cmd_opcode_type opcode; 301 char function_name[VM_NUM_SYMBOL_CHARS]; 302 char return_value[VM_NUM_CMD_RETURN_STRING_CHARS]; 303 Event_Message_ID evr_info; 304 u_dword evr_id; 305 306 307 memset(function_name, 0, VM_NUM_SYMBOL_CHARS); 308 memcpy_d32_safe(&opcode, cmd_ptr, sizeof(opcode)); 309 310 if (cmd_source_id < 0 || cmd_source_id >= VM_NUM_ENGINES) 311 return; 312 ... 183 tag_opcode = check_to_report_tag(source, cmd_ptr); 184",10/31/05ProjectA - TIM - 2036,Build 5.1 OBC Code: 'TempLevelStat' Not Initialized in sts_df.c,4,"The file sts_df.c defines the function ‘TSdf_Incmp_SA_Deplt_OT_TWTA_Cy’. This function defines the local variable 'TempLevelStat', which serves as the return value. If the test on line 1008 is satisfied, 'TempLevelStat' will be returned by the function without being initialized. Referenced Source Code: File - sts_df.c: 972 mon_point_val_type TempLevelStat; 973 974 /* Get Last Return Value */ 975 TSs_get_curr_value ( list[ 0 ], &PrevTempLevel); 976 977 /* Get High Trip Threshold (counts) */ 978 TSs_get_curr_value ( list[ 0 ], &ThreshDur); 979 980 /* Extract Analog Data From Temperature */ 981 Temp1 = ((value >> 16) & AnalogMask); 982 Temp2 = (value & AnalogMask); 983 984 /* Set Temperature Level (lower counts = higher temperature) */ 985 if (( Temp1 <= TS_TMON_constant_table[DF_LAUNCH_TEMP_INDEX] ) && 986 ( Temp2 <= TS_TMON_constant_table[DF_LAUNCH_TEMP_INDEX] )) 987 { 988 TempLevel = 1; 989 } 990 else TempLevel = 0; 991 992 993 /* Stay Low if Previously Low */ 994 if (PrevTempLevel < 0) 995 { 996 /* Increment (decrease) counter still low */ 997 if (TempLevel == 0) TempLevelStat = PrevTempLevel - 1; 998 999 /* Tripped high, Now Low */ 1000 else if (TempLevel == 1) TempLevelStat = -1; 1001 } 1002 else if (PrevTempLevel >= ThreshDur) 1003 { 1004 /* Should have tripped, if hot continue counting */ 1005 if (TempLevel == 1) TempLevelStat = PrevTempLevel + 1; 1006 1007 /* Tripped high, response providing lower temp */ 1008 else TempLevel = -1; 1009 } 1010 else 1011 { 1012 /* Count if high */ 1013 if (TempLevel == 1) TempLevelStat = PrevTempLevel + 1; 1014 1015 /* Clear if cool */ 1016 else TempLevelStat = 0; 1017 } 1018 return (TempLevelStat);",10/31/05ProjectA - TIM - 2035,Build 5.1 OBC Code: ‘strikeTwo’ Not Initialized in patch_man.c,3,"The file patch_man.c declares the local variable ‘strikeTwo’. Several tests are performed as part of the CRC verification process. The response for several of these tests is to assign ‘strikeTwo’ a value of ‘TRUE’. However, multiple paths appear to exist that can lead to ‘strikeTwo’ being undefined for the test on line 296. Referenced Source Code: File - ../RAD6000/eepromImage/patch_man.c 110: void patch_man() 111: { 112: 113: generalDescType * priPatchPtr; 114: generalDescType * bakPatchPtr; 115: generalDescType localDescr; 116: generalDescType * patchPtr; 117: unsigned long patchMapEntry, tempCrc; 118: unsigned long * cleaning_up; 119: boolean strikeTwo; 120: eDescStatus descStatus; 121: patchStatType * patchStatus; : 261: /* If CRC does not compare, turn off the bit in the map table */ 262: if ( tempCrc != patchTabPtr->patchTab[i*j].crc ) 263: { 264: if( eDESC_BOTH == descStatus ) 265: { 266: patchTabPtr = (patchTblType *)bakPatchPtr; 267: } 268: else 269: { 270: strikeTwo = TRUE; 271: } 272: } /* END: if ( tempCrc != patchTabPtr->patchTab[i*j].crc ) */ 273: } 274: else /* crc failed*/ 275: { 276: if( eDESC_BOTH == descStatus ) 277: { 278: patchTabPtr = (patchTblType *)bakPatchPtr; 279: 280: tempCrc = paCalcCrc ((u_dword *)patchTabPtr->patchTab[i*j].startAddr, 281: patchTabPtr->patchTab[i*j].byteCount ); 282: 283: /* Verify CRC */ 284: if ( tempCrc != patchPtr[i*j].crc ) 285: { 286: strikeTwo = TRUE; 287: } 288: } 289: else /* !!!! Backup failed, REBOOT !!!! */ 290: { 291: strikeTwo = TRUE; 292: } /* END: if( eDESC_BOTH == descStatus ) */ 293: } /* END: if( paCalcCrc(... */ 294: 295: /* move the patch and check the crc in sram */ 296: if ( !strikeTwo )",10/31/05ProjectA - TIM - 2034,Build 5.1 OBC Code: Array 'Fdc' Possibly Out-of-Bounds in acprocessiru.c,2,"Buffer overflow, array index of 'Fdc' may be outside the bounds. Array 'Fdc' of size 2 declared at acjettable.h:44 may use index value 2. acsdefines.h: 210 #define NUM_OF_IRU (3) /* Number Of Inertial Reference Units (A & B) */ acjettable.h: 37 struct { 38 39 ac_component_fdc_table_type ControlSet; /* RCS set FDC Parameters */ 40 41 ac_fdc_test_table_type PowerTest; /* RCS Power Test Parameters */ 42 ac_fdc_test_table_type RateNullTest; /* RCS Rate Null Test Parameters */ 43 44 } Fdc[2]; acprocessiru.c: 393 for ( i=0; i<NUM_OF_IRU; i++ ) 394 { 395 for ( j=0; j<2; j++ ) 396 { 397 if ( pIru->RawDeltaCount[i][j] < AcIruTable.DelThetaCountLoLmt || 398 pIru->RawDeltaCount[i][j] > AcIruTable.DelThetaCountHiLmt ) 399 { 400 /* 401 ** Set telemetry bit and increment failure counter 402 */ 403 pIru->TestFailTlm[i][j].SensedRateTest = 1; 404 FailCntrPp( pAcGlobal->Counter.Entry, &pIru->Fdc.SensedRateTest[i][j] ); 405 406 /* 407 ** If gyro is in use, test is enabled (Weight > 0), 408 ** redundant axis is consistent (rate nulling mode),and failure is persistent, 409 ** perform corrective actions 410 */ 411 if ( pIru->Flags.FDCEnable == TRUE && 412 AcIruTable.Fdc.ComponentFdc[i].Enable == TRUE && 413 AcIruTable.Fdc.SensedRateTest[i].Weight > 0 ) 414 { 415 if ( pAcGlobal->Mode == RateNulling ) 416 { 417 if ( pIru->Fdc.SensedRateTest[i][j].FailCntr > AcIruTable.RateNullSatCount ) 418 { 419 if ( pIru->Select[i].Use == TRUE && 420 pIru->Consistent[i][j] == FALSE ) 421 SetFlag( &pAcGlobal->Tmon.IruDataFault, i ); 422 423 else if ( pAcGlobal->Jet.GndCmd.Packed.FdcEnable == TRUE && 424 AcJetTable.Fdc[i].ControlSet.Enable == TRUE && 425 pIru->Consistent[i][j] == TRUE )",10/31/05ProjectA - TIM - 2033,Build 5.1 OBC Code: Array 'v' Possibly Out-of-Bounds in accommandattitude.c,3,"Buffer overflow, array index of 'v' may be outside the bounds. Array 'v' of size 3 declared at acstypes.h:19 may use index value 3. This will happen every time because i will always be 3 due to the for loops on lines 231 and 241. acstypes.h: 19 typedef struct { real_type v[3]; } vector_type; /* sVector */ accommandattitude.c: 231 for (i=0; i<3; i++) 232 OmegaPs.v[i] = 2.0*Qdelta.q[i]/AC_CYCLE_TIME; 233 234 if (pSlew->Mode == SlewInProgress) 235 { /* Slew through power steering frame */ 236 if ( QoQ(pControl->QInrToPs, pSlew->QRefToBdyCmd, A_B, 237 &pControl->QInrToBdyCmd) == STATUS_ERROR ) 238 pControl->Mode.Flags.Status = STATUS_ERROR; 239 240 QoV (pSlew->QRefToBdyCmd, OmegaPs, A_B, &pControl->OmegaCmdBdy); 241 for (i=0; i<3; i++) 242 pControl->OmegaCmdBdy.v[i] += pSlew->OmegaCmdBdy.v[i]; 243 244 if (AC_SlewPropagate(pAcGlobal) == STATUS_ERROR) 245 pControl->Mode.Flags.Status = STATUS_ERROR; 246 247 pControl->TorqueCmdBdy = pSlew->TorqueCmdBdy; 248 } 249 else 250 { 251 pControl->QInrToBdyCmd = pControl->QInrToPs; 252 if ( TargetInertialSpinDownFlag == TRUE ) 253 { 254 ZEROVECTOR(pControl->OmegaCmdBdy); 255 if ( pAcGlobal->Mode == TargetInertial && 256 pControl->GndCmd.InertialTrgtMode == SunTarget && 257 pAttitude->OmegaEstBdy.v[i] > 0.0 ) {} 258 else",10/31/05ProjectA - TIM - 2032,Uplink Test Scripts Linked to Requirements in DOORS DB but not Executed in Test Procedures,2,"The following uplink test scripts are listed in the 10-12-05 DOORS DB as the verification script for over 89 uplink requirements. These scripts are not called out in any of the Test Procedures through B5.1 and therefore were not run through B5.1. Hence, these 89+ requirements have not been verified. Test Script Number of Requirements ul_ccw_csw_test 1 ul_gsc_command_test.scr 4 + 1 partial ul_hlp_command_test.scr 2 + 1 partial ul_hss1_test.scr 18 + 1 partial ul_local_pcc_fc_test.scr 1 + 1 partial ul_master_clock_test.scr 4 ul_ngsc_command_test.scr 3 ul_pcc_command_test.scr 4 + 1 partial ul_rxs_cmd.scr 1 + 1 partial ul_standard_pcc_fc_test.scr 1 + 1 partial ul_sc_cmd_test.scr 11 ul_scsa_test.scr 5 ul_sync_search.scr 1 ul_telemetry_gatherer_test.scr 14 ul_transfer_frame_test.scr 8 ul_watchdog_monitor_test.scr 2 ul_rtm_test 122",10/27/05ProjectA - TIM - 2031,Incomplete Verification of Linked ACS SRS Requirements by ProjectA_acs_b50_test_main.scr,2,"A. This TIM presents the issues identified through analysis of the following artifacts: 1. ProjectA_acs_b50_test_main.scr. 2. Excel-RTM with Build5(1).1 update.xls (includes ACS SRS requirements) 3. ProjectA OBC ACS Flight Test Procedures, S912-TP4930, REVISION B B. Specific Requirement Verification Sub-Issues The ACS test procedure nor the test script maps individual ACS SRS requirements to specific test points: according to Item #2 above, 71 SRS requirements are mapped to the entire test script and there is no further linking of requirements to test points in the script. Due to this characteristic there is little guidance as to where a specific requirement is verified in the test scripts. IV&V analysis results of ProjectA_acs_b50_test_main.scr, to evaluate whether the script adequately verified the linked ACS SRS requirements, are presented in the attachment to this TIM. It is noted that TIM 1463 addresses IV&V’s findings concerning the ProjectA_acs_fsw_build40_performance_test_main() script’s adequacy to verify the linked ACS SRS requirements.",10/18/05ProjectA - TIM - 2030,Incomplete Verification of Linked ACS SRS Requirements by ProjectA_acs_b51_test_main.scr,2,"A. This TIM presents the issues identified through analysis of the following artifacts: 1. ProjectA_acs_b51_test_main.scr. 2. Excel-RTM with Build5(1).1 update.xls (includes ACS SRS requirements) 3. ProjectA OBC ACS Flight Test Procedures, S912-TP4930, REVISION C B. Test to Requirement Link Consistency Sub-Issue ProjectA OBC ACS Flight Test Procedures, S912-TP4930, REVISION C, indicates that 70 ACS requirements are linked to the ProjectA_acs_b51_test_main.scr (Section 11.1, ACS Mode Test). ProjectA_acs_b51_test_main.scr indicates there are 74 ACS requirements linked to this script. Excel-RTM with Build5(1).1 update.xls (includes ACS SRS requirements) indicates there are five ACS requirements linked to this script. For the analysis results shown in Section C, the IV&V team assumed that Reference #2 above provides the correct requirements to test script linkages. C. Specific Requirement Verification Sub-Issues Neither the ACS test procedure nor the test script maps individual ACS SRS requirements to specific test points: according to Item #2 above, five SRS requirements are mapped to the entire test script and there is no further linking of requirements to test points in the script. Due to this characteristic there is little guidance as to where a specific requirement is verified in the test scripts. IV&V analysis of ProjectA_acs_b51_test_main.scr, to evaluate whether the script adequately verified the linked ACS SRS requirements, shows the following results: ACS-AC099 L4-SROAC-149 - ACS FSW shall manage and unload accumulated reaction wheel momentum when reaction wheels are used. Sub-Issue #1: The test uses the ac_momcmd and ac_enable_momadj commands. The Command Dictionary shows another related command, ac_enable_auto_momadj, which is not used in the test and is not well defined in the Dictionary. If the intent of this requirement is to include autonomous control over momentum, it is not clear if the test verified the complete scope of the requirement. ACS-AC100 L4-SROAC-150 - Momentum management performance failures shall be detected. Sub-Issue #2: No momentum management performance failures were introduced in this test. The SRS should specifically identify the failures. ACS-AN006 L4-SROAC-168 - AN software shall accept AN task commands which initialize, activate, inhibit, or otherwise control the individual AN task software processes. These commands are: • Initialize, • Enable/Disable telemetry packet generation, • DRAM table management commands, • Reset Telemetry Statistics. Sub-Issue #3: No specific test for this requirement could be located. It is noted that the Initialize command is found in the ProjectA_acs_rtm_test.scr. The SRS should identify specific commands from the Command Dictionary and not use generic descriptions of them. ACS-AC105 L4-SROAC-170 - The ACS software shall support telemetry required to report onboard RCS and Engine thruster activity to the MOS. Sub-Issue #4: No specific test for this requirement could be located. It is possible that this data was made available in the collected telemetry but the script does not specifically state the extent of data evaluated in real time or in post test analysis. ACS-AC104 4-SROAC-12 - The ACS software shall be able to record onboard RCS and Engine thruster activity at a varying and settable precision, and report this activity to the ground segment. Sub-Issue #5: No specific test for this requirement could be located. It is possible that this data was made available in the collected telemetry but the script does not specifically state the extent of data evaluated in real time or in post test analysis.",10/18/05ProjectA - TIM - 2029,Build 5.1 OBC Code may not satisfy L4-SROAC-12,3,"OBC Build 5.1 does not appear to satisfy the intent of the following requirement: L4-SROAC-12 The ACS software shall be able to record onboard RCS and Engine thruster activity at a varying and settable precision, and report this activity to the ground segment. No functionality for variable precision could be identified. Refer to AcTelemetryGeneration.",10/14/05ProjectA - TIM - 2028,Build 5.1 OBC Code may not satisfy L4-SROAC-20,3,"OBC Build 5.1 does not appear to satisfy the intent of the following requirement: L4-SROAC-20 The AC software shall be able to accept and process up to one command per AC control cycle (200 msec). AC_ProcessCommands calls AC_ProcessACSCommands in a loop while (ProcessCommandPID == TRUE) where ProcessCommandPID is set false if (SB_Status != SB_NO_MESSAGE). This appears to process all available commands rather than ""up to one command."" Analysis did not attempt to verify whether the software bus limits command issuance to 1 command per control cycle.",10/14/05ProjectA - TIM - 2027,Build 5.1 OBC Code may not satisfy L4-SROAC-9,3,"OBC Build 5.1 does not appear to satisfy the intent of the following requirement: L4-SROAC-9 - ACS FSW fault detection and correction shall incorporate ""Limits Data"", which is checksum protected and configurable from the ground, and against which measured and processed data are compared. The FDC limits for CSS are defined in Accstable.c This table does not contain a checksum, nor could a checksum operation be found for this table. Similarly, FDC limits for pointing and rate errors are defined in acstable.c with no checksums defined.",10/14/05ProjectA - TIM - 2026,Incomplete Verification of Linked ACS Requirements by Script ProjectA_acs_rtm_test(),2,"A. This TIM presents the issues identified through analysis of the following artifacts: 1. script ProjectA_acs_rtm_test() provided with the TRR #1 data package 2. Excel-RTM with Build5(1).1 update.xls (includes ACS SRS requirements) B. Sub-Issues The ACS test procedure does not map individual ACS SRS requirements to specific test points: 16 SRS requirements are mapped to the entire test script and there is no further linking of requirements to test points in the script. Due to this characteristic there is little guidance as to where a specific requirement is verified in the test scripts. IV&V analysis of script ProjectA_acs_rtm_test() shows that of the 16 linked ACS requirements the script adequately verified five as follows: L4-SROAC-3 / AC001 - During each 5 Hz cycle, the ACS software shall generate a FDIR status packet to identify which faults failed their FDIR checks and which did not. Sub-Issue 1: There is no evidence that a FDIR status packet was generated each 5Hz cycle. No faults were introduced in this test. L4-SROAC-4 / AC002 - The ACS software shall provide a latched FDIR status telemetry that reflects the FDIR status since last reset or until cleared by ground command. Sub-Issue 2: No specific test for this requirement could be located. L4-SROAC-10 / AC008 - The AD software shall calculate and validate residuals against specific (table) values. Sub–Issue 3: No specific test for this requirement could be located. L4-SROAC-11 / AC103 - The AC software shall record the maximum persistent test failure count for each FDC test (i.e. test fails for 3 cycles, persistence is 5 cycles; AC telemeters 3 for this test until a higher persistence count is reached or cleared by ground command). Sub-Issue 4: No FDC type testing was performed by this script. L4-SROAC-171 / AC106 - The AC software shall record the total test failure count for each FDC test. Sub-Issue 5: No faults were introduced in this test. L4-SROAC-21 / AC015 - The AC software shall reject any command not recognizable as an AC command and generate a message for each rejected command. Sub-Issue 6: No non-ACS commands were issued during this test. L4-SROAC-23 / AC017 - The ACS software shall implement a No-Operation command to increment the command counter. Comment: OK. L4-SROAC-83 / AC055 - By default, in Launch Mode, the ACS software shall generate zero wheel torque commands. Comment: OK. L4-SROAC-84 / AC056 - In Launch Mode, the ACS software shall allow ground commanding of wheel speed or wheel torque. Comment: OK. L4-SROAC-87 / AC058 - In Launch Mode, the ACS software shall allow ground commanding of thruster commands. Comment: OK. L4-SROAC-105 / AC070 - The software shall reject any valid command of an invalid mode, or mode transition, and remain in the current mode. Sub-Issue 7: Several illegal commands were issued and rejected in this test. This small set does not span the space of ACS modes and illegal mode transition commands that could be issues in each mode. As such this requirement is not fully verified. L4-SROAC-106 / AC071 - A transition to another mode during a slew shall be postponed until the slew is complete. Sub-Issue 8: The test did not attempt to transition to another mode during a slew. L4-SROAC-114 / AC077 - Transition from any non-Launch Mode to Launch Mode shall be disallowed. Sub-Issue 9: The test only attempted to Launch Mode from Sun Target Mode. No other non-launch modes were attempted. L4-SROAC-135 / AC090 - The software shall allow ground commanding of the RWA torques and wheel speeds, RCS thrusters, Engine thrusters and gimbals, and SAD in Launch Mode. Sub-Issue 10: No commanding of Engine thrusters or gimbals was performed in this test. L4-SROAC-136 / AC091 - Close loop Attitude Control Commands shall not be generated in Launch Mode. Comment: OK. L4-SROAC-137 / AC092 - Attitude, rate and momentum errors shall be set to zero in Launch Mode. Sub-Issue 11: No specific test for this requirement could be located.",10/9/05ProjectA - TIM - 2025,OBC Build 5 Test Script for Test #7 Does Not Verify Requirement L4-SROBC-281 (TS019).,3,"SRS Requirement: L4-SROBC-281 / TS019. Flight Software shall accept and execute a RESET_TS_HOUSEKEEPING command that resets all housekeeping data normally reported in the real-time telemetry stream. Issue: Build 5 Test Script, Test 7, issues the command ts_reset_monitor_point. According to the Command Dictionary: ""This command resets the statistics and diagnostics (current threshold)"". In the B5 code (ts_cmd.c) this command seems to be equivalent to ts_stats_reset. The B5 code (ts_cmd.c) shows a ts_hk_reset command that resets the HK data (counters). It is noted that the Command Dictionary does not define the ts_hk_reset command. Based on this information, it appears that: (1) there is no RESET_TS_HOUSEKEEPING command, (2) TS019 seems to refer to the ts_hk_reset command and not to the ts_reset_monitor_point command used in Test #7 and (3) the Command Dictionary may be out of date. Therefore, Test 7 does not appear to verify the ""intent"" of TS019.",9/19/05ProjectA - TIM - 2024,Build 5.0 OBC Code: Unreachable Code in xos_vrtl.c line 160,3,"Code is unreachable, at line number 160. This happens because the function xpfr always returns 0. xos_vrtl.c: 151 num &= INTMASK; 152 len = xpfr((int) num, ptr); 153 if (!len) { 154 width = 4; 155 pad = '0'; 156 base = 16; 157 adj = """"; 158 goto share; 159 } 160 break;... 461 int xpfr() 462 { 463 return 0; 464 }",9/15/05ProjectA - TIM - 2023,Build 5.0 OBC Code: Function Return in xbm_std.c,3,"Non-void function XB_bcp_synch on line 324 of xbm_std.c. does not return a value. Most likely this function has not been implemented yet; however, it is worth documenting because the function will return essentially a random value until it is implemented. xbm_std.c: 322 work_unit *XB_bcp_synch(void) 323 { 324 }",9/15/05ProjectA - TIM - 2020,Build 5.0 OBC FSW Code Analysis: Memory Error in vxColor2.c,3,"A potential memory leak exists in vxColor2.c. Dynamic memory stored in variable 'pdB' and allocated through function 'calloc' at line 745, will be lost at line 754. Also there are 8 similar errors on lines 760, 766, 772, 778, 784, 795, 802, 811. vxColor2.c: 745 if ((pdB = calloc (1, sizeof (DATA_BASE))) == NULL) 746 return NULL; 747 748 /* semaphores creation */ 749 750 /* binary semaphore for sync. to avoid nodes keep running */ 751 752 pdB->cT.controlerFlushSem = semBCreate (SEM_Q_FIFO, SEM_EMPTY); 753 if (pdB->cT.controlerFlushSem == NULL) 754 return NULL;",9/15/05ProjectA - TIM - 2019,Build 5.0 OBC Code: Array Out-of-Bounds in vxColor.c line 665,3,"Buffer overflow, array index of 'name' may be outside the bounds. Array 'name' of size 8 declared at line 646 may use index values 0..15 vxColor.c: 634 /******************************************************************************* 635 * 636 * nodeCreate - node creation 637 * 638 */ 639 640 int nodeCreate 641 ( 642 int nodeId 643 ) 644 { 645 646 char name[8]; 647 GNODE * pNode; 648 649 /* checks if that node id is already in use in the graph */ 650 651 if ( nodeChecks (nodeId) != -1 ) 652 { 653 printf(""Node id %d already used in current graph.\n"", nodeId); 654 return -1; 655 } 656 657 /* check if the authorized maximum number of node is reached */ 658 659 if (dB.nNum == GRAPHMAXNODE-1) 660 { 661 printf(""GRAPHMAXNODE reached!\n""); 662 return -1; 663 } 664 665 sprintf(name, ""tNode%d"", nodeId); 666 pNode = &(dB.nArray[dB.nNum]); 667 dB.nNum++; 668 669 /* spawn nodeJob with lower priority (200) than the default (100) */ 670 671 dB.nArray[dB.nNum-1].tnid.tid = 672 taskSpawn (name, 200, VX_SUPERVISOR_MODE, 10000, (FUNCPTR) nodeJob , 673 nodeId, (int) pNode, 0, 0, 0, 0, 0, 0, 0, 0); 674 return 0; 675 } 676",9/15/05ProjectA - TIM - 2018,Build 5.0 OBC Code: Array Out-of-Bounds in vm_time.c,3,"There is a possibility of buffer overflow for the index of array 'vm_time_events'. The index 'i' may be outside the bounds of the array. Array 'vm_time_events' is defined to be of size 14, is declared at line 43 and may use index value 14 at line 292. This can happen when vm_time_top_event_index is equal to VM_MAX_NUM_EVENTS-1 because vm_time_events[i+1] will be pointing to vm_time_events[VM_MAX_NUM_EVENTS] which is out of bounds. Tracing the function 'copy_event', this position which is out of bounds is then written. vm_sizing.h: 99 #define VM_MAX_ENGINE 12... 107 #define VM_NUM_ENGINES VM_MAX_ENGINE 108 #define VM_NUM_ENGINES_PLUS_HIDDEN (VM_NUM_ENGINES + 2) vm_time.h: 43 #define VM_MAX_NUM_EVENTS VM_NUM_ENGINES_PLUS_HIDDEN vm_time.c: 43 struct vm_event_type vm_time_events[VM_MAX_NUM_EVENTS];... 289 if (vm_time_top_event_index < VM_MAX_NUM_EVENTS) 290 { 291 for (i = vm_time_top_event_index; i >= position; i--) 292 copy_event(&(vm_time_events[i]),&(vm_time_events[i+1])); 293 294 copy_event(new_event_ptr,&(vm_time_events[position])); 295 296 vm_time_top_event_index++; 297 298 if (vm_time_event_is_overdue(new_event_ptr)) 299 vm_time_top_overdue_event_index++; 300 }... 171 static void copy_event(const struct vm_event_type *source_ptr, 172 struct vm_event_type *dest_ptr) 173 { 174 dest_ptr->engine_index = source_ptr->engine_index; 175 dest_ptr->value.low = source_ptr->value.low; 176 dest_ptr->value.high = source_ptr->value.high; 177 }",9/15/05ProjectA - TIM - 2016,Build 5.0 OBC Code: Null Pointer Dereference in vm_opcode.c,3,"The dereferenced pointer 'source_ptr' in file vm_opcode.c might be null. Dereferenced object 'source_ptr' can contain null by passing argument 4 to function 'normalize' at line 718 where null value comes from function 'vm_operand_storage' at line 713 A similar error occurs on line 719 vm_opcode.c: 713 source_ptr = vm_operand_storage(source_opd_ptr); 714 dest_ptr = vm_operand_storage(dest_opd_ptr); 715 716 if (num > 0 && source_bit >= 0 && dest_bit >= 0) 717 { 718 normalize(source_opd_ptr->kind, (unsigned int)num, (unsigned int)source_bit, source_ptr, buffer); 719 shift_copy(dest_opd_ptr->kind, (unsigned int)num, (unsigned int)dest_bit, buffer, dest_ptr); 720 }",9/15/05ProjectA - TIM - 2015,Build 5.0 OBC Code: Non void function does not return value in vm_memory_adapt.c,4,"The function, 'memset_d32_safe', in the file, vm_memory_adapt.c, does not return a value, but it is prototyped to return a value of void *. The function is also not called anywhere within the OBC FSW. Referenced Source Code: File - ../RAD6000/vm/src/vm_memory_adapt.c: 369 void *memset_d32_safe(void *dest_ptr, int value, size_t len) 370 { 371 uint32_t temp_uint32[VM_COMMAND_NUM_STRING_CHARS / 4]; 372 unsigned char *temp_bytes; 373 int index; 374 375 // copy bytes to temp storage so we can work with it 376 memcpy_d32_safe(temp_uint32, dest_ptr, len); 377 378 // get a byte oriented pointer to the beginning of the storage 379 temp_bytes = (unsigned char *)temp_uint32; 380 381 for ( index = 0; index < len; index++ ) 382 { 383 // set the value of temp storage to the value passed in 384 temp_bytes[index] = (unsigned char)value; 385 } 386 387 // copy everything back to its original location 388 memcpy_d32_safe(dest_ptr, temp_uint32, len); 389 } 390",9/15/05ProjectA - TIM - 2014,Build 5.0 OBC Code: Array Out-of-Bounds in vm_if_tlm.c,3,"There is a possibility for buffer overflow in function 'store_time' in vm_if_tlm.c at line 919. The array index 'start_time' may be outside the bounds. Array 'start_time' of size 12 declared at vmpkt.h:182 may use index value -1. This can happen because engine_tlm_index can return -1 and the return value is not being checked before accessing the arrays on lines 919, 934, 949, and 964. vm_if_tlm.c: 902 index = engine_tlm_index(tlm_id); /* Test for global variables */ 903 value = time_ptr->seconds; 904 905 switch (tlm_id) 906 { 907 case VM_01_START_TIME_TLM_ID: 908 case VM_02_START_TIME_TLM_ID: 909 case VM_03_START_TIME_TLM_ID: 910 case VM_04_START_TIME_TLM_ID: 911 case VM_05_START_TIME_TLM_ID: 912 case VM_06_START_TIME_TLM_ID: 913 case VM_07_START_TIME_TLM_ID: 914 case VM_08_START_TIME_TLM_ID: 915 case VM_09_START_TIME_TLM_ID: 916 case VM_10_START_TIME_TLM_ID: 917 case VM_11_START_TIME_TLM_ID: 918 case VM_12_START_TIME_TLM_ID: 919 vm_if_tlm_current_vm_snapshot.start_time[index] = value; 920 break; 921 922 case VM_01_NEXT_LOCAL_EVENT_TIME_TLM_ID: 923 case VM_02_NEXT_LOCAL_EVENT_TIME_TLM_ID: 924 case VM_03_NEXT_LOCAL_EVENT_TIME_TLM_ID: 925 case VM_04_NEXT_LOCAL_EVENT_TIME_TLM_ID: 926 case VM_05_NEXT_LOCAL_EVENT_TIME_TLM_ID: 927 case VM_06_NEXT_LOCAL_EVENT_TIME_TLM_ID: 928 case VM_07_NEXT_LOCAL_EVENT_TIME_TLM_ID: 929 case VM_08_NEXT_LOCAL_EVENT_TIME_TLM_ID: 930 case VM_09_NEXT_LOCAL_EVENT_TIME_TLM_ID: 931 case VM_10_NEXT_LOCAL_EVENT_TIME_TLM_ID: 932 case VM_11_NEXT_LOCAL_EVENT_TIME_TLM_ID: 933 case VM_12_NEXT_LOCAL_EVENT_TIME_TLM_ID: 934 vm_if_tlm_current_vm_snapshot.next_local_event_time[index] = value; 935 break; 936 937 case VM_01_LAST_LOCAL_EVENT_TIME_TLM_ID: 938 case VM_02_LAST_LOCAL_EVENT_TIME_TLM_ID: 939 case VM_03_LAST_LOCAL_EVENT_TIME_TLM_ID: 940 case VM_04_LAST_LOCAL_EVENT_TIME_TLM_ID: 941 case VM_05_LAST_LOCAL_EVENT_TIME_TLM_ID: 942 case VM_06_LAST_LOCAL_EVENT_TIME_TLM_ID: 943 case VM_07_LAST_LOCAL_EVENT_TIME_TLM_ID: 944 case VM_08_LAST_LOCAL_EVENT_TIME_TLM_ID: 945 case VM_09_LAST_LOCAL_EVENT_TIME_TLM_ID: 946 case VM_10_LAST_LOCAL_EVENT_TIME_TLM_ID: 947 case VM_11_LAST_LOCAL_EVENT_TIME_TLM_ID: 948 case VM_12_LAST_LOCAL_EVENT_TIME_TLM_ID: 949 vm_if_tlm_current_vm_snapshot.last_local_event_time[index] = value; 950 break; 951 952 case VM_01_LOAD_TIME_TLM_ID: 953 case VM_02_LOAD_TIME_TLM_ID: 954 case VM_03_LOAD_TIME_TLM_ID: 955 case VM_04_LOAD_TIME_TLM_ID: 956 case VM_05_LOAD_TIME_TLM_ID: 957 case VM_06_LOAD_TIME_TLM_ID: 958 case VM_07_LOAD_TIME_TLM_ID: 959 case VM_08_LOAD_TIME_TLM_ID: 960 case VM_09_LOAD_TIME_TLM_ID: 961 case VM_10_LOAD_TIME_TLM_ID: 962 case VM_11_LOAD_TIME_TLM_ID: 963 case VM_12_LOAD_TIME_TLM_ID: 964 vm_if_tlm_current_vm_snapshot.load_time[index] = value; 965 break; 966",9/15/05ProjectA - TIM - 2013,Build 5.0 OBC Code: Array Out-of-Bounds in vm_if_tlm.c,3,"In function store_string of file vm_if_tlm.c there is a possibility that the array index of 'file_loaded' may be outside the bounds. Array 'file_loaded' of size 12 declared at vmpkt.h:159 may use index value -1. Also there is one similar error on line 570. This can happen because index can be returned as VM_INVALID_INDEX on line 535; however, no checks are made throughout the rest of the code to ensure that index != VM_INVALID_INDEX or -1 before using it to index arrays. Arrays are being accessed by index on lines 567, 570, and line 602. vm_common_types.h: 27 #define VM_INVALID_INDEX -1 vm_if_tlm.c: 530 if ((( tlm_id >= GV_STR_MIN_1 ) && ( tlm_id <= GV_STR_MAX_1 )) || 531 (( tlm_id >= GV_STR_MIN_2 ) && ( tlm_id <= GV_STR_MAX_2 )) || 532 (( tlm_id >= GV_STR_MIN_3 ) && ( tlm_id <= GV_STR_MAX_3 ))) 533 { 534 index = gv_index(tlm_id); 535 if (index != VM_INVALID_INDEX) 536 { 537 strcpy(VmGvTable.gv_string[index], str); 538 } 539 } 540 541 switch (tlm_id) 542 { 543 case VM_01_FILE_LOADED_TLM_ID: 544 case VM_02_FILE_LOADED_TLM_ID: 545 case VM_03_FILE_LOADED_TLM_ID: 546 case VM_04_FILE_LOADED_TLM_ID: 547 case VM_05_FILE_LOADED_TLM_ID: 548 case VM_06_FILE_LOADED_TLM_ID: 549 case VM_07_FILE_LOADED_TLM_ID: 550 case VM_08_FILE_LOADED_TLM_ID: 551 case VM_09_FILE_LOADED_TLM_ID: 552 case VM_10_FILE_LOADED_TLM_ID: 553 case VM_11_FILE_LOADED_TLM_ID: 554 case VM_12_FILE_LOADED_TLM_ID: 555 556 memcpy(rd_value, str, NUM_FILE_CHARS); 557 strncpy(func_name, rd_value, NUM_FILE_CHARS); 558 len = strlen(str); 559 560 if ( func_name[0] != FIRST_FILE_CHAR ){ 561 strncpy(func_name, ""d:/NONE"", NUM_FILE_CHARS); 562 563 /* VML telemetry special case: */ 564 /* Because we are sending this string TLM point as an Evnt Msg */ 565 /* stuff this tlm point with a fake info containing the length of file string passed */ 566 567 vm_if_tlm_current_vm_snapshot.file_loaded[index] = NO_FILE_LOAD; 568 569 } else { 570 vm_if_tlm_current_vm_snapshot.file_loaded[index] = len; 571 572 } 573 Event_Message (evr_info, func_name[3], func_name[4], func_name[5], func_name[6]); 574 575 break; 576 577 case VM_01_CURRENT_FUNCTION_NAME_TLM_ID: 578 case VM_02_CURRENT_FUNCTION_NAME_TLM_ID: 579 case VM_03_CURRENT_FUNCTION_NAME_TLM_ID: 580 case VM_04_CURRENT_FUNCTION_NAME_TLM_ID: 581 case VM_05_CURRENT_FUNCTION_NAME_TLM_ID: 582 case VM_06_CURRENT_FUNCTION_NAME_TLM_ID: 583 case VM_07_CURRENT_FUNCTION_NAME_TLM_ID: 584 case VM_08_CURRENT_FUNCTION_NAME_TLM_ID: 585 case VM_09_CURRENT_FUNCTION_NAME_TLM_ID: 586 case VM_10_CURRENT_FUNCTION_NAME_TLM_ID: 587 case VM_11_CURRENT_FUNCTION_NAME_TLM_ID: 588 case VM_12_CURRENT_FUNCTION_NAME_TLM_ID: 589 590 memcpy(rd_value, str, NUM_FUNC_CHARS); 591 strncpy(func_name, rd_value, NUM_FUNC_CHARS); 592 len = strlen(str); 593 594 if ( len <= 0 ){ 595 strncpy(func_name, ""NONE"", NUM_FILE_CHARS); 596 } 597 598 /* VML telemetry special case: */ 599 /* Because we are sending this string TLM point as an Evnt Msg */ 600 /* stuff this tlm point with a fake info containing the lentgh of the function string passed */ 601 602 vm_if_tlm_current_vm_snapshot.current_function_name[index] = len; 603 604 Event_Message (evr_info, func_name[0], func_name[1], func_name[2], func_name[3]); 605 606 break; 607 608 609 default: 610 break; 611 } 612",9/15/05ProjectA - TIM - 2011,Build 5.0 OBC Code: Non-Initialized Data in vm_if_cmd.c,4,"In file vm_if_cmd.c, variable 'SBreturn_VmlCmdSend' might be used uninitialized in function cmd_send on line 144. vm_if_cmd.c: 110 SBret_status SBreturn_VmlCmdSend; 138 if((vm_extract_ccsds_part.hdr.packet_id & CMD_VALID) 139 && (tag_opcode == NOT_A_TAG)) { 140 SBreturn_VmlCmdSend = SBsend_copy (&vm_extract_ccsds_part); 141 } 142 143 144 if( SBreturn_VmlCmdSend != SB_NORMAL ) 145 { ...",9/15/05ProjectA - TIM - 2008,Build 5.0 OBC Code: Null Pointer Dereference in vm_command.c line 383,3,"The dereferenced pointer 'state_def_ptr' might be null. Dereferenced object 'state_def_ptr' can contain null on line 383 where null value comes from function 'look_up_state' at line 376 vm_command.c: 376 state_def_ptr = look_up_state(opcode, parm_def_ptr->parm_number, NULL); 377 parm_def_ptr->state_def_ptr = state_def_ptr; 378 379 next_state_def_ptr = look_up_state(opcode, parm_def_ptr->parm_number, state_def_ptr); 380 381 while (next_state_def_ptr != NULL) 382 { 383 state_def_ptr->next_state_def_ptr = next_state_def_ptr; 384 state_def_ptr = next_state_def_ptr; 385 next_state_def_ptr = look_up_state(opcode, parm_def_ptr->parm_number, next_state_def_ptr); 386 } 387",9/15/05ProjectA - TIM - 2007,Build 5.0 OBC Code: Non-Initialized Data in tyCoDrv.c line 335,4,"The variable 'status' might be used uninitialized in tyCoDrv.c at line 335. This can happen if any of the following cases occur FIOASYNCGETLCR, FIOASYNCSETLCR, FIOASYNCGETMCR, FIOASYNCSETMCR, FIOASYNCGETMSR, FIOASYNCSETBRR, or FIOASYNCGETBRR. tyCoDrv.c: 252 STATUS status;... 296 case FIOASYNCGETLCR: 297 298 * ((int *) arg) = * _UART_LCR; 299 break; 300 301 case FIOASYNCSETLCR: 302 303 * _UART_LCR = arg; 304 break; 305 306 case FIOASYNCGETMCR: 307 308 * ((int *) arg) = * _UART_MCR; 309 break; 310 311 case FIOASYNCSETMCR: 312 313 * _UART_MCR = arg; 314 break; 315 316 case FIOASYNCGETMSR: 317 318 * ((int *) arg) = * _UART_MSR; 319 break; 320 321 case FIOASYNCSETBRR: 322 323 * _UART_BRR = arg; 324 break; 325 326 case FIOASYNCGETBRR: 327 328 * ((int *) arg) = * _UART_BRR; 329 break; 330 ... 335 return (status);",9/15/05ProjectA - TIM - 2006,"Build 5.0 OBC Code: Missing default and unused return value for function, TSs_get_curr_value",3,"The file, ts_stat.c, defines the function, TSs_get_curr_value, which returns a boolean if monitor_id < 256. Although apparently unlikely, if monitor_id > 255, the function does not return a value. However, regardless of whether the function returns a value, none of the calls to this function use the return value (Note: see referenced source code from file, sts_df.c). These problems would probably only represent maintenance problems if the return value is truly not needed. However, according to the comments provided by lines 126 - 139 of the file, sts_df.c, the function, TSs_get_curr_value, should return “true if the monitor point has been previously read; if the monitor has not yet been read, the derived function will be expected to generate some sort of average or assumed value.” Therefore, the implementation appears to be either incomplete or incorrect. Referenced Source Code: File - ../RAD6000/ts/src/ts_stat.c: 148 boolean TSs_get_curr_value ( u_word monitor_id, mon_point_val_type *current_value ) 149 { 150 if ( monitor_id < ts_total_monitor_points ) 151 { 152 *current_value = ts_statistics_table[ monitor_id ].current_reading.monitor_reading; 153 154 /* if monitor has been processed at least once */ 155 if ( ts_statistics_table[ monitor_id ].monitor_count ) 156 { 157 return ( TRUE ); 158 } 159 else 160 { 161 return ( FALSE ); 162 } 163 } 164 } /* end of TSs_get_curr_value */ File - ../RAD6000/ts/src/sts_df.c: 126 ** iv. The externally defined TSs_get_curr_value function returns 127 ** current monitor data from the statistics table. This function 128 ** requires two parameters: a valid monitor_id and an address to 129 ** store the monitor value. The function is of type boolean and 130 ** returns true if the monitor point has been previously read; if 131 ** the monitor has not yet been read, the derived function will 132 ** be expected to generate some sort of average or assumed 133 ** value: 134 ** 135 ** if (TSs_curr_value (parms [0], &value)) 136 ** regular processing 137 ** else 138 ** assumed value/error processing 139 */ : 142 extern boolean TSs_get_curr_value ( u_word monitor_id, mon_point_val_type *current_value ); : 502 TSs_get_curr_value ( list[ 0 ], &and0 ); : 507 TSs_get_curr_value ( list[ 1 ], &and1 ); : 512 TSs_get_curr_value ( list[ 2 ], &and2 ); : 517 TSs_get_curr_value ( list[ 3 ], &and3 ); : 522 TSs_get_curr_value ( list[ 4 ], &and4 ); : 566 TSs_get_curr_value ( list[ 0 ], &or0 ); : 571 TSs_get_curr_value ( list[ 1 ], &or1 ); : 576 TSs_get_curr_value ( list[ 2 ], &or2 ); : 581 TSs_get_curr_value ( list[ 3 ], &or3 ); : 586 TSs_get_curr_value ( list[ 4 ], &or4 ); : 629 TSs_get_curr_value ( list[ 0 ], &xor0 ); : 634 TSs_get_curr_value ( list[ 1 ], &xor1 ); : 639 TSs_get_curr_value ( list[ 2 ], &xor2 ); : 644 TSs_get_curr_value ( list[ 3 ], &xor3 ); : 649 TSs_get_curr_value ( list[ 4 ], &xor4 ); : 691 TSs_get_curr_value ( list[ 0 ], &param0 ); : 695 TSs_get_curr_value ( list[ 1 ], &param1 ); : 699 TSs_get_curr_value ( list[ 2 ], &param2 ); : 703 TSs_get_curr_value ( list[ 3 ], &param3 ); : 707 TSs_get_curr_value ( list[ 4 ], &param4 ); : 753 TSs_get_curr_value ( list[ 0 ], &sep3_mon_point_val); : 1022 TSs_get_curr_value ( list[ 0 ], &SDST_Tlm ); : 1289 TSs_get_curr_value ( list[ 0 ], &A_TWTA_value ); 1290 TSs_get_curr_value ( list[ 1 ], &B_TWTA_value ); : 1348 TSs_get_curr_value ( list[ 0 ], &A_TWTA_value ); 1349 TSs_get_curr_value ( list[ 1 ], &B_TWTA_value ); : 1419 TSs_get_curr_value ( list[ 0 ], &Twta1_Pri_value); 1420 TSs_get_curr_value ( list[ 1 ], &Twta2_Pri_value); 1421 TSs_get_curr_value ( list[ 2 ], &Twta1_Red_value); : 1483 TSs_get_curr_value ( list[ 0 ], &SADE_1_value); : 1606 TSs_get_curr_value ( list[ 0 ], &rate_null_timeout); : 1802 TSs_get_curr_value ( list[ 0 ], &SPC_Pressure ); : 1861 TSs_get_curr_value ( list[ 0 ], &eclEnginee_flag ); 1862 TSs_get_curr_value ( list[ 1 ], &AC_Mode_stat ); 1863 TSs_get_curr_value ( list[ 2 ], &AC_Slew_stat ); : 1919 TSs_get_curr_value ( list[ 0 ], &SA_voltage ); : 1973 TSs_get_curr_value ( list[ 0 ], &spc_voltage); : 2034 TSs_get_curr_value ( list[ 0 ], &batt_charge_state ); : 2093 TSs_get_curr_value ( list[ 0 ], &temp1); 2094 TSs_get_curr_value ( list[ 1 ], &temp2); 2095 TSs_get_curr_value ( list[ 2 ], &temp3); 2096 TSs_get_curr_value ( list[ 3 ], &temp4); 2097 TSs_get_curr_value ( list[ 4 ], &temp5); : 2155 TSs_get_curr_value ( list[ 0 ], &value ); : 2212 TSs_get_curr_value ( list[ 0 ], &spc_pressure ); 2213 TSs_get_curr_value ( list[ 1 ], &spc_batt_volt); : 2315 TSs_get_curr_value ( list[ 0 ], &rt_unit_1 ); 2316 TSs_get_curr_value ( list[ 1 ], &rt_unit_2 ); 2317 TSs_get_curr_value ( list[ 2 ], &rt_unit_3 ); 2318 TSs_get_curr_value ( list[ 3 ], &rt_unit_4 ); 2319 TSs_get_curr_value ( list[ 4 ], &rt_unit_5 ); : 2377 TSs_get_curr_value ( list[ 0 ], &fc1_1553_status ); 2378 TSs_get_curr_value ( list[ 1 ], &fc2_1553_status ); 2379 TSs_get_curr_value ( list[ 2 ], &vir_1553_status ); : 2426 TSs_get_curr_value ( list[ 0 ], &status_1 ); 2427 TSs_get_curr_value ( list[ 1 ], &status_2 ); 2428 TSs_get_curr_value ( list[ 2 ], &status_3 ); : 2775 TSs_get_curr_value ( list[ 0 ], &WTS_PosTlms ); : 2863 TSs_get_curr_value ( list[ 0 ], &crit_status_data ); : 2925 TSs_get_curr_value ( list[ 0 ], &twta_state ); : 3009 TSs_get_curr_value ( list[ 0 ], &wts_group2 ); : 3095 TSs_get_curr_value ( list[ 0 ], &wts_group1 ); 3096 TSs_get_curr_value ( list[ 1 ], &wts_group2 ); 3097 TSs_get_curr_value ( list[ 2 ], &antenna );",9/15/05ProjectA - TIM - 2005,Build 5.0 OBC Code: Non-Initialized Data in sysLib.c,4,The local variable 'mappedAdrsSpace' in file sysLib.c at line 917 is used uninitialized. sysLib.c: 908 unsigned int mappedAdrsSpace; 909 unsigned int segVal; 910 unsigned int ioccConfig; 911 STATUS rc; 912 913 segVal = mfsr (SR_PIO); 914 ioccConfig = * IOCC_CONFIG; 915 916 917 if (mappedAdrsSpace == adrsSpace),9/15/05ProjectA - TIM - 2004,"Build 5.0 OBC Code: Uninitialized local vars, 'x' and 'y'., in sts_df.c",3,"The file, sts_df.c, defines the function, TSdf_ST_Component_Errors, which defines the local variables, 'x' and 'y'. These variables are never initialized; however, lines 2555 - 2556 perform bit-shift operations based on the values assigned to these variables. Referenced Source Code: File - ../RAD6000/ts/src/sts_df.c: 2546 mon_point_val_type TSdf_ST_Component_Errors ( mon_point_val_type value, u_byte list[] ) : 2551 mon_point_val_type x, y; : 2554 // get bit value from Jonathan 2555 tracker1 = (( value >> x ) & mask); 2556 tracker2 = (( value >> y ) & mask);",9/15/05ProjectA - TIM - 2003,Build 5.0 OBC Code: Function Return in sts_df.c line 1772,3,"Non-void function on line 1748 does not return value. It appears that this function has not been implemented, however we felt that it was worth noting because this function is being used in the TSdf_offset_table. There are numerous functions in this file similar to this on lines 2258, 2285, 2523, 2604, 2632, 2659, 2687, 2715, 2743, 3211, 3237, 3263, 3289, and 3315. All of these functions will return random values until implemented. sts_df.c: 1748 //***************************************************************** 1749 // 1750 // Function name: TSdf_Spare 1751 // 1752 // Purpose: Derived function number 20 1753 // 1754 // Input: 1755 // value - monitor point's value 1756 // list[0] - not used 1757 // list[1] - not used 1758 // list[2] - not used 1759 // list[3] - not used 1760 // list[4] - not used 1761 // 1762 // Return Value: 1763 // 1 - if 1764 // 0 - if 1765 // 1766 // PDL: 1767 // 1768 //******************************************************************/ 1769 mon_point_val_type TSdf_Spare ( mon_point_val_type value, u_byte list[] ) 1770 { 1771 ; 1772 }... 211 der_func_ptr TSdf_offset_table[ ] = 212 {... 233 TSdf_Spare, // 20",9/15/05ProjectA - TIM - 2002,"Build 5.0 OBC FSW CA: Uninitialized local vars, 'w', 'x', 'y', 'z', and 'a', in sts_df.c - case #2",3,"The file, sts_df.c, defines the function, TSdf_Cmd_Loss_Seq_2, which defines the local variables, 'w', 'x', 'y', 'z', and 'a'. These variables are never initialized; however, lines 1688 - 1696 perform bit-shift operations based on the values assigned to these variables. Referenced Source Code: File - ../RAD6000/ts/src/sts_df.c: 1677 mon_point_val_type TSdf_Cmd_Loss_Seq_2 ( mon_point_val_type value, u_byte list[] ) : 1686 int a, w, x, y, z; 1687 1688 cmd5 = (( value >> w ) & mask); 1689 cmd6 = (( value >> w ) & mask); 1690 cmd7 = (( value >> x ) & mask); 1691 cmd8 = (( value >> y ) & mask); 1692 cmd9 = (( value >> z ) & mask); 1693 cmd10 = (( value >> a ) & mask); 1694 cmd11 = (( value >> a ) & mask); 1695 cmd12 = (( value >> a ) & mask); 1696 cmd13 = (( value >> a ) & mask);",9/15/05ProjectA - TIM - 2001,"Build 5.0 OBC Code: Uninitialized local vars, 'w', 'x', 'y', 'z', and 'a', in sts_df.c - case #1",3,"The file, sts_df.c, defines the function, TSdf_Cmd_Loss_Seq_1, which defines the local variables, 'w', 'x', 'y', 'z', and 'a'. These variables are never initialized; however, lines 1608 - 1612 perform bit-shift operations based on the values assigned to these variables. Referenced Source Code: File - ../RAD6000/ts/src/sts_df.c: 1595 mon_point_val_type TSdf_Cmd_Loss_Seq_1 ( mon_point_val_type value, u_byte list[] ) : 1604 int a, w, x, y, z; 1605 1606 TSs_get_curr_value ( list[ 0 ], &rate_null_timeout); 1607 1608 cmd1 = (( value >> w ) & mask); 1609 cmd2 = (( value >> x ) & mask); 1610 cmd3 = (( value >> y ) & mask); 1611 cmd4 = (( value >> z ) & mask); 1612 cmd13 = (( value >> a ) & mask);",9/15/05ProjectA - TIM - 2000,"Build 5.0 OBC Code: Uninitialized var, 'Twta_Pwr_State', in sts_df.c",3,"The file sts_df.c defines the function, TSdf_TWTA_Power_State, which defines the local variable, Twta_Pwr_State. This variable is set to either 0, 1, or 2 depending on the conditions established by lines 1432 - 1447. Although the function may never be called in a case when the primary and redundant power states for both TWTA components are all 0, (i.e. off), function, TSdf_TWTA_Power_State, does not seem to preclude this case from occurring. If this case does occur, the variable Twta_Pwr_State will be uninitialized. Referenced Source Code: File - ../RAD6000/ts/src/sts_df.c: 1412 mon_point_val_type TSdf_TWTA_Power_State ( mon_point_val_type value, u_byte list[] ) : 1416 mon_point_val_type Twta_Pwr_State;... 1432 if ( (Twta1_Pri == Twta1_Red) && (Twta1_Pri == 1) ) 1433 { 1434 Twta_Pwr_State = 1; 1435 } 1436 else if ( (Twta2_Pri == Twta2_Red) && (Twta2_Pri == 1) ) 1437 { 1438 Twta_Pwr_State = 1; 1439 } 1440 else if ( (Twta1_Pri == 1) || (Twta1_Red == 1) ) 1441 { 1442 if ( (Twta2_Pri == 1) || (Twta2_Red == 1) ) 1443 { 1444 Twta_Pwr_State = 2; 1445 } 1446 else Twta_Pwr_State = 0; 1447 } 1448 1449 return Twta_Pwr_State ;",9/15/05ProjectA - TIM - 1999,Build 5.0 OBC Code: Unreachable Code in sm_main.c line 1001,3,"The code on line 1001 is unreachable. It appears that the code is supposed to be after the case statement. sm_main.c: 624 switch ( sm_cmd_pkt->sec_hdr.function_code ) 625 {... 991 default: 992 /* sb_rtn_stat = eventf ( SM_TASK_ID, ""XSM101"" */ /*D100-021*/ 993 /* ""Invalid function code: %X"", */ /*D100-021*/ 994 /* sm_cmd_pkt->sec_hdr.function_code ) ; */ /*D100-021*/ 995 Event_Message ( SM_INVALID_CMD, /*D100-021*/ 996 sm_cmd_pkt->sec_hdr.function_code ); /*D100-021*/ 997 998 sm_hk_msg.fast.tot_err_cnt++ ; 999 break ; 1000 1001 taskDelay (1); /* allow lower priority tasks to get some time */ 1002 } /* End switch */",9/15/05ProjectA - TIM - 1998,Build 5.0 OBC Code: Array Out-of-Bounds in sbrecv.c,3,"Suspicious dereference of pointer 'dd' before NULL check at line 114. This is compiler specific but the check for NULL could actually occur after the dereference. sbrecv.c: 114 if (dd->curr_buff == 0 || dd == NULL ) { 115 /* SBerror error={99 ,pd->current_buff->stream_id, 116 pd->queue_id, pd->task_id}; drw */ 117 SBerror error; 118 error.type = 99; 119 error.stream_id = pd->current_buff->stream_id ; 120 error.pipeline_id = pd->queue_id; 121 error.task_id = pd->task_id; 122 123 SBevent_handler(&error); 124 return; 125 }",9/15/05ProjectA - TIM - 1997,Build 5.0 OBC Code: Array Out-of-Bounds in s3task.c,3,"Buffer overflow, array index of 'GRaND_tlm_buf' may be outside the bounds on line 1166 of s3task.c. Array 'GRaND_tlm_buf' of size 2048 declared at line 171 may use index value 2048 This can happen because GRaND_tlm_buf_count is allowed to be equal to GRAND_TLM_BUFF_LENGTH because the condition statement on line 1051 only prevents it from being greater than GRAND_TLM_BUFF_LENGTH. Then the while loop will increment GRaND_tlm_buf_process_count until it is GRaND_tlm_buf_count, so it could end up equal to GRAND_TLM_BUFF_LENGTH-1. Then on line 1166 the array is accessed at GRaND_tlm_buf_process_count+1 which would allow it to access the array at position GRAND_TLM_BUF_LENGTH which is out of bounds. grpkt.h: 68 #define GRAND_TLM_BUFF_LENGTH 2048 s3task.c: 1051 if ( GRaND_tlm_buf_count > GRAND_TLM_BUFF_LENGTH ) 1052 { 1053 /* the buffer has overflowed */ 1054 /* drop everything and try to restart */ 1055 /* likely, data pointers are corrupted */ 1056 1057 Event_Message ( S3_BUFFER_ERROR , GRaND_tlm_buf_count, 0 ); 1058 grand_s3_tlm.total_dropped_bytes += GRaND_tlm_buf_count - 1059 GRaND_tlm_buf_process_count; 1060 grand_s3_tlm.dropped_bytes += GRaND_tlm_buf_count - 1061 GRaND_tlm_buf_process_count; 1062 1063 /* empty buffer and drop through loop */ 1064 1065 GRaND_tlm_buf_process_count = 0; 1066 GRaND_tlm_buf_count = 0; 1067 GRaND_tlm_buf_sync_hi_position = 0; 1068 }... 1072 while ( GRaND_tlm_buf_process_count < GRaND_tlm_buf_count ) 1073 {... 1163 GRaND_tlm_data_count += (u_word) GRaND_tlm_buf[GRaND_tlm_buf_process_count]; 1164 /* set up a pointer to the message data */ 1165 1166 GRaND_tlm_buf_data_ptr = &GRaND_tlm_buf[GRaND_tlm_buf_process_count + 1];",9/15/05ProjectA - TIM - 1995,Build 5.0 OBC Code: Non void function does not return value in rtos.c,3,"Non-void function 'rtos_stat_cycle_end' in rtos.c does not return a value. It appears that the function has not been implemented yet. The function will return an unpredictable value. It does not appear however, that the return value is being used. It is called by functions 'vm_tick_task' and 'vm_manager_task'. rtos.c: 305 306 rtos_stat_type rtos_stat_cycle_end(rtos_stat_type stat) 307 { 308 } 309",9/15/05ProjectA - TIM - 1994,Build 5.0 OBC Code: Non void function does not return value in rtos.c,3,"Non-void function 'rtos_stat_create' in rtos.c does not return a value. It appears that this function has not been implemented yet; however, the return value of the function is being used by 'vm_initialize' in vm.c. Currently the function will return essentially an unpredictable value. rtos.c: 284 rtos_stat_type rtos_stat_create(const char *tag, const double max_cycle_length_sec, 285 const double default_sample_period_sec) 286 { 287 } vm.c: 1767 vm_manager_stat = rtos_stat_create(""vm_mngr"", MANAGER_MAX_CYCLE_LENGTH, 1768 DEFAULT_CPDU_SAMPLE_PERIOD); 1769 1770 vm_tick_stat = rtos_stat_create(""vm_tick"", VM_SECONDS_PER_TICK, 1771 DEFAULT_CPDU_SAMPLE_PERIOD);",9/15/05ProjectA - TIM - 1993,Build 5.0 OBC Code: Non-Initialized Data in ppcRxSocket.c line 172,3,'rsZeroCnt' might be used uninitialized in this function. ppcRxSocket.c: 130 int rsZeroCnt;... 172 else if ( rs == 0 && rsZeroCnt++ == 50),9/15/05ProjectA - TIM - 1992,Build 5.0 OBC Code: Array Out-of-Bounds in makeLoadScript.c,4,"There is a possibility of buffer overflow, the array index of 'msg' may be outside the bounds. Array 'msg' of size 100 declared at line 248 may use index values 0..346. makeLoadScript.c: 248 char msg[100]; 249 ... 57 typedef struct binInfoStruct 58 { 59 char fileName[120]; 60 char length[16]; 61 char crc[16]; 62 } binInfo; 63 ... 57 typedef struct binInfoStruct 58 { 59 char fileName[120]; 60 char length[16]; 61 char crc[16]; 62 } binInfo;... 253 sprintf (msg, 254 ""start AppsImageLoader (%s, %s, %s, %s, %s, %s) until 2\n\nend\n"", 255 &info->vxBin.fileName, 256 &info->vxBin.length, 257 &info->vxBin.crc, 258 &info->vxDescBin.fileName, 259 &info->vxDescBin.length, 260 &info->vxDescBin.crc);",9/15/05ProjectA - TIM - 1991,Build 5.0 OBC Code: Unreachable Code in dsmain.c line 433,4,"The code on line 433 is unreachable because bulk_memory_ok is always equal to false. This is probably because of the line on 406 is commented out. dsmain.c: 379 boolean bulk_memory_ok = FALSE; 380 381 /* 382 * figure out if this is a warm or cold boot 383 */ 384 init_message = SBpend_on_init(); 385 /* 386 ** Create the binary sem used for mutial exclusive access to the ds_output_ready_table 387 */ 388 SemDsOutputReadyTableAccess = semMCreate(SEM_Q_PRIORITY | SEM_DELETE_SAFE | SEM_INVERSION_SAFE); 389 if (SemDsOutputReadyTableAccess == NULL) 390 /* SBret = eventf(DS_TASK_ID, ""SDS100 Create SemDsOutputReadyTableAccess failed""); */ /*D100-014*/ 391 Event_Message ( DS_CREATE_SEMAPHORE_FAIL ); /*D100-014*/ 392 393 /* initialize everytime */ 394 ds_dump_control_table.dump_in_progress = FALSE; 395 ds_backup_limiter = 0; 396 DS_init_output_chan(); /* AW 050699 */ 397 /* 398 ** The following line is added for OV4. AW020499 399 */ 400 /* get the address of the backup structure in bulk memory */ 401 ds_backup_structure_ptr = (backup_structure_type *)ds_segment_table.segment[ds_segment_table.backup_seg_index].start_segment; 402 403 /* check to see if bulk memory needs to be reformatted */ 404 /* Force initialize DRAM card everytime-- Need to detect OV4-defined COLD and WARM boot here (counters) */ 405 /* instead of detecting ""bulk_memory_ok""-- TQD */ 406 //bulk_memory_ok = DS_32bitCmp(ds_bulk_memory_pattern, ds_backup_structure_ptr->bulk_memory_pattern,BULK_MEMORY_PATTERN_SIZE); 407 408 if (bulk_memory_ok == FALSE) {",9/15/05ProjectA - TIM - 1990,Build 5.0 OBC Code: Non-Initialized Data in di_cmd.c,3,"In file di_cmd.c 'nFailures' might be used uninitialized in this function on line 1464. di_cmd.c: 1402 long nFailures; 1403 1404 1405 #if VERBOSITY > 0 1406 TransmitString(""\r\nTMR Error Test\r\n""); 1407 #endif 1408 1409 /* 1410 * check for disallowed modes 1411 * 1412 */ 1413 1414 if( ( diTlm.di_MapMode != eDI_MAP_MODE_HERITAGE ) && ( diTlm.di_MapMode != eDI_MAP_MODE_OVERLAY ) ) 1415 { 1416 diTlm.di_CmdsRej++; 1417 localErrors++; 1418 diTlm.di_LastErrorCode = eDI_TMR_WRONG_MODE; 1419 } 1420 else 1421 { 1422 /* 1423 * loop through the address range, testing all three banks of 1424 * RAM for TMR errors. 1425 */ 1426 nFailures = 0; 1427 for (address = StartAddress; address < StartAddress + (Size * sizeof(u_dword)); address += sizeof(u_dword)) 1428 { 1429 1430 #if VERBOSITY > 0 1431 TransmitString(""\r\nTesting TMR at address 0x""); 1432 TransmitLongString(address); 1433 TransmitString(""\r\n""); 1434 #endif 1435 1436 errors = TMRTestMMAddress(address, 0x80000000); 1437 1438 if ( errors ) 1439 { 1440 1441 nFailures++; 1442 1443 } 1444 1445 #if VERBOSIT > 0 1446 TransmitString("" Bank A Errors : Total : 0x""); 1447 TransmitLongString(errors); 1448 TransmitString("" Upper : 0x""); 1449 TransmitLongString(UpperErrors); 1450 TransmitString("" Lower : 0x""); 1451 TransmitLongString(LowerErrors); 1452 TransmitString(""\r\n""); 1453 #endif 1454 1455 } 1456 } 1457 1458 if (localErrors) 1459 { 1460 return localErrors; 1461 } 1462 else 1463 { 1464 return nFailures; 1465 } 1466",9/15/05ProjectA - TIM - 1989,Build 5.0 OBC Code: Non-Initialized Data in di_cmd.c,3,"In file di_cmd.c 'localErrors' is used uninitialized on line 1417. di_cmd.c: 1399 u_dword LowerErrors; 1400 u_dword UpperErrors; 1401 u_dword localErrors; 1402 long nFailures; 1403 1404 1405 #if VERBOSITY > 0 1406 TransmitString(""\r\nTMR Error Test\r\n""); 1407 #endif 1408 1409 /* 1410 * check for disallowed modes 1411 * 1412 */ 1413 1414 if( ( diTlm.di_MapMode != eDI_MAP_MODE_HERITAGE ) && ( diTlm.di_MapMode != eDI_MAP_MODE_OVERLAY ) ) 1415 { 1416 diTlm.di_CmdsRej++; 1417 localErrors++;",9/15/05ProjectA - TIM - 1988,Build 5.0 OBC Code: Memory Leak in bcdd.c,3,"There is a possible memory leak in file bcdd.c at line 930. Dynamic memory stored in 'minor_c' allocated through function 'malloc' at line 910 can be lost at line 930. Also there are 3 similar errors on lines 941, 948, 957. bcdd.c: 908 int *minor_c, largest = 0, mcc; 909 910 minor_c = (int *) malloc(sizeof (ULONG) * mc_num); 911 if (!minor_c) 912 { 913 sendBCErrQ (LMC_MALLOC_ERR, 0); 914 return(ERROR); 915 } 916 917 /* initialize counts */ 918 for (j = 0; j < mc_num; j++) minor_c[j] = 0; 919 920 /* loop through all channel defs. */ 921 922 while (ch_p->chnl_id != -1) 923 { 924 925 ch_cnt++; 926 /* validate channel_id and ensure that max channel is not exceeded */ 927 if ( ( ch_cnt > max_chs) || (ch_p->chnl_id > max_chs ) ) 928 { 929 sendBCErrQ( MAXCH_ERR, 0); 930 return(ERROR); 931 }",9/15/05ProjectA - TIM - 1987,Build 5.0 OBC Code: Unreachable Code in bcdd.c,3,"The code inside of the while loop below (from file bcdd.c, function bcMsgHdlr) is unreachable because init_mc is always TRUE. bcdd.c: 444 init_mc = TRUE; /* init. minor cycle flags */ 445 mci = 0; 446 aper.cnt = 0; /* clear aper out count A17 */ 447 448 /* while minor cycle execution time does not exceed minor cycle timer */ 449 while (TRUE) 450 { 451 #if TIME_PROC 452 /* lock = intLock(); */ 453 /* get start time */ 454 pre = RTCLread(); 455 if (pre <= iac) 456 { 457 wrk_time[widx] = 0xDEADBEEF; 458 } 459 else { 460 wrk_time[widx] = 0x20000000 + ((pre - iac) / 64); 461 } 462 widx++; 463 widx &= 0x7f; 464 #endif 465 466 cbp = (cmdblk_t *) MAKE_RADR (start_cb->br_adr); 467 468 sync_rts = tvw_rts = curr_rts; /* set bits only for active RTs A26 */ 469 470 /* process each cmd. block from the minor cycle just completed */ 471 while ((cbp != end_cb) && !init_mc) 472 { 473 474 if (!(cbp->desc & RT2RT_CB)) /* nothing to process for RT - RT */ 475 {",9/15/05ProjectA - TIM - 1986,Build 5.0 OBC Code: Unreachable Code in auetoq.c line 101,3,"The code on line 101 is unreachable because ExecutionStatus is always equal to STATUS_OK. auetoq.c: 58 status_type ExecutionStatus = STATUS_OK; 59 vector_type CosHalfTheta, SinHalfTheta ; 60 u_word n[3], i; 61 62 for ( i = 0; i < 3; i++ ) 63 { 64 CosHalfTheta.v[i] = cos(0.5*Euler->v[i]); 65 SinHalfTheta.v[i] = sin(0.5*Euler->v[i]); 66 } 67 68 /* 69 ** Rotation Sequence ... 70 */ 71 n[0] = 0; 72 n[1] = 1; 73 n[2] = 2; 74 75 if ( ExecutionStatus == STATUS_OK )",9/15/05ProjectA - TIM - 1985,Build 5.0 OBC Code: Array Out-of-Bounds in an_tbl_manager.c line 209,2,"Buffer overflow, array index of 'wk_tbl_status' may be outside the bounds. Array 'wk_tbl_status' of size 20 declared at an_dram_table.h:92 may use index value 20. Also there are 2 similar errors on lines 212, 234. This can happen because AN_DRAM_ASTEROID_TABLE_NUM is equal to 20 and the conditional statement is using tbl_ptr->index<=AN_DRAM_ATEROID_TABLE_NUM. an_dram_table.h: 24 #define MAX_AN_TABLE 20... 92 work_table_type wk_tbl_status[MAX_AN_TABLE]; /* status flag for work table*/ 93 load_table_type ld_tbl_status[MAX_AN_TABLE]; /* status flag for load table*/... 36 #define AN_DRAM_ASTEROID_TABLE_NUM 20 an_tbl_manager.c: 204 if (( tbl_ptr->tbl_id == AN_DRAM_EPHEM_TABLE_ID && tbl_ptr->index <= AN_DRAM_EPHEM_TABLE_NUM ) || 205 ( tbl_ptr->tbl_id == AN_DRAM_PLANET_TABLE_ID && tbl_ptr->index <= AN_DRAM_PLANET_TABLE_NUM ) || 206 ( tbl_ptr->tbl_id == AN_DRAM_ASTEROID_TABLE_ID && tbl_ptr->index <= AN_DRAM_ASTEROID_TABLE_NUM ) || 207 ( tbl_ptr->tbl_id == AN_DRAM_THRUST_TABLE_ID && tbl_ptr->index <= AN_DRAM_THRUSTER_TABLE_NUM ) ) 208 { 209 if ( tbl_ptr->wk_tbl_status[tbl_ptr->index].copy_complete == 1 ) 210 {",9/15/05ProjectA - TIM - 1984,Build 5.0 OBC Code: Non-Initialized Data in ambiTestFns.c,3,"The local variable 'pui_pioAddr32' in file ambiTestFns.c is used uninitialized in function ambiPioDump at line 975. ambiTestFns.c: 936 volatile UINT *pui_pioAddr32;... 975 i = 0x20; printf(""RMW0:\t0x%8x\n"",*(pui_pioAddr32 + i)); 976 i = 0x22; printf(""RMW1:\t0x%8x\n"",*(pui_pioAddr32 + i)); 977 i = 0x24; printf(""RMW2:\t0x%8x\n"",*(pui_pioAddr32 + i)); 978 i = 0x26; printf(""RMW3:\t0x%8x\n"",*(pui_pioAddr32 + i)); 979 i = 0x28; printf(""RMW4:\t0x%8x\n"",*(pui_pioAddr32 + i)); 980 i = 0x2a; printf(""RMW5:\t0x%8x\n"",*(pui_pioAddr32 + i)); 981 i = 0x2c; printf(""RMW6:\t0x%8x\n"",*(pui_pioAddr32 + i)); 982 i = 0x2e; printf(""RMW7:\t0x%8x\n"",*(pui_pioAddr32 + i)); 983 i = 0x30; printf(""RMW8:\t0x%8x\n"",*(pui_pioAddr32 + i)); 984 i = 0x32; printf(""RMW9:\t0x%8x\n"",*(pui_pioAddr32 + i)); 985 i = 0x34; printf(""RMWA:\t0x%8x\n"",*(pui_pioAddr32 + i)); 986 i = 0x36; printf(""RMWB:\t0x%8x\n"",*(pui_pioAddr32 + i)); 987 i = 0x38; printf(""RMWC:\t0x%8x\n"",*(pui_pioAddr32 + i)); 988 i = 0x3a; printf(""RMWD:\t0x%8x\n"",*(pui_pioAddr32 + i)); 989 i = 0x3c; printf(""RMWE:\t0x%8x\n"",*(pui_pioAddr32 + i)); 990 i = 0x3e; printf(""RMWf:\t0x%8x\n"",*(pui_pioAddr32 + i));",9/15/05ProjectA - TIM - 1983,Build 5.0 OBC Code: Logical in ambiTM.c,4,"The statement on line 629 of file ambiTM.c has no effect. It appears that the line is supposed to be flag_error_received = YES. ambiTM.c: 626 if(ERROR == my_status) 627 { 628 tmErrLog(ambiSel, TM_SEMTAKE3_ERR, errno); 629 flag_error_received == YES; 630 }",9/15/05ProjectA - TIM - 1982,Build 5.0 OBC Code: Array Out-of-Bounds in ambiTM.c,3,"There is potential for buffer overflow in file ambiTM.c at line 223, the array index of 'ambi_data' may be outside the bounds. Array 'ambi_data' of size 2 declared at ambiDrv.h:24 may use index value 2. Also there is one similar error on line 231. ambiDrv.h: 8 #define MAX_NUMBER_OF_AMBIS 2 /* 4 uses all RSC seg registers.*/... 24 ambi_structure ambi_data[MAX_NUMBER_OF_AMBIS]; ambiTM.c: 222 else if (ambiSel == 2) 223 ambi_data[ambiSel].ui_SlaveHndlrId = taskSpawn(""tmSlaveIntNotifyTask2"", 224 15, 225 NO_OPTIONS, 226 STACK_SIZE, 227 (FUNCPTR)tmSlaveIntNotifyTask2, 228 0,0,0,0,0,0,0,0,0,0); 229 230 else if (ambiSel == 3) 231 ambi_data[ambiSel].ui_SlaveHndlrId = taskSpawn(""tmSlaveIntNotifyTask3"", 232 15, 233 NO_OPTIONS, 234 STACK_SIZE, 235 (FUNCPTR)tmSlaveIntNotifyTask3, 236 0,0,0,0,0,0,0,0,0,0);",9/15/05ProjectA - TIM - 1981,Build 5.0 OBC Code: Array Out-of-Bounds in ambiTM.c,3,"There is potential buffer overflow at line 1136 of file ambiTM.c. The array index of 'ambi_data' may be outside the bounds. Array 'ambi_data' of size 2 declared at ambiDrv.h:24 may use index value 3. Also there are 2 similar errors on lines 1144, 1149. ambiDrv.h: 8 #define MAX_NUMBER_OF_AMBIS 2 /* 4 uses all RSC seg registers.*/... 24 ambi_structure ambi_data[MAX_NUMBER_OF_AMBIS]; ambiTM.c: 1128 void tmSlaveIntNotifyTask3(void) 1129 { 1130 STATUS my_status = ERROR; 1131 UCHAR uc_slave_status; 1132 UCHAR ambiSel = 3; 1133 1134 while(TRUE) /* Repeat this loop until the task is deleted. */ 1135 { 1136 my_status = semTake(ambi_data[ambiSel].semTMSlaveTask, WAIT_FOREVER); 1137 1138 if(my_status == ERROR) 1139 tmErrLog(ambiSel, TM_SEMTAKE6_ERR, errno); 1140 1141 /****************************************************************/ 1142 /* Call user-defined slave handler function...pass SLAVE_STATUS */ 1143 /****************************************************************/ 1144 if(ambi_data[ambiSel].pfunc_slave_Hndlr == NULL) 1145 {} 1146 1147 else 1148 { 1149 my_status = ambi_data[ambiSel].pfunc_slave_Hndlr(); 1150 if (my_status != OK) 1151 { 1152 tmErrLog(ambiSel, TM_SLAVE_INT_HNDLR_ERR, errno); 1153 } 1154 1155 } /* end of else */ 1156 } /* end of while loop */ 1157 } /* end of handler */",9/15/05ProjectA - TIM - 1980,Build 5.0 OBC Code: Array Out-of-Bounds in ambiTM.c,3,"There is potential for buffer overflow on line 1105 of file ambiTM.c. The array index of 'ambi_data' may be outside the bounds. Array 'ambi_data' of size 2 declared at ambiDrv.h:24 may use index value 2. Also there are 2 similar errors on lines 1113, 1117. ambiDrv.h: 8 #define MAX_NUMBER_OF_AMBIS 2 /* 4 uses all RSC seg registers.*/... 24 ambi_structure ambi_data[MAX_NUMBER_OF_AMBIS]; ambiTM.c: 1097 void tmSlaveIntNotifyTask2(void) 1098 { 1099 STATUS my_status = ERROR; 1100 UCHAR uc_slave_status; 1101 UCHAR ambiSel = 2; 1102 1103 while(TRUE) /* Repeat this loop until the task is deleted. */ 1104 { 1105 my_status = semTake(ambi_data[ambiSel].semTMSlaveTask, WAIT_FOREVER); 1106 1107 if(my_status == ERROR) 1108 tmErrLog(ambiSel, TM_SEMTAKE6_ERR, errno); 1109 1110 /****************************************************************/ 1111 /* Call user-defined slave handler function...pass SLAVE_STATUS */ 1112 /****************************************************************/ 1113 if(ambi_data[ambiSel].pfunc_slave_Hndlr == NULL) 1114 {} 1115 else 1116 { 1117 my_status = ambi_data[ambiSel].pfunc_slave_Hndlr(); 1118 if (my_status != OK) 1119 tmErrLog(ambiSel, TM_SLAVE_INT_HNDLR_ERR, errno); 1120 1121 } /* end of else */ 1122 } /* end of while loop */ 1123 } /* end of handler */",9/15/05ProjectA - TIM - 1979,Build 5.0 OBC Code: Array Out-of-Bounds in ambiPID.c,3,"Buffer overflow on line 732 of file ambiPID.c, array index of 'ambi_data' may be outside the bounds. Array 'ambi_data' of size 2 declared at ambiDrv.h:24 may use index value 3. Also there is one similar error on line 737. ambiDrv.h: 8 #define MAX_NUMBER_OF_AMBIS 2 /* 4 uses all RSC seg registers.*/... 24 ambi_structure ambi_data[MAX_NUMBER_OF_AMBIS]; ambiPID.c: 722 void ambiPIDNotifyTask3(void) 723 { 724 STATUS my_status = ERROR; 725 UCHAR ambiSel = 3; 726 727 while(TRUE) /* Repeat this loop until the task is deleted. */ 728 { 729 /******************************************************/ 730 /***** Wait to be called by the interrupt handler *****/ 731 /******************************************************/ 732 my_status = semTake(ambi_data[ambiSel].semPIDIntTask, WAIT_FOREVER); 733 734 if(my_status == ERROR) 735 tmErrLog(0, PID_SEMTAKE_ERROR, errno); 736 737 my_status = ambi_data[ambiSel].pfunc_pid_Hndlr(); 738 739 if (my_status != OK) 740 tmErrLog(ambiSel, PID_HNDLR_ERROR, errno); 741 742 } /* end of while loop */ 743 } /* end of task */ 744",9/15/05ProjectA - TIM - 1978,Build 5.0 OBC Code: Array Out-of-Bounds in ambiPID.c,3,"There is potential buffer overflow at line 706 of file ambiPID.c The array index of 'ambi_data' may be outside the bounds. Array 'ambi_data' of size 2 declared at ambiDrv.h:24 may use index value 2. Also there is one similar error on line 711. ambiDrv.h: 8 #define MAX_NUMBER_OF_AMBIS 2 /* 4 uses all RSC seg registers.*/... 24 ambi_structure ambi_data[MAX_NUMBER_OF_AMBIS]; ambiPID.c: 696 void ambiPIDNotifyTask2(void) 697 { 698 STATUS my_status = ERROR; 699 UCHAR ambiSel = 2; 700 701 while(TRUE) /* Repeat this loop until the task is deleted. */ 702 { 703 /******************************************************/ 704 /***** Wait to be called by the interrupt handler *****/ 705 /******************************************************/ 706 my_status = semTake(ambi_data[ambiSel].semPIDIntTask, WAIT_FOREVER); 707 708 if(my_status == ERROR) 709 tmErrLog(0, PID_SEMTAKE_ERROR, errno); 710 711 my_status = ambi_data[ambiSel].pfunc_pid_Hndlr(); 712 713 if (my_status != OK) 714 tmErrLog(ambiSel, PID_HNDLR_ERROR, errno); 715 716 } /* end of while loop */ 717 } /* end of task */ 718",9/15/05ProjectA - TIM - 1977,Build 5.0 OBC Code: Array Out-of-Bounds in ambiPID.c,3,"Potential buffer overflow at line 118 in file ambiPID.c. The array index of 'ambi_data' may be outside the bounds. Array 'ambi_data' of size 2 declared at ambiDrv.h:24 may use index value 2. Also there is one similar error on line 126. ambiDrv.h: 8 #define MAX_NUMBER_OF_AMBIS 2 /* 4 uses all RSC seg registers.*/... 24 ambi_structure ambi_data[MAX_NUMBER_OF_AMBIS]; ambiPID.c: 117 else if (ambiSel == 2) 118 ambi_data[ambiSel].ui_pidHndlrId = taskSpawn(""ambiPIDNotifyTask2"", 119 15, 120 NO_OPTIONS, 121 STACK_SIZE, 122 (FUNCPTR)ambiPIDNotifyTask2, 123 0,0,0,0,0,0,0,0,0,0); 124 125 else if (ambiSel == 3) 126 ambi_data[ambiSel].ui_pidHndlrId = taskSpawn(""ambiPIDNotifyTask3"", 127 15, 128 NO_OPTIONS, 129 STACK_SIZE, 130 (FUNCPTR)ambiPIDNotifyTask3, 131 0,0,0,0,0,0,0,0,0,0);",9/15/05ProjectA - TIM - 1976,Build 5.0 OBC Code: Non-Initialized Data in ambiDMA.c,4,"The variable 'flag_dma_error' in file ambiDMA.c might be used uninitialized in function 'ambDma' at line 269. Also flag_dma_error is only ever set to YES in this function. ambiDMA.c: 95 UCHAR flag_dma_error; 96 UINT ui_temp=0; 97 UINT **pci_temp_addr; 98 UINT temp; 99 100 volatile UINT *pui_dma_pci_addr; /* DMA-Control Registers */ 101 volatile UINT *pui_dma_amb_addr; 102 volatile UINT *pui_dma_word_cnt; 103 volatile USHORT *pus_amb_config; /* AMB Configuration Register */ 104 volatile UINT *pui_ambi_reg; /* ambiSel offset */ 105 volatile UCHAR *puc_amb_timeout; /* 0x86 AMB Global Timeout Reg */ 106 volatile UCHAR *puc_amb_pciwait; /* 0x87 AMB PCI Mastership wait */ 107 volatile UCHAR *puc_pci_liolat; /* 0x0d PCI PIO Latency Timer Reg*/ 108 109 /******************************************/ 110 /* If service not installed, return error */ 111 /******************************************/ 112 if(ambi_data[ambiSel].ambEnabled == NO) 113 return(ERROR); 114 115 /****************************************************************************/ 116 /* All LIO setup is done in ambEnable() */ 117 /****************************************************************************/ 118 119 120 121 /******************************************/ 122 /* Print out values passed to routine */ 123 /******************************************/ 124 #if DEBUG_DMA 125 printf(""0x%8x\t&pci addr\n"" ,&amb_address); 126 printf(""0x%8x\t&amb addr\n"" ,&pci_address); 127 printf(""0x%8x\t pci addr\n"" ,amb_address); 128 printf(""0x%8x\t amb addr\n"" ,pci_address); 129 printf(""0x%8x\t*pci addr\n"" ,*pci_address); 130 printf(""0x%8x\t*amb addr\n"" ,*amb_address); 131 printf(""0x%8x\tcount \n"" ,ui_byte_count); 132 printf(""0x%8x\tcmd \n"" ,uc_xfer_type); 133 printf(""0x%8x\tuc_timeout\n"",uc_timeout); 134 printf(""0x%8x\tambiSel \n"" ,ambiSel); 135 #endif 136 137 /******************************************/ 138 /* Make pointers to AMBI registers */ 139 /******************************************/ 140 pui_ambi_reg = (volatile UINT *)ambiGetOffset(ambiSel); 141 142 if(pui_ambi_reg == NULL) 143 return(ERROR); 144 145 pui_dma_pci_addr = (UINT *)(((UINT)pui_ambi_reg)|((UINT)DMA_PCI_ADDR)); 146 pui_dma_amb_addr = (UINT *)(((UINT)pui_ambi_reg)|((UINT)DMA_AMB_ADDR)); 147 pui_dma_word_cnt = (UINT *)(((UINT)pui_ambi_reg)|((UINT)DMA_WORD_CNT)); 148 pus_amb_config = (USHORT *)(((UINT)pui_ambi_reg)|((UINT)AMB_CONFIG)); 149 puc_amb_timeout = (UCHAR *)(((UINT)pui_ambi_reg)|((UINT)AMB_GLOBAL_TIMEOUT)); 150 puc_amb_pciwait = (UCHAR *)(((UINT)pui_ambi_reg)|((UINT)AMB_PCI_MASTERSHIP)); 151 puc_pci_liolat = (UCHAR *)(((UINT)pui_ambi_reg)|((UINT)PCI_LIO_LATENCY)); 152 153 154 /*******************************************************/ 155 /* AMBI-DMA setup is done in ambEnable() */ 156 /*******************************************************/ 157 158 159 160 /*******************************************************/ 161 /* Do the DMA if one is not already in progress.... */ 162 /*******************************************************/ 163 if (ui_byte_count > 0x400000) /* check word count <= 4MB */ 164 { 165 tmErrLog(ambiSel, AMB_WORDCNT, errno); 166 #if DEBUG_DMA 167 printf(""4MB maximum AMB DMA exceeded!\n""); 168 #endif 169 return(ERROR); 170 } 171 #if DEBUG_DMA 172 printf(""Taking semDMAbusy\n""); /* bdb */ 173 #endif 174 175 /****************************************************/ 176 /* Take semaphore before allowing DMA xfer */ 177 /****************************************************/ 178 my_status = semTake(ambi_data[ambiSel].semDMAbusy, WAIT_FOREVER); 179 if (my_status == OK) 180 { 181 #if DEBUG_DMA 182 printf(""Beginning AMB DMA .... resource is available...\n""); 183 #endif 184 } 185 else 186 { 187 tmErrLog(ambiSel, AMB_SEMTAKE_BUSY, errno); 188 #if DEBUG_DMA 189 printf(""Error during semTake of semDMAbusy for ambDma\n""); 190 #endif 191 flag_dma_error = YES; 192 } 193 194 #if DEBUG_DMA 195 printf(""Setup DMA \n""); /* bdb */ 196 #endif 197 198 199 /****************************************************/ 200 /* Setup DMA */ 201 /****************************************************/ 202 203 *pui_dma_pci_addr = (UINT)*pci_address; /* set PCI src/dst addr */ 204 /* set AMB src/dst addr - segment register nibble */ 205 #if DEBUG_DMA 206 printf(""Wrote pci addr = 0x%8x\n"",*pci_address); /* bdb */ 207 #endif 208 209 *amb_address = (UINT *)((int)*amb_address & 0x0fffffff); 210 211 *pui_dma_amb_addr = (UINT)*amb_address; 212 213 #if DEBUG_DMA 214 printf(""wrote amb addr = 0x%8x \n"",*amb_address); /* bdb */ 215 #endif 216 217 /* word count in 2:23 (<< 8) and convert bytes to 32-bit words (>>2) ; xfer type in bit 31 */ 218 *pui_dma_word_cnt = (ui_byte_count << 6) + (uc_xfer_type & 0x1); 219 #if DEBUG_DMA 220 printf(""wrote word cnt = 0x%8x\n"",ui_byte_count ); /* bdb */ 221 #endif 222 223 /* taskDelay(6);*/ 224 225 #if DEBUG_DMA 226 printf(""Wait DMA complete\n""); /* bdb */ 227 #endif 228 229 230 /***********************************************************/ 231 /**** Wait for Acknowledge from Slave ****/ 232 /**** by waiting for semDMAOpComplete ****/ 233 /***********************************************************/ 234 235 my_status = semTake(ambi_data[ambiSel].semDMAOpComplete, uc_timeout); 236 if(ERROR == my_status) 237 { 238 tmErrLog(ambiSel, AMB_SEMTAKE_OP, errno); 239 #if DEBUG_DMA 240 printf(""ERROR taking semDMAOpComplete semaphore \n""); 241 #endif 242 flag_dma_error = YES; 243 } 244 245 if (OK == my_status) 246 { 247 #if DEBUG_DMA 248 printf(""<----- TOOK semDMAOpComplete\n""); 249 #endif 250 } 251 252 /*************************************/ 253 /* give up control of AMB/DMA access */ 254 /*************************************/ 255 my_status = semGive(ambi_data[ambiSel].semDMAbusy); 256 if(ERROR == my_status) 257 { 258 tmErrLog(ambiSel, AMB_SEMGIVE_ERR, errno); 259 #if DEBUG_DMA 260 printf(""ERROR giving semDMAbusy semaphore \n""); 261 #endif 262 flag_dma_error = YES; 263 } 264 265 else { 266 #if DEBUG_DMA 267 printf(""-----> GAVE semDMAbusy\n""); 268 #endif 269 if(flag_dma_error == YES) 270 { 271 return(ERROR); 272 } 273 else 274 { 275 return(OK); 276 } 277 } 278",9/15/05ProjectA - TIM - 1975,Build 5.0 OBC Code: Logical in ambiAMBI.c,3,There is a suspicious assignment statement in condition on lines 45 and 51. It looks like the statements are supposed to be if(action == SET) and if(action == CLR). ambiAMBI.c: 45 if(action = SET) { 46 count = intLock(); 47 *pus_amb_config |= uc_mask; 48 intUnlock(count); 49 } 50 51 if(action = CLR) { 52 count = intLock(); 53 *pus_amb_config &= ~uc_mask; 54 intUnlock(count);,9/15/05ProjectA - TIM - 1974,Build 5.0 OBC Code: Array Out-of-Bounds in ambiAMB.c,3,"There is the potential for buffer overflow at line 1281 of ambiAMB.c. The array index of 'ambi_data' may be outside the bounds. Array 'ambi_data' of size 2 declared at ambiDrv.h:24 may use index value 3. Also there are 2 similar errors on lines 1286, 1288. ambiDrv.h: 8 #define MAX_NUMBER_OF_AMBIS 2 /* 4 uses all RSC seg registers.*/... 24 ambi_structure ambi_data[MAX_NUMBER_OF_AMBIS]; ambiAMB.c: 1272 ****************************************************************************/ 1273 void ambGCQNotifyTask3(void) 1274 { 1275 STATUS my_status = ERROR; 1276 UCHAR uc_slave_status; 1277 UCHAR ambiSel = 3; 1278 1279 while(TRUE) /* Repeat this loop until the task is deleted. */ 1280 { 1281 my_status = semTake(ambi_data[ambiSel].semGCQreceived, WAIT_FOREVER); 1282 1283 if(my_status == ERROR) 1284 tmErrLog(ambiSel, GCQ_SEMTAKE_ERR, errno); 1285 1286 if(ambi_data[ambiSel].pfunc_gcq_Hndlr != NULL) 1287 { 1288 my_status = ambi_data[ambiSel].pfunc_gcq_Hndlr(); 1289 1290 if (my_status != OK) 1291 tmErrLog(ambiSel, GCQ_SLAVE_INT_HNDLR_ERR, errno); 1292 } /* end if */ 1293 } /* end of while loop */ 1294 } /* end of handler */",9/15/05ProjectA - TIM - 1973,Build 5.0 OBC Code: Array Out-of-Bounds in ambiAMB.c,3,"There is potential buffer overflow at line 1255 of file ambiAMB.c. The array index of 'ambi_data' may be outside the bounds. Array 'ambi_data' of size 2 declared at ambiDrv.h:24 may use index value 2. Also there are 2 similar errors on lines 1260, 1262. ambiDrv.h: 8 #define MAX_NUMBER_OF_AMBIS 2 /* 4 uses all RSC seg registers.*/... 24 ambi_structure ambi_data[MAX_NUMBER_OF_AMBIS]; ambiAMB.c: 1247 void ambGCQNotifyTask2(void) 1248 { 1249 STATUS my_status = ERROR; 1250 UCHAR uc_slave_status; 1251 UCHAR ambiSel = 2; 1252 1253 while(TRUE) /* Repeat this loop until the task is deleted. */ 1254 { 1255 my_status = semTake(ambi_data[ambiSel].semGCQreceived, WAIT_FOREVER); 1256 1257 if(my_status == ERROR) 1258 tmErrLog(ambiSel, GCQ_SEMTAKE_ERR, errno); 1259 1260 if(ambi_data[ambiSel].pfunc_gcq_Hndlr != NULL) 1261 { 1262 my_status = ambi_data[ambiSel].pfunc_gcq_Hndlr(); 1263 1264 if (my_status != OK) 1265 tmErrLog(ambiSel, GCQ_SLAVE_INT_HNDLR_ERR, errno); 1266 } /* end if */ 1267 } /* end of while loop */ 1268 } /* end of handler */",9/15/05ProjectA - TIM - 1972,Build 5.0 OBC Code: Unreachable Code in admain.c line 302,3,"The code on line 302 is unreachable because the variable AdTable.UseStaBoresightMeasurement is always TRUE. admain.c: 298 if ( pAcGlobal->Sta[0].DataValid == TRUE && 299 pAcGlobal->Sta[1].DataValid == TRUE && 300 AdTable.UseStaBoresightMeasurement == FALSE ) 301 302 NumOfUpdateAxes = 2 ; Preceding code comment /* Determine If Star Tracker Boresight Measurement Is Used For Update ... Note: By default UseStaBoresightMeasurement == TRUE and thus the ST boresight measurement is used. If this flag is reset to FALSE by the ground segment, then it is possible to not use needed measurement information. For example, if both star trackers are valid and one star tracker's residual exceeds the threshold as determined by the residual edit test. In this case, the ST which fails the residual edit test does not perform an update, and the good ST performs an update with only two axes instead of three as needed when only one ST is valid. */",9/15/05ProjectA - TIM - 1971,Build 5.0 OBC Code: Null Pointer Dereference in QDDhiapi.c line 2552,3,"The dereferenced pointer 'element' is null. Dereferenced object 'element' contains null on line 2552 where null value comes from check in condition ( (void* )0) == (void* )element is true at line 2549 QDDhiapi.c: 2549 if (NULL == (void *)element) { 2550 RecordEVENT(QddElogId, END_qhssPopQueue, MANY_QHSS_CHAN, 2551 (unsigned int)QDD_NULL_POINTER, 0) 2552 *element = item; 2553 if (!in_isr) 2554 intUnlock(LockKey); /* unlock interrupts */ 2555 return(QDD_NULL_POINTER); 2556 } /* end if NULL == element */",9/15/05ProjectA - TIM - 1970,Build 5.0 OBC Code: Array Out-of-Bounds in QDD_all_tests.c,3,There is potential buffer overflow in file QDD_all_tests.c at line 3444. The array index of 'QDD_TEST_Xfer_data' may be outside the bounds. Array 'QDD_TEST_Xfer_data' of size 2026 declared at line 55 may use index value 3999. QDD_all_tests.c: 55 unsigned short QDD_TEST_Xfer_data[2026];... 3444 Buffer6->QDD_TEST_Xfer_data[3999] = 0xACED;,9/15/05ProjectA - TIM - 1969,OBC SRS Requirement L4 SROBC-293 (HS007) Is Unclear and Potentially Incorrect,2,"SRS Requirement. L4 SROBC-293. The Flight Software shall accept and execute commands to change the OBC state. Issue: L4 SROBC-291 states, ""Flight Software shall generate an OBC health status telemetry packet consisting of an OBC state (healthy, reset, fault), the status of telemetry monitoring (enabled/disabled), and shall be timestamped. ProjectA SE-001 ProjectA System State and Subsystem Mode Definitions, Section 4.0 states, ""The system state concept is useful for understanding FS functional transitions, effects, and configurations; however, the FSW is not implemented in that manner. The FSW does not maintain state knowledge at the system level and there are no system level commands to achieve state transitions. Rather, the system state is defined by the combined subsystem modes, and state transitions are achieved through subsystem configuration commands"". Given these conflicting statements, it is unclear how HS can ""change the OBC state"" when: (1) L4 SROBC-291 seems to identify ""state"" as (healthy, reset, fault)- it is noted that this usage of the term ""state"" may not be what is intended for the term ""system state"", (2) ProjectA SE-001 indicates that ""state"" knowledge is not maintained and there are no commands to achieve state transitions, (3) The CDR material, page 375, states that HS resets OBC (if this is correct, then there can be a state change to State=Boot) and (4) the ProjectA Command Dictionary does not appear to define any commands routed to HS that direct OBC state changes. Based on this information the L4 requirement seems unclear, inconsistent and potentially incorrect. IV&V notes that TIM-1160 addresses the issue of incomplete and/or incorrect HS requirements.",9/12/05ProjectA - TIM - 1968,Missing ACS Test Scripts in Build 5.0,4,"The AN Task Continuity Test defined in test procedure S912-TP4930 Rev B for Build 5.0 calls the script ProjectA_an_continuity_test. This script calls the following scripts, which were not included in the build 5 test scripts: ProjectA_an_tbl_load_verify ProjectA_an_tbl_read_en ProjectA_an_dram_table_address",9/12/05ProjectA - TIM - 1967,"OBC Build 5 Test Script , Test #7, Does Not Verify Requirement TS025",3,"Requirement: L4-SROBC-283 / TS025 - The Flight Software shall reset the persistence (consecutive threshold count) of a telemetry monitor when it is enabled. Issue: Script TS_test.scr links TS025 to Test #7. This test does not issue a ts:enable_monitor_point command; therefore, it appears that TS025 is not verified by Test #7.",9/6/05ProjectA - TIM - 1966,"OBC Build 5 Test Script , Test #7, Does Not Fully Verify Requirement L4-SROBC-282 (TS024)",3,"OBC SRS Requirement: L4-SROBC-282 (TS024). The Flight Software shall reset the persistence (consecutive threshold counts) of an individual telemetry monitor or all telemetry monitors by command. Issue: Eight TMONs were reset in this test. However, the persistence data was not dumped before the ts:reset_persist_mask command was issued so it is unclear if this test actually verified the requirement for all 8 TMONs in that the script only dumped data after the command.",9/6/05ProjectA - TIM - 1965,Requirement TS027 in the OBC C&DH SRS is Incorrect in that it does not agree with the current FP implementation,2,"OBC SRS, Rev C: TS0027. The Flight Software shall reset all persistence counts and inhibit all telemetry monitor evaluation when issuing a stored command execution request. Issue: This requirement seems to precede the decision made in late 2004 to go to Watch Mode when an RTS is initiated so that telemetry monitoring can continue. Test #1 in the Build 5 TS script (TS_Test.scr) seems to indicate that this change was made in that Watch Mode is enabled when a threshold is tripped. In addition, OBC Interoffice Memo, Response to TMON Interaction, indicates that this change was made. Given this, it appears that TS027 should be revised and a complete set of Watch Mode requirements added to the OBC SRS. It is noted that the Interoffice Memo implies TS requirements that are not present in the OBC SRS, Rev-C.",9/2/05ProjectA - TIM - 1964,B5.0 VM Test Analysis: Possible Extraneous Test Scripts,3,"The current test scripts released for functional testing of the Virtual Machine in Build 5.0 contains scripts “vm_runseqtest1()”, “vm_runseqtest2()”, “vm_runseqtest3()” and ""vm_setup()"". The test scripts “vm_runseqtest2()” and “vm_runseqtest3()” are not called in Section 11.1 Virtual Machine Test of the S912-TP4970 document. Both scripts are designed to test the requirement VM001.4 (L4-SRVML-5 ) – “On-Board Block Execution Capabilities”. Requirement VM001.4 (L4-SRVML-5 ) is also tested by script “vm_setup()” which is called in “vm_runseqtest1()”. The 8/10/05 DOORS database has requirement L4-SRVML-5 linked to “vm_runseqtest2.scr”. There appears to be a disconnect between the VM Test Procedure and the L4 V&V Matrix in DOORS. If scripts “vm_runseqtest2()” and “vm_runseqtest3()” will be executed in a future build then they should stay in the build, otherwise it is recommended that they be removed.",8/16/05ProjectA - TIM - 1963,B5.0 VM Test Analysis: Requirements Conflict Between Test Procedure and Test Script,4,"There is a conflict between the list of requirements in Test #2, Section 11.1 Virtual Machine Test of the S912-TP4970 document and the header of Test #2 in script ""vm_runseqtest1()"". The requirements listed in the S912-TP4970 document are VM002 (L4-SRVML-6), VM004 (L4-SRVML-13) and VM005 (L4-SRVML-17). These are considered requirements descriptions in DOORS. The requirements listed in the header of Test #2 of the test script are VM002.1 (L4-SRVML-7), VM005.1 (L4-SRVML-18) and VM005.2 (L4-SRVML-19). The requirements in the test script should also be listed in the S912-TP4970 document. It appears that VM004.1 is verified by the Test #2 of the test script and is also listed in the test script header. However, the requirement is only listed in the S912-TP4970 document and not in the Test #2 header of the test script. VM002.1 (L4-SRVML-7) - VM Task Time Management - VM Task shall provide interface for time synchroniz! ation between VM Engines and spacecraft. VM004.1 (L4-SRVML-14) - VM Command Interface - VM Task shall provide capability to interface with the Flight Software through Command interface. VM005.1 (L4-SRVML-18) - VM Sequence Loading - VM Task shall provide capability for VMLFC to accept sequence loads without interrupting a thread of execution. VM005.2 (L4-SRVML-19) - VM Sequence Memory - VM Task shall provide capability for VMLFC to read a sequence from a file buffer and to notify Ground System on anomalies on that read.",8/16/05ProjectA - TIM - 1962,B5.0 VM Test Analysis: Possible Incomplete Testing of Requirement in Test Script,2,"Requirement VM002.3 is tested in Test #1 of script “vm_runseqtest1()”. However it does not appear to completely test the requirement. The script exercises the ability of the VM task to accept a command, but does not exercise the other part of the requirement, which is to also reject a command. VM002.3 (L4-SRVML-9) - “VM Task Health & Safety - VM Task shall provide proper interface to accept and reject commands and housekeeping packet generation”",8/16/05ProjectA - TIM - 1961,B5.0 VM Test Analysis: Requirements Conflict Between Test Procedure and Test Script,4,"There is a conflict between the list of requirements in Test #3, Section 11.1 Virtual Machine Test of the S912-TP4970 document and the header of Test #3 in script “vm_runseqtest1()”. The requirements listed in the S912-TP4970 document are VM001 (L4-SRVML-1 ) and VM003 (L4-SRVML-10). These are considered requirements descriptions in DOORS. The requirements listed in the header of Test #3 of the test script are VM001.3 (L4-SRVML-4 ) and VM003.2 (L4-SRVML-12). The requirements in the test script should also be listed in the S912-TP4970 document. VM001.3 (L4-SRVML-4 ) - Sequence Variables - Through VM Task interface, VML Flight Component shall provide global variables with read/write accessibility to active sequences and spacecraft subsystems. VM003.2 (L4-SRVML-12) - VM Global Variable Telemetry - VM Task shall provide interface storage and transmission of the VMLFC global variables in sequences/blocks being executed.",8/16/05ProjectA - TIM - 1960,B5.0 VM Test Analysis: Requirements Conflict Between Test Procedure and Test Script,4,"The requirements that are listed in Test #1, Section 11.1 Virtual Machine Test of the S912-TP4970 document conflict with the list of requirements in the header of Test #1 in script “vm_runseqtest1()”. The requirements listed in the S912-TP4970 document are VM001 (L4-SRVML-1), VM002 (L4-SRVML-6), VM003 (L4-SRVML-10) and VM006 (L4-SRVML-21). These are considered requirements descriptions in DOORS. The requirements listed in the header of Test #1 of the test script are VM001.1 (L4-SRVML-2), VM001.2 (L4-SRVML-3), VM002.3 (L4-SRVML-9), VM003.1 (L4-SRVML-11) and VM006.1 (L4-SRVML-22). The requirements in the test script should also be listed in the S912-TP4970 document. VM001.1 (L4-SRVML-2) - Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences. VM001.2 (L4-SRVML-3) - Initial State - Upon Start up of VM Task, VML Flight Component shall default engine states to “unloaded” and “inactive”. VM002.3 (L4-SRVML-9) - VM Task Health & Safety - VM Task shall provide proper interface to accept and reject commands and housekeeping packet generation. VM003.1 (L4-SRVML-11) - VML Channeled Telemetry - VM Task shall provide interface for VML internal Telemetry storage and transmission via Software Bus. VM006.1 (L4-SRVML-22) - VM Event Handler - VM Task shall provide interface for VMLFC internal Event Reports to be logged into Event Handler task with logging capabilities.",8/16/05ProjectA - TIM - 1959,B5.0 VM Test Analysis: Requirement Conflict Between SRS and Test Script,2,"Test #1 in Section 11.1 Virtual Machine Test of the S912-TP4970 document shows that the script “vm_runseqtest1()” is called. The “vm_runseqtest1()” script verifies requirement VM0001.1 (L4-SRVML-2) which indicates that ""The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences."" The test script tests the VM configuration limits by verifying that VM 0 and VM 13 are out of range. This indicates that there are twelve (12) Virtual Machines. So, there is a conflict with what is being tested and the requirement VM001.1 (L4-SRVML-2) in the DOORS link to the OBC VM SRS (L4-Contractor1-S912-SRS4970). TIM 1158 already contains an issue concerning 10 versus 12 VMs. However this TIM is written to identify the issue as it relates to the VM testing. VM0001.1 (L4-SRVML-2) – “VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences”.",8/16/05ProjectA - TIM - 1958,B5.0 VM Test Analysis: Incorrect Reference to C&DH in VM Test Procedure,5,The ProjectA Virtual Machine (VM) Task Flight Software Test Procedures S912-TP4970 document refers to the OBC C&DH Flight Software in Sections 1 through 4 instead of the VM Flight Software.,8/16/05ProjectA - TIM - 1957,B5.0 OBC C&DH TA: Requirements Missing from Test Scripts,4,"The ProjectA_tp_unit_test()test script does not list the mapped DOORS requirements in it's headers: TCS001, TCS002, TCS003, TCS011, TCS021, TCS022, TCS023, TCS041, TCS043, TCS044, TCS061, TCS081, TCS082, TCS101, and TCS102. TCS001 (L4-SROBC-231) - Thermal Control Software shall utilize control algorithms to support the Thermal Control requirements as specified in the Spacecraft Bus Thermal Control System Design Note. TCS002 (L4-SROBC-232) - Thermal Control Software shall have access to and control over heater and sensor interfaces to control the specified spacecraft components in the Spacecraft Bus Thermal Control System Design Note. TCS003 (L4-SROBC-233) - Thermal Control Software shall maintain operating temperature ranges for operating spacecraft components as specified in the Spacecraft Bus Thermal Control System Design Note. TCS011 (L4-SROBC-235) - Thermal Control Software shall accommodate 4 temperature sensor types. TCS021 (L4-SROBC-237) - Thermal Control Software shall provide heater commands to control the temperature of a heated unit by maintaining the units temperature above and/or below a prescribed absolute reference reading. TCS022 (L4-SROBC-238) - Thermal Control Software shall provide temperature level control logic that maintains the heater status where required to determine if a heater string is to be ""On"" or ""Off"". This method of heater control sets an enabled heater string state to ""On"" if the value of the sensed temperature is less than or equal to a specified ""On"" limit and sets it to ""Off"" if the value is greater than or equal to a specified ""Off"" limit. TCS023 (L4-SROBC-239) - Thermal Control Software shall be capable of performing at least a minimum and a future control law parameter (e.g., temperature ranges, limits, etc.) under specified conditions. TCS041 (L4-SROBC-241) - Thermal Control Software shall not activate a heater string if the control activation/deactivation flag for the string indicates the 'de-active' state. TCS043 (L4-SROBC-242) - Thermal Control Software shall provide control of the on/off state for each of up to 64 heater switch pairs (primary and secondary). TCS044 (L4-SROBC-243) - Thermal Control Software shall provide the capability to support ground commanded on/off control of heaters for which software control has been disabled such that single command can turn on or off any heater. TCS061 (L4-SROBC-245) - Heater switch commands shall be limited to 10 as default value per TP cycle. TCS081 (L4-SROBC-247) - Thermal Control Software shall provide data defining the actual states of activation/deactivation flags for each heater switch to the Telemetry Control application for Downlink. TCS082 (L4-SROBC-248) - Thermal Control Software shall provide for Housekeeping Telemetry. TCS101 (L4-SROBC-250) - Thermal Control Software shall provide sensor sampling and control response rates at 1 Hz for all applicable heater units. TCS102 (L4-SROBC-251) - Thermal Control Software shall be capable of performing the temperature reading processing for all thermal data points at 1 Hz.",8/15/05ProjectA - TIM - 1956,B5.0 OBC C&DH TA: Requirements Missing from Test Scripts,4,"This test script ds_reset_command_counters() does not list the DS021 mapped DOORS requirements in the header: DS021 (L4-SROBC-163) - The OBC-C&DH software shall accept and execute a RESET_DS_HOUSEKEEPING command, which resets housekeeping data that is normally reported in the real-time telemetry stream.",8/15/05ProjectA - TIM - 1955,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures and Test Script,3,"Section 11.16 Software Manager (SM) Test of the C&DH Test Procedures S912-TP4920 calls test script “sm_misc_b50_test”. However the requirements linked to “sm_misc_b50_test” in the DOORS V&V Matrix are not listed in Section 11.16 Software Manager (SM) Test of the C&DH Test Procedures (S912-TP4920) or in the test script itself. The requirements linked in the DOORS V&V matrix are SM038, SM039, SM033, SM040, SM049, SM013, SM015, SM042, SM017, SM019, SM020, and SM043. These requirements should be listed in the Test Procedure and the test script to mirror the links from the OBC C&DH SRS (L4-Contractor1-S912-SRS4920) to the test script. SM038 (L4-SROBC-173) - Flight Software shall maintain counters for error-free Software Manager commands received and processed. SM039 (L4-SROBC-174) - Flight Software shall maintain counters for Software Manager commands that were not processed due to error conditions, and generate event messages for error conditions. SM033 (L4-SROBC-175) - Flight Software shall accept and execute a Reset Counters command that resets command and error counters. SM040 (L4-SROBC-176) - Flight Software shall maintain a ""Working Buffer"" within Software Manager that is used for temporary storage of uplinked data, and is addressable in certain commands as an offset to a virtual address base of F0000000 hexadecimal. SM049 (L4-SROBC-178) - Flight Software shall implement an Enable command with time out timer and Disable command for any memory access to EEPROM, which includes memory load, memory copy, or table commands. SM013 (L4-SROBC-196) - Flight Software shall accept and execute a LOAD_TABLE command to load between 1 and 121 words of table data at a specified word offset from the beginning of the currently selected table. SM015 (L4-SROBC-199) - Flight Software shall accept and execute a DUMP_TABLE command, specifying an offset into the table to start dumping, the number of words to dump from the offset, and the number of copies to dump. SM042 (L4-SROBC-200) - Flight Software shall reject a Table Dump command if a table load/edit session has not been initiated, a dump is already active, or the specified dump range extends beyond the size of the table. SM017 (L4-SROBC-203) - Flight Software shall maintain running calculations of essential variables (i.e., checksum) to be used for verification of a good table load prior to table use. SM019 (L4-SROBC-204) - Flight Software shall initialize and maintain an 8-bit EXCLUSIVE-OR checksum for the currently selected table. SM020 (L4-SROBC-205) - Flight Software shall initialize and maintain a SESSION_WORD_COUNT for the total number of words loaded for the currently selected table. SM043 (L4-SROBC-207) - Flight Software shall accept and execute a COMMIT_TABLE command that immediately makes the new or edited version of the table available for use.",8/15/05ProjectA - TIM - 1954,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures,3,"Section 11.16 Software Manager (SM) Test of the C&DH Test Procedures S912-TP4920 calls test script “sm_mem_test”. However the requirements linked to “sm_mem_test” in the DOORS V&V Matrix are not listed in the test procedure. The requirements are SM002, SM005, SM006, SM007, SM034, SM036, SM008, SM009, and SM037. These requirements should be listed in the Test Procedure to mirror the test script and the DOORS link to the OBC C&DH SRS (L4-Contractor1-S912-SRS4920). SM002 (L4-SROBC-181) - Flight Software shall accept and execute a Load Memory command to load SRAM, DRAM, EEPROM, and Working Buffer Flight Computer memory locations. SM005 (L4-SROBC-182) - Flight Software shall reject any LOAD_MEMORY command that specifies an odd memory address, an invalid number of words to load, or a memory address that is out of addressable range. SM006 (L4-SROBC-186) - Flight Software shall accept and execute a DUMP_MEMORY command to dump the contents of SRAM, DRAM, EEPROM or Working Buffer memory, specifying the start address, number of words to dump, and number of copies to dump. SM007 (L4-SROBC-187) - Flight Software shall reject a dump command if a dump is already in progress, the dump address is not an even four-byte address, or the dump range is out of addressable memory. SM008 (L4-SROBC-191) - Flight Software shall accept and execute a COPY_MEMORY command to copy the contents of SRAM, DRAM, EEPROM, or Working Buffer memory from one contiguous area to another SRAM, DRAM, EEPROM, or Working Buffer area on the same processor, without regard to memory overlaps. SM009 (L4-SROBC-192) - Flight Software shall reject any COPY_MEMORY command if: a specified memory address is not an even address, a specified memory address is out of addressable range, or the specified number of words to copy is too large. SM034 (L4-SROBC-188) - Flight Software shall accept and execute an Abort Memory Dump command. SM036 (L4-SROBC-189) - Flight Software shall accept and execute a Dump Memory in Event command, that returns in an event message the data resident in a limited number of memory locations. SM037 (L4-SROBC-226) - Flight Software shall accept and execute commands that can write to and read from any single specified memory address.",8/15/05ProjectA - TIM - 1953,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures,3,"Section 11.14 DRAM Diagnostics (DI) Test of the C&DH Test Procedures S912-TP4920 calls test script “di_test_new”. In the DOORS V&V Matrix, requirements DI001, DI002, DI003, DI004, and DI005 are linked to ""di_test_new"". Section 11.14 DRAM Diagnostics (DI) Test of the C&DH Test Procedures S912-TP4920 does not list the above mentioned requirements. These requirements should be listed in the Test Procedure to mirror the test script and the DOORS link to the OBC C&DH SRS (L4-Contractor1-S912-SRS4920). DI001 (L4-SROBC-37) - Flight Software shall include commandable, background real-time hardware diagnostics for Flight Computer Input / Output Interfaces. DI002 (L4-SROBC-38) - Flight Software hardware diagnostics shall accept commands to activate background or foreground hardware testing. DI003 (L4-SROBC-39) - The results of Hardware Diagnostics tests conducted during start-up shall be stored in fixed memory locations that will not be modified by processor resets. DI004 (L4-SROBC-40) - The results of the Hardware Diagnostics tests conducted during nominal operations shall be inserted into the designated portion of telemetry streams. DI005 (L4-SROBC-325) - An enable command shall be implemented requiring each Hardware Diagnostics test to be started within .5 second of the enable command.",8/15/05ProjectA - TIM - 1952,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures,3,"Section 11.13 GraND Interface (S3) Test of the C&DH Test Procedures S912-TP4920 calls “s3_GRaND_interface()”. However, requirements S3001, S3002, S3003, S3004, S3005, S3006, S3006.1, S3006.2, S3009, S3009.1, and S3009.2 are linked to test script “s3_test()” in the DOORS V&V Matrix. The test procedure does not list the requirements mentioned above. In addition, it appears that the requirements should be linked to test script “s3_GRaND_interface()”, instead of ""s3_test()"". S3001 (L4-SROBC-79) - S3 task shall accept and execute a RESET_TLM command, which resets its housekeeping telemetry. S3002 (L4-SROBC-80) - S3 task shall send its housekeeping telemetry to the Software Bus upon receiving a command from the Software Bus. S3003 (L4-SROBC-81) - S3 task shall be able to forward any commands destined to the MUC or to the MUC instruments (via MUC) that it receives from the Software Bus. S3004 (L4-SROBC-82) - S3 task shall be able to generate and send FIFO reset commands to the MUC to reset any one of the following Gamma Ray and Neutron Detector (GRAND) FIFOs: GRAND TLM, GRAND CMD, and TEST. S3005 (L4-SROBC-83) - S3 task shall forward the spacecraft Time Code message it received from the Software Bus to MUC, which in turn forwards it to GRAND, based on the op-code and slave address. S3006 (L4-SROBC-84) - S3 task shall read MUC Instrument Interface Status in a single HSS3 data block. S3006.1 (L4-SROBC-85) - S3 task shall maintain Housekeeping telemetry for the MUC Instrument Interface Status, updating the telemetry after each reading of the MUC Instrument Interface Status. S3006.2 (L4-SROBC-86) - S3 task shall maintain counts of those MUC Instrument failure statuses that are cleared on read. S3009 (L4-SROBC-87) - S3 task shall read Gamma Ray and Neutron Detector (GRAND) telemetry, MUC GRAND TLM FIFO, with a minimum frequency of 1 Hz to prevent overflow. S3009.1 (L4-SROBC-88) - S3 task shall calculate a CRC for each GRAND message and compare it against the CRC appended to the end of the message, discarding the message if the CRC does not match and updating a bad message counter. S3009.2 (L4-SROBC-89) - S3 task shall process a GRAND message that passes a CRC check by removing the sync codes (2 bytes) and the length field (2 bytes), and sending the CCSDS telemetry packet to the Software Bus.",8/15/05ProjectA - TIM - 1951,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures,3,"In Section 11.11 Memory Scrub (MS/IT) Test of the C&DH Test Procedure S912-TP4920 the script “ms_b50_changes_test()” is called. According to the test script and the DOORS V&V Matrix ""ms_b50_changes_test"" is designed to verify requirements MS001, MS007, and MS009. However, there are no requirements listed in the Requirement ID column of the Test Procedure. MS001 (L4-SROBC-295) - Flight Software shall provide background memory scrubbing of the SRAM in the Flight Computer. MS007 (L4-SROBC-300) - Flight Software shall provide a command to disable the scrubbing of SRAM and DRAM. MS009 (L4-SROBC-302) - Flight software shall provide a command to reset housekeeping telemetry associated with the SRAM and performance monitoring functions.",8/15/05ProjectA - TIM - 1950,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures,3,"In Section 11.9 Time Code (TC) Test of the C&DH Test Procedures S912-TP4920 there is no requirement listed in the Requirement ID column. However, the script “tc_jam_seconds_and_reset_counters_test()” is linked to the the OBC C&DH SRS (L4-Contractor1-S912-SRS4920) requirements TC001 and TS001 in the DOORS V&V Matrix. TC001 (L4-SROBC-99) - Flight Software shall accept and execute a JAM_SECONDS command to jam the seconds field of the spacecraft clock. The JAM_SECONDS command, received from the ground, sets the seconds field of the spacecraft clock to the value in the command. TS001 (L4-SROBC-254) - Flight Software shall provide a table driven telemetry monitoring function capable of extracting data from any valid combination of CCSDS telemetry packets and constructing the required monitor point.",8/15/05ProjectA - TIM - 1949,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures,4,"In Section 11.2 Stored Command Test of the C&DH Test Procedures S912-TP4920, Test #6 appears to be missing a reference to the requirement SC020. The requirement in the OBC C&DH SRS (L4-Contractor1-S912-SRS4920) is linked to the SC_test_rts test script in the DOORS V&V Matrix. SC020 (L4-SROBC-125) - Flight Software shall reset SC counters upon receipt of Reset Counters command.",8/15/05ProjectA - TIM - 1948,B5.0 OBC C&DH TA: Possible Incorrect Mapping of DOORS Requirements to Test Script,3,"It appears that the following requirements from the OBC C&DH SRS (L4-Contractor1-S912-SRS4920 are mapped to the “sm_misc_b50_test()” script in the DOORS database, but should be mapped to the script “sm_mem_test()” instead: SM019 (L4-SROBC-204) – “Flight Software shall initialize and maintain an 8-bit EXCLUSIVE-OR checksum for the currently selected table”. This requirement appears to be tested in the script “sm_mem_test()”. SM039 (L4-SROBC-174) - Flight Software shall maintain counters for Software Manager commands that were not processed due to error conditions, and generate event messages for error conditions. SM013 (L4-SROBC-196) - Flight Software shall accept and execute a LOAD_TABLE command to load between 1 and 121 words of table data at a specified word offset from the beginning of the currently selected table. SM042 (L4-SROBC-200) - Flight Software shall reject a Table Dump command if a table load/edit session has not been initiated, a dump is already active, or the specified dump range extends beyond the size of the table.",8/12/05ProjectA - TIM - 1947,B5.0 OBC C&DH TA: Unclear Testing of Requirements in Test Scipt,3,"It is not clear as to where in the script “sm_mem_test()” that the following requirements are tested: SM003 and SM041. The issue in both requirements is the term “NON_INTERRUPTABLE”. There is no reference in the test script to non interruptable load memory commands. However, there are load memory commands that are tested. SM003 - Flight Software shall accept and execute a NON_INTERRUPTABLE_LOAD_MEMORY command that disables interrupts during the load of between 1 and 6 (16-bit) words into processor SRAM. SM041 - Flight Software shall reject any NON_INTERRUPTABLE_LOAD_MEMORY command that specifies an invalid number of words to load, or a memory address that is out of addressable SRAM range.",8/12/05ProjectA - TIM - 1946,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures,4,"In Section 11.12 Software Bus (SB) Test of the C&DH Test Procedure S912-TP4920 the script “sb_req_test()” is called. The script verifies requirements SB001, SB003, SB004, SB005, SB006 and SB010. However, the requirements listed in the Requirement ID column of the Test Procedure are SB001, SB002, SB003 and SB004. The requirements that are mapped to the script in the DOORS link to the OBC C&DH SRS (L4-Contractor1-S912-SRS4920) are SB001, SB003, SB004, SB005, SB006 and SB010. which are the same as the requirements listed in the test script. SB001 (L4-SROBC-42) - The C&DH OBC SB software shall validate packet integrity for all packets by verifying that the packet size is less than or equal to an expected value, and the CCSDS primary header represents a valid ProjectA telemetry or command packet. SB003 (L4-SROBC-43) - The C&DH OBC SB software shall accept and execute the command, RESET_SB_HOUSEKEEPING, which resets housekeeping data normally reported in the real-time telemetry stream. SB004 (L4-SROBC-44) - The C&DH OBC SB software shall accept and execute a command to enable or disable a SB packet destination. SB005 (L4-SROBC-45) - The C&DH OBC SB software shall have a feature that monitors CCSDS packet sequence numbers, detecting and indicating sequence gaps. SB006 (L4-SROBC-46) - The C&DH OBC SB software shall accept and execute a command to enable or disable the monitoring of CCSDS packet sequence numbers. SB010 (L4-SROBC-48) - The C&DH OBC software shall monitor CPU utilization and telemeter for ground analysis.",8/12/05ProjectA - TIM - 1945,B5.0 OBC C&DH TA: Missing DOORS Requirement to Test Script Mapping,3,The requirement TS015 – “Flight Software shall accumulate statistics for each monitor point” is missing from the DOORS C&DH SRS. The requirement is listed in the C&DH Test Procedure document and the test script “ts_test()”.,8/12/05ProjectA - TIM - 1944,B5.0 OBC C&DH TA: Possible Missing Requirement in Test Procedure,3,"Requirement TS001 is documented in the test script ts_test(), however it is not listed in the C&DH Test Procedure document (S912-TP4920 ). The requirement is mapped to the script “tc_jam_seconds_and_reset_counters_test()” in the DOORS C&DH SRS. This mapping is in conflict with the listing of the requirement in script ts_test(). TS001 (L4-SROBC-254) - Flight Software shall provide a table driven telemetry monitoring function capable of extracting data from any valid combination of CCSDS telemetry packets and constructing the required monitor point.",8/12/05ProjectA - TIM - 1943,B5.0 OBC C&DH TA: Missing DOORS Requirement to Test Script Mapping,3,"As part of Section 11.4 Data Storage of the C&DH Test Procedure S912-TP4920, the “ds_time_based_filter_test()” script is called to verify requirement DS006. However, the DOORS link to the OBC C&DH SRS (L4-Contractor1-S912-SRS4920) does not contain a mapping of the test script “ds_time_based_filter_test()” to requirement DS006.",8/12/05ProjectA - TIM - 1942,B5.0 OBC C&DH TA: Requirement Missing from Data Storage (DS) Test Procedure,4,"As part of Section 11.4 Data Storage of the C&DH Test Plan S912-TP4920, the “ds_start_playback_test()” script is called to verify requirements DS011 and DS012. However, the requirement DS012 is not mapped to a step in Section 11.4. It seems that it should be listed with DS011 in Step 26. DS011 (L4-SROBC-150) - The OBC-C&DH software shall accept and execute a START_RECORDER_PLAYBACK command which starts an initial playback of the specified DATASET for the specified Virtual Recorder. DS012 (L4-SROBC-151) - The OBC-C&DH software shall accept and execute a STOP_RECORDER_PLAYBACK command, which aborts the playback and/or retransmissions of the specified Virtual Recorders. Note that this command performs different functions when the Virtual Recorder is in CONTINUOUS_PLAYBACK mode.",8/12/05ProjectA - TIM - 1941,B5.0 OBC C&DH TA: Requirements Missing from Test Scripts,4,The sm_mem_test() test script does not list the mapped DOORS requirement SM037 in it's header. SM037 (L4-SROBC-226) - Flight Software shall accept and execute commands that can write to and read from any single specified memory address.,8/12/05ProjectA - TIM - 1940,L4 UPL RTA: [L3-SFS-777] incomplete traceability,3,"[L3-SFS-777] addresses the reception and installation of configuration files and tables. According to the 7/5//2005 DOORS database, [L3-SFS-777] has incoming links from the L4 OBC C&DH requirements. However, there have been no requirements from the L4 UPL requirements linked to [L3-SFS-777]. Referenced Requirements; [L3-SFS-777] The Flight Software shall have the capability to receive and install configuration files and tables to respond to changes in spacecraft and instrument hardware and operations. Linked to [L3-SFS-777]: [L4-SROBC-215] Flight Software shall retain telemetry pertaining to a table commit command until another table select command or reset table operations command has been issued. [L4-SROBC-216] Flight Software shall accept and execute an RESET_TABLE_OPERATIONS command that terminates the current table load/edit session without affecting the onboard versions of the currently selected table, regardless of whether a table has been selected. [L4-SROBC-214] The execution of a table commit operation shall disable subsequent commit operation to that table until the table is again selected. [L4-SROBC-213] Flight Software shall maintain a ground-definable jam-loadable flag for each table. When true (that is, jammable), the Flight Software immediately commits table changes to memory. When false (that is, non-jammable), the Flight Software ""handshakes"" with the table's assigned application task indicating that a table is ready to commit. The application task indicates back to Software Manager when commitment may take place. [L4-SROBC-212] Flight Software shall maintain a ground-definable checksum flag for each table. When true, the Flight Software calculates and stores the table checksum upon commitment of any uploaded change to the table. The Software Manager task indicates to the Checksum task to disable checksum checking a table undergoing commitment. [L4-SROBC-209] If the specified Checksum and the on-board Checksum are equal, Flight Software shall immediately make the new or edited versions of the table available for use (COMMIT). [L4-SROBC-208] Flight Software shall accept and execute a COMMIT_TABLE_WITH_CHECKSUM command that compares the on-board Checksum with the expected Checksum specified in the command and performs the following based on the comparison results: [L4-SROBC-207] Flight Software shall accept and execute a COMMIT_TABLE command that immediately makes the new or edited version of the table available for use. [L4-SROBC-205] Flight Software shall initialize and maintain a SESSION_WORD_COUNT for the total number of words loaded for the currently selected table. [L4-SROBC-204] Flight Software shall initialize and maintain an 8-bit EXCLUSIVE-OR checksum for the currently selected table. [L4-SROBC-203] Flight Software shall maintain running calculations of essential variables (i.e., checksum) to be used for verification of a good table load prior to table use. [L4-SROBC-201] Flight Software shall accept and execute an Abort Table Dump command. [L4-SROBC-199] Flight Software shall accept and execute a DUMP_TABLE command, specifying an offset into the table to start dumping, the number of words to dump from the offset, and the number of copies to dump. [L4-SROBC-196] Flight Software shall accept and execute a LOAD_TABLE command to load between 1 and 121 words of table data at a specified word offset from the beginning of the currently selected table. [L4-SROBC-194] Flight Software shall accept and execute a SELECT_TABLE command, which initializes a table load/edit ""session"" to load or dump data for a specified table. Command parameters include: - table id to load or dump; - table image source used to initialize the Working Buffer on which to overlay a load or from which to dump (including initial table from EEPROM, active table from SRAM or DRAM, or null/zero-fill); - table load commit operation (including dump-only (table is dumped directly from the source address and not from Working Buffer), replace initial table in EEPROM, or replace active table in SRAM or DRAM). [L4-SROBC-136] The OBC-C&DH software shall accept and execute a SWAP_FILTER factor command, which will swap filter factors for the 2 specified application id's for the filter table currently in use. [L4-SROBC-135] The OBC-C&DH software shall accept and execute a JAM_FILTER factor command, which given the application id of a packet will modify the filter factors for the filter table currently in use. [L4-SROBC-134] The OBC-C&DH software shall accept and execute a CHANGE_FILTER_TABLE command, which immediately begins filtering telemetry packets according to the parameters stored in the specified filter table. Recommendations: Minimally, L4 UPL SM-related requirements should be linked to [L3-SFS-777] that address reception and installation of configuration files and tables.",8/11/05ProjectA - TIM - 1939,B5.0 OBC C&DH TA: Requirements Missing from Test Procedures,4,"It appears that the requirements in the DOORS link to the OBC C&DH SRS (L4-Contractor1-S912-SRS4920) that map to the test script “cs_test()” are not listed in Section 11.17 Checksum (CS) Test of the C&DH Test Procedure S912-TP4920. The requirements (CS001, CS002, CS003, CS004, CS004.1, CS004.2, CS004.3, CS005, CS005.1, CS005.2, CS005.3, CS005.4, CS006 and CS007) appear to be verified by the script “cs_test()”. These requirements should be listed in the Test Procedure to mirror the test script and the DOORS link to the OBC C&DH SRS (L4-Contractor1-S912-SRS4920). CS001 (L4-SROBC-305) - The OBC flight software shall provide a mechanism to verify the contents of key static memory areas to support single event upset detection in EEPROM and SRAM (code and static table data). CS002 (L4-SROBC-306) - On initialization, the OBC flight software shall construct a Master Checksum Verification List which contains information required to detect changes in memory areas targeted for validation. CS003 (L4-SROBC-307) - The OBC flight software shall generate an event message for each occurrence of a memory checksum error. CS004 (L4-SROBC-308) - The OBC flight software shall provide a command to re-compute checksums for each of the following memory types: CS004.1 (L4-SROBC-309) - EEPROM CS004.2 (L4-SROBC-310) - Code segments in RAM CS004.3 (L4-SROBC-311) - All static tables in RAM CS005 (L4-SROBC-312) - The OBC flight software shall provide a command to enable or disable the checksumming of the following memory types: CS005.1 (L4-SROBC-313) - All memory areas CS005.2 (L4-SROBC-314) - EEPROM CS005.3 (L4-SROBC-315) - Code segments in SRAM CS005.4 (L4-SROBC-316) - Static tables in SRAM. CS006 (L4-SROBC-317) - The OBC flight software shall provide a handshake mechanism with the software manager task for loading static tables without generating false checksum errors. CS007 (L4-SROBC-318) - The OBC flight software shall provide a command to Reset Counters that resets telemetered command and error counters and data.",8/11/05ProjectA - TIM - 1938,B5.0 OBC C&DH TA: Requirements Verified by Design,3,"The following OBC C&DH requirements were verified by design. The methodology employed and documentation were not provided to the IV&V Team: 1) Test script SC_test_rts()indicates that requirement SC010 was verified by design. 2) Test #1 of Section 11.2 Stored Command Test of the C&DH Test Plan S912-TP4920 indicates that requirement SC015 was verified by design. 3) The test script “ts_test()” indicates that the requirements TC007 and TS002 were verified by design. Requirement SC010 (L4-SROBC-110) - Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations. Requirement SC015 (L4-SROBC-120)- RTSs shall be DISABLED upon a COLD_RESTART with the exception of RTS #1 (the Start-Up RTS). Requirement TC002 (L4-SROBC-100) - Flight Software shall send the time of the next 1 Hz pulse to the Framing Camera/VIR instrument via the 1553 bus, prior to the 1553 slot allocated to this function (currently at 0 milliseconds). Requirement TC007 (L4-SROBC-104) - In the event that the 1 Hz pulse from the uplink card is unavailable, the Flight Software shall provide a backup interrupt to schedule software operations.",8/11/05ProjectA - TIM - 1937,B5.0 OBC C&DH TA: Unexecuted Test Procedures,3,The following test procedures and corresponding test scripts were not executed according to the As Run Test Procedures S912-TP4920: Section 11.15 Operating System (OS) os_eeprom_table_load() Section 11.8 Small Deep Space Transponder (SDST) sdst_test() sdst_fp_control() Section 11.7 Power Distribution (PDU) Test pdu_tlm_test() pdu_switch_test() Section 11.5 TP Heater Command Test tp_htr_cmd_test() tp_heater_cmd_verify() The test scripts are also not mapped to requirements in the DOORS OBC C&DH database. It appears that these test procedures and scripts are not required for the ProjectA Project.,8/11/05ProjectA - TIM - 1936,B5.0 OBC C&DH TA: Possible Extraneous Test Scripts,3,"The following test scripts are included in the Build 5 test scripts tar file, but are not mapped to requirements in the DOORS OBC C&DH SRS (L4-Contractor1-S912-SRS4920): to_time_based_filter() to_change_rate_test() ds_dram_paging_test() ds_seq_num_based_filter_test() ds_change_rate_test() xb_b50_changes_test() s3_GRaND_interface() The test scripts are also not called in the OBC C&DH Test Procedure, thus it appears that these test scripts are not applicable to the ProjectA Project.",8/11/05ProjectA - TIM - 1935,L3 RTA: Excessive internal tracing of the L3 SC&FSRD requirements,3,"There are several instances in the L3 SC&FSRD where there are L3 requirements linked to other L3 requirements. This is acceptable when L3 requirements are effectively decomposed at the same level. However, there are cases where this pattern of internal tracing continues for up to nine levels, before finally being resolved to the L4 requirements. The following traceability relationshEngine illustrate the most extreme example of this problem: 1. [L3-SFS-473] has a link from [L3-SFS-147] 2. [L3-SFS-147] has a link from [L3-SFS-489] 3. [L3-SFS-489] has a link from [L3-SFS-2478] 4. [L3-SFS-2478] has a link from [L3-SFS-1018] 5. [L3-SFS-1018] has a link from [L3-SFS-20] 6. [L3-SFS-20] has links from [L3-SFS-703] and [L3-SFS-704] 7. [L3-SFS-703] and [L3-SFS-704] have a link from [L3-SFS-897] 8. [L3-SFS-897] has a link from [L3-SFS-909] 9. [L3-SFS-909] has a link from [L4-SROAC-16], [L4-SROAC-15], [L4-SROAC-14], [L4-SROSU-4], [L4-SROBC-3], [L4-SROBC-4], [L4-SROBC-278], and [L4-SRUP-131] After evaluating the requirements at each level subordinate to [L3-SFS-473], the requirements at the top levels seem, at least to some degree, relatable back to [L3-SFS-473]. However, after several levels of implied decomposition, the requirements no longer seem to reflect any functionality directly involved with accomplishing the functionality levied by the top level requirement, (i.e., [L3-SFS-473]). This type of traceability seems of little value and defeats the purpose of requirements traceability. Referenced Requirements: [L3-SFS-473] Each RCS thruster shall be capable of providing steady state thrust from 1.02 to 0.2 N based on an inlet pressure varying from 2.757903 Mpa (400 psi) to 0.552 Mpa (80 psi) with a thrust uncertainty within +/- 8% of the expected value based on inlet pressure and temperature. Linked to [L3-SFS-473]: [L3-SFS-147] The ACS shall monitor the on time of each thruster for use in determining the delivered impulse and relative hydrazine consumption. Linked to [L3-SFS-147]: [L3-SFS-489] Telemetry data necessary for on-ground residual propellant evaluation shall be provided. An established method for residual propellant measurement shall also be provided. It shall be possible to determine the amount of on-board propellant to an accuracy of less than or equal to 2.5 kg during ground processing and all times during the mission. Linked to [L3-SFS-489]: [L3-SFS-2478] The RCS subsystem shall support telemetry including tank pressure and thruster on times to be able to detect an unexpected loss of propellant before loss of more than 5 kg of propellant. Linked to [L3-SFS-2478]: [L3-SFS-1018] The Spacecraft RCS shall be dual fault tolerant to bulk propellant leakage pre-launch (faults are considered here to be realizable configurations of switches and latches by spacecraft movement or procedural mistake). Linked to [L3-SFS-1018]: [L3-SFS-20] The spacecraft shall provide three inhibits (Dual fault tolerant) for all potentially catastrophic events (Category A as defined in EWR-127-1) and two inhibits (Single Fault Tolerant) for potentially critical events (Category B as defined by EWR-127-1) Linked to [L3-SFS-20]: [L3-SFS-703] The Flight Software shall support inhibits as required by the flight system for all catastrophic events (Category A*) which could result in a fatal or disabling injury, total loss of the ProjectA Flight System or major facility damage. The total requirement is three inhibits (dual fault tolerant). Inhibits include Engine, RCS Thrusters, Solar Array Deployment and RF Transmit. [L3-SFS-704] The Flight Software shall support inhibits as required by the flight system for all critical events (Category B*), which could result in serious injury, ProjectA Flight System, damage, or in the unscheduled use of safing procedures. The total requirements is two inhibits (single fault tolerant). Inhibits include Reaction Wheels and IRU. Linked to [L3-SFS-703] and [L3-SFS-704]: [L3-SFS-897] No single fault of the Spacecraft shall allow either solar array to deploy prematurely during launch and separation (before spindown). Linked to [L3-SFS-897]: [L3-SFS-909] The Flight System shall initialize to a safe state following initial powerup, component reset or switch or recovery from Phoenix mode. Safe State: prevent powering previously failed unit, use of actuators while mated, monitor separation and initiate separation sequence and transition to Safe Mode when appropriate. Linked to [L3-SFS-909]: [L4-SROAC-16] After initialization is complete, the ACS software shall respond to ACS Commands. [L4-SROAC-15] When the C&DH software indicates that a power-on or re-boot has occurred, selected ACS FDIR processing shall be initialized as disabled. [L4-SROAC-14] When the C&DH software indicates that a power-on or re-boot has occurred, all AC statistics shall be reset to zero. [L4-SROSU-4] Flight Software shall accept an initialization parameter block via ground command, and/or from Uplink Card directly during OBC cold boot, including Spacecraft ID, VCDU RS Code, VCDU Size, Downlink Card VCDU Rate, Uplink Card VCDU Rate, Time, with no Insert Zone, and RT-Primary, where the Spacecraft ID and RT-Primary values are stored in RAM memory. [L4-SROBC-3] Flight Computer startup applications shall place the spacecraft into a safe system configuration without any ground intervention following power-up or a temporary power bus fault (cold-boot). [L4-SROBC-4] Flight Software shall reset/restart and initialize all Flight Computer hardware components on the processor board to a known state. [L4-SROBC-278] time_of_last_reset [L4-SRUP-131] The Uplink FSW shall disable the processing of HLP commands from the OBC by default (on bootup.)",8/5/05ProjectA - TIM - 1934,L3 RTA: Nonsensical internal tracing of the L3 SC&FSRD requirements,3,"There are several instances in the L3 SC&FSRD where there are L3 requirements linked to other L3 requirements. This is acceptable when L3 requirements are effectively decomposed at the same level. However, there are cases where traceability paths never terminate at Level 3, due to a previously linked child being reintroduced into the traceability path at a subordinate level. The following traceability relationshEngine illustrate this problem: 1. [L3-SFS-213] is an incoming link to [L3-SFS-218] 2. [L3-SFS-214] is an incoming link to [L3-SFS-213] 3. [L3-SFS-218] is an incoming link to [L3-SFS-214] Since [L3-SFS-218] already exists in the traceability path, this causes continuous repetition of the previously listed traceability sequence. Therefore, the traceability path never terminates. Furthermore, this implies that [L3-SFS-218] serves as both grandparent and child wrt [L3-SFS-214]. This phenomena is not isolated to the traceability branches originating with [L3-SFS-213], [L3-SFS-214], and [L3-SFS-218], but also occurs in traceability branches for [L3-SFS-215], [L3-SFS-216], and [L3-SFS-217]. This is due to all three requirements having [L3-SFS-218] as an incoming link. [L3-SFS-215] happens to also be an incoming link for [L3-SFS-213], which results in the same grandparent/child duplicity identified between [L3-SFS-218] and [L3-SFS-214]. An evaluation of [L3-SFS-213], [L3-SFS-214], [L3-SFS-215], [L3-SFS-216], [L3-SFS-217], and [L3-SFS-218] does reveal a common relationship among all of these requirements. However, this type of traceability seems of little value and defeats the purpose of requirements traceability. Referenced Requirements: Artifact: ProjectA DOORS Database dated 7/5/05 [L3-SFS-213] Capability: The C&DH shall provide a minimum of 8 Gbits of bulk storage. [L3-SFS-214] 1.0 Gbits of storage will be allocated to the Spacecraft for Housekeeping [L3-SFS-215] 0.2 Gbits of storage will be allocated to ACS Parameters including ephemerides and thrust tables. [L3-SFS-216] 0.1 Gbits of storage will be allocated to VML Storage [L3-SFS-217] 2.5 Gbits of storage will be allocated to the Instruments for storage of instrument data and housekeeping. [L3-SFS-218] The total bulk memory requirement with margin is 3.8 Gbits x 1.4 = 5.4 Gbits",8/5/05ProjectA - TIM - 1933,L4 VML RTA: [L3-SFS-877] intent unclear and incomplete/incorrect traceability,3,"[L3-SFS-877] does not indicate whether it was intended to flow down to the L4 VML requirements or the L4 SCP-related requirements. However, the links to [L3-SFS-877] imply applicability to both. However, given the completely different architecture of VML compared to SCP and that they serve completely different purposes, it seems unlikely [L3-SFS-877] was intended to flow down to both the L4 VML and L4 SCP-related requirements. Ignoring this aspect of [L3-SFS-877], [L4-SRVML-19] may represent a valid link to [L3-SFS-877]; however, [L4-SRVML-19] only specifies the capability to read a sequence from a buffer, but not to provide a list of sequences and their sizes. Furthermore, it is unclear whether any memory dwell packets comprise the sequence attributes referenced by [L3-SFS-877]. If not, the links from [L4-SROBC-222] and [L4-SROBC-223] are invalid. The link from [L4-SROBC-218] implies [L3-SFS-877] levies the capability to perform a CRC; however, this does not appear to be the intent of [L3-SFS-877]. Therefore, this link seems invalid as well. Applicability to SCP sequences also implies [L3-SFS-877] should have flowed down to the L4 UPL SCP-related requirements; however, the [L3-SFS-877] has no incoming links from these requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-877] The Flight Software shall provide the capability to read out a list of the stored sequence and their sizes. Requirements linked to [L3-SFS-877]: [L4-SRVML-19] VM Sequence Memory - VM Task shall provide capability for VMLFC to read a sequence from a file buffer and to notify Ground System on anomalies on that read. [L4-SROBC-181] Flight Software shall accept and execute a Load Memory command to load SRAM, DRAM, EEPROM, and Working Buffer Flight Computer memory locations. [L4-SROBC-186] Flight Software shall accept and execute a DUMP_MEMORY command to dump the contents of SRAM, DRAM, EEPROM or Working Buffer memory, specifying the start address, number of words to dump, and number of copies to dump. [L4-SROBC-218] Flight Software shall accept and execute a COMPUTE_CRC command that computes a CRC for a specified memory range and returns the value in housekeeping telemetry. [L4-SROBC-222] Flight Software shall telemeter, in a single CCSDS packet, the combined MEMORY_DWELL data contents at a rate of no faster than one packet per second. [L4-SROBC-223] The time stamp associated with each MEMORY_DWELL packet shall be the sample time associated with the first data sample of the packet.",7/29/05ProjectA - TIM - 1932,L4 VML RTA: [L3-SFS-875] intent unclear with respect to [L3-SFS-2340] and possible incomplete traceability,3,"[L3-SFS-875] is nearly the same as [L3-SFS-2340], except [L3-SFS-2340] is also applicable to H/W, but specific to VML sequences. Since [L3-SFS-875] only makes a general reference to ""sequence,"" it is unclear whether it was intended to represent the SCP version of [L3-SFS-2340]. If so, [L3-SFS-875] is missing SCP-specific terminology and the incoming link to [L4-SRVML-5] is incorrect. Otherwise, if [L3-SFS-875] applies to both VML and SCP sequences, then [L3-SFS-2340] remains, at least, partially redundant to [L3-SFS-875]. Furthermore, [L4-SRVML-5] is the only L4 VML requirement linked to [L3-SFS-875]. [L4-SRVML-5] is only general requirement specifying the support of the onboard block library, which is inadequate to satisfy [L3-SFS-875]. Specifically, [L4-SRVML-5] does not address the response to failed sequence load attempts. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-875] If the Flight Software is unable to load a sequence as commanded, the Flight Software shall notify the Ground System of the error. Requirements linked to [L3-SFS-875]: [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface. [L4-SROBC-174] Flight Software shall maintain counters for Software Manager commands that were not processed due to error conditions, and generate event messages for error conditions. [L4-SROBC-182] Flight Software shall reject any LOAD_MEMORY command that specifies an odd memory address, an invalid number of words to load, or a memory address that is out of addressable range. Other L3 requirement(s) applicable to [L3-SFS-875]: [L3-SFS-2340] If the FLight Software or hardware is unable to load a sequence into the Virtual Machine as commanded, the Flight Software shall notify the Ground Segment of the error.",7/29/05ProjectA - TIM - 1931,L4 VML RTA: [L3-SFS-874] incomplete traceability,3,"[L3-SFS-874] has an incoming link from [L4-SRVML-5] and several links from the L4 UPL and L4 OBC C&DH SCP-related requirements. [L4-SRVML-5] is only a general requirement specifying the capability to load sequences from the onboard block library; whereas, [L3-SFS-874] is specific to loading and deleting sequences and requesting directory listings via memory dumps, although this may not require any VML Task interaction. In which case, the link from [L4-SRVML-5] would be extraneous. [L3-SFS-874] only contains a general reference to the term ""sequence,"" so [L3-SFS-874] does not explicitly indicate whether it was intended to flow down to L4 requirements related to both VML and SCP sequences. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-874] The Flight Software shall provide capabilities to allow the MOS to load and delete sequences and request directory listings, all via memory dump.. Requirements linked to [L3-SFS-874]: [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface. [L4-SRUP-170] The Uplink FSW shall generate Uplink Card Telemetry VCDUs using one or more of the following packets with the following APIDs: [L4-SRUP-172] 0x0FF2 Memory Dump Packet [L4-SRUP-182] Upon receipt of a memory dump command from the ground, the Uplink FSW shall insert a Memory Dump Telemetry Packet into each Uplink Card VCDU until the memory dump is complete. [L4-SRUP-183] The first word in the data section of the Memory Dump Telemetry Packet shall contain the starting address of the memory dump for the packet. [L4-SRUP-298] Flight Software shall accept and execute a SELECT_TABLE command, which initializes a table load/edit ""session"" to load or dump data for a specified table. [L4-SRUP-301] Flight Software shall accept and execute a DUMP_TABLE command, specifying an offset into the table to start dumping, the number of words to dump from the offset, and the number of copies to dump. [L4-SROBC-186] Flight Software shall accept and execute a DUMP_MEMORY command to dump the contents of SRAM, DRAM, EEPROM or Working Buffer memory, specifying the start address, number of words to dump, and number of copies to dump. [L4-SROBC-189] Flight Software shall accept and execute a Dump Memory in Event command, that returns in an event message the data resident in a limited number of memory locations.",7/29/05ProjectA - TIM - 1930,L4 VML RTA: [L3-SFS-873] intent unclear and incomplete traceability,3,"[L3-SFS-873] has incoming links from [L4-SRVML-20], [L4-SROBC-269], and [L4-SROBC-270]. [L4-SRVML-20] represents a valid link if dumping VM memory buffers is involved with retaining sequence memory following a reset. However, the current links do not establish this relationship. [L4-SROBC-269] and [L4-SROBC-270] seem unrelated to [L3-SFS-873], and as such, represent invalid links. Also, since [L3-SFS-873] only makes a general reference to ""sequence"", it is unclear whether it should have also flowed down to the L4 SCP-related requirements. Therefore, [L3-SFS-873] seems unsatisfied by the linked L-4 requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-873] The Flight Software shall support retention of the current sequence memory content in CEU DRAM following a fault protection initiated reset that does not cycle power. Requirements linked to [L3-SFS-873]: [L4-SRVML-20] VM Memory Buffer - VM Task shall provide capability of dumping information regarding the file buffers residing in DRAM request. [L4-SROBC-269] Flight Software shall accept and execute a WATCH_MODE_ON command that disables the ability of Fault Detection/Correction software to request to execute assigned command sequences in response to detected failures. [L4-SROBC-270] Flight Software shall accept and execute a WATCH_MODE_OFF command that enables the ability of Fault Detection/Correction software to request to execute assigned command sequences in response to detected failures.",7/29/05ProjectA - TIM - 1929,L4 VML RTA: [L3-SFS-872] incomplete traceability,3,"[L3-SFS-872] has incoming links from [L4-SRVML-20] and [L4-SROBC-224]. Neither of these links address the specified amount of DRAM allocated for sequence and data storage nor the specified amount of SRAM allocated for the VMLFC application code. Although, [L4-SROBC-224] may be applicable to [L3-SFS-872], no other L4 requirements linked to [L3-SFS-872] establish this relationship. Consequently, [L3-SFS-872] seems unsatisfied by the linked L4 requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-872] The spacecraft shall provide 4 Mbytes of sequence and data storage capacity in DRAM for MOS use and 200 Kbytes in SRAM for the VMLFC application code. Requirements linked to [L3-SFS-872]: [L4-SRVML-20] VM Memory Buffer - VM Task shall provide capability of dumping information regarding the file buffers residing in DRAM request. [L4-SROBC-224] Flight Software shall support up to 64 distinct MEMORY_DWELL addresses. Other L4 requirement(s) applicable to [L3-SFS-872]: [L4-SRVML-19] VM Sequence Memory - VM Task shall provide capability for VMLFC to read a sequence from a file buffer and to notify Ground System on anomalies on that read.",7/29/05ProjectA - TIM - 1928,L4 VML RTA: [L3-SFS-2340] not satisfied by [L4-SRVML-9],3,"The only requirement linked to [L3-SFS-2340] is [L4-SRVML-9], which does not seem to satisfy the parent. This is predominately due to the ambiguity associated with [L4-SRVML-9]*. However, even if the ambiguity is ignored, [L4-SRVML-9] seems to be addressing a slightly different functionality than specified by [L3-SFS-2340]. The parent specifies a response to a failed attempt to execute a commanded VML sequence load, which presumably, would only occur after the VM Task accepts a command to load a VML sequence; whereas, [L4-SRVML-9] seems to specify a response to a command that is accepted or rejected based on whether the command is valid, presumably before the command is ever sent by the VML Task to the VMLFC. (*Note: ProjectA - TIM - 1898 already addresses the ambiguity of [L4-SRVML-9], so this issue is not reiterated here) Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-2340] If the FLight Software or hardware is unable to load a sequence into the Virtual Machine as commanded, the Flight Software shall notify the Ground Segment of the error. Requirements linked to [L3-SFS-2340]: [L4-SRVML-9] VM Task Health & Safety - VM Task shall provide proper interface to accept and reject commands and housekeeping packet generation.",7/29/05ProjectA - TIM - 1925,L4 VML RTA: [L3-SFS-829] intent unclear and incomplete traceability,3,"[L3-SFS-829] has an incoming link from [L4-SRVML-2] and several links from the L4 OBC C&DH SCP-related requirements. [L4-SRVML-2] does not adequately address [L3-SFS-829]. Specifically, [L4-SRVML-2] does not address the ""autoexecute"" capability. Although the intent of [L3-SFS-829] relative to sequences is not stated directly, usage of the term ""sequence file"" implies an exclusively VML context, (i.e. not allocated to SCP FSW). In fact, of the four instances of the term ""file(s)"" among the seven DOORS modules that constitute the ProjectA L4 FSW SRSs, (i.e., SRSs for OBC C&DH, OBC SuROM, OBC ACS, ACE & Uplink Boot ROM Firmware, UPL, and VML Task), three are applicable to VML and the remaining instance is applicable to VCDUs . Therefore, if [L3-SFS-829] was intended to be limited to the context of VML sequences, then the incoming links from [L4-SROBC-110], [L4-SROBC-111], [L4-SROBC-112], and [L4-SROBC-113] are invalid. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-829] The Flight Software shall provide the capability to load a sequence file and start execution of the first function it contains as a single action (called ""autoexecute""). Requirements linked to [L3-SFS-829]: [L4-SRVML-2] Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences. [L4-SROBC-110] Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations. [L4-SROBC-111] Flight Software shall execute the requested RTS upon receipt of the real-time command (START_RTS directive) from either the ground or another on-board software application. [L4-SROBC-112] Flight Software shall execute commands within the RTS buffer (in position order) as the relative time-tag specified in the RTS command expires.",7/29/05ProjectA - TIM - 1924,L4 VML RTA: [L3-SFS-826] incomplete traceability,3,"The only requirement linked to [L3-SFS-826] is [L4-SRVML-5], which does not seem to satisfy the parent. Although [L4-SRVML-5] specifies the capability to support the onboard block library, it does not does not seem to imply the capability to support ground modification of the block library. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-826] The Flight Software shall allow the ground to modify or replace the block library. Requirements linked to [L3-SFS-826]: [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface.",7/29/05ProjectA - TIM - 1923,L4 VML RTA: [L3-SFS-825] intent unclear and incomplete traceability,3,"[L3-SFS-825] has incoming links from [L4-SRVML-5] and [L4-SROBC-110]. [L4-SRVML-5] does not adequately address [L3-SFS-825]. Specifically, [L4-SRVML-5] does not specify the capability to allow onboard blocks to be called by sequences or commands. Although the intent of [L3-SFS-825] relative to sequences is not stated directly, usage of the term ""blocks"" implies an exclusively VML context, (i.e. not allocated to SCP FSW). In fact, the three instances of the term ""blocks"" among the L4 VML requirements represent the only usages relative to sequences among all seven DOORS modules that constitute the ProjectA L4 FSW SRSs, (i.e., SRSs for OBC C&DH, OBC SuROM, OBC ACS, ACE & Uplink Boot ROM Firmware, UPL, and VML Task). Therefore, if [L3-SFS-825] was intended to be limited to the context of VML sequences, then the incoming link from [L4-SROBC-110] is invalid. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-825] The Flight Software shall allow onboard blocks to be called by sequence instruction or command. Requirements linked to [L3-SFS-825]: [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface. [L4-SROBC-110] Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations.",7/29/05ProjectA - TIM - 1922,L4 VML RTA: [L3-SFS-824] intent unclear and incomplete traceability,3,"[L3-SFS-824] has incoming links from [L4-SRVML-5] and [L4-SROBC-110]. [L4-SRVML-5] does not adequately address [L3-SFS-824]. Specifically, [L4-SRVML-5] does not indicate the minimum number of arguments supported by blocks. Although the intent of [L3-SFS-824] relative to sequences is not stated directly, usage of the term ""block"" implies an exclusively VML context, (i.e. not allocated to SCP FSW). In fact, the three instances of the term ""block"" among the L4 VML requirements represent the only usages relative to sequences among all seven DOORS modules that constitute the ProjectA L4 FSW SRSs, (i.e., SRSs for OBC C&DH, OBC SuROM, OBC ACS, ACE & Uplink Boot ROM Firmware, UPL, and VML Task). Therefore, if [L3-SFS-824] was intended to be limited to the context of VML sequences, then the incoming link from [L4-SROBC-110] is invalid. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-824] The Flight Software shall provide the capability for at least 64 arguments to be passed to a block within the sequence instruction that calls it. Requirements linked to [L3-SFS-824]: [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface. [L4-SROBC-110] Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations.",7/29/05ProjectA - TIM - 1921,L4 VML RTA: [L3-SFS-823] intent unclear and incomplete traceability,3,"[L3-SFS-823] has an incoming link from [L4-SRVML-5] and several links from the L4 OBC C&DH SCP-related requirements. [L4-SRVML-5] does not adequately address [L3-SFS-823]. Specifically, [L4-SRVML-5] is missing the key term ""parameterized"" and the supporting text that follows [L3-SFS-823] indicating blocks will accept parameters and/or return a value. Although the intent of [L3-SFS-823] relative to sequences is not stated directly, usage of the term ""blocks"" implies an exclusively VML context, (i.e. not allocated to SCP FSW). In fact, the three instances of the term ""blocks"" among the L4 VML requirements represent the only usages among all seven DOORS modules that constitute the ProjectA L4 FSW SRSs, (i.e., SRSs for OBC C&DH, OBC SuROM, OBC ACS, ACE & Uplink Boot ROM Firmware, UPL, and VML Task). Therefore, if [L3-SFS-823] was intended to be limited to the context of VML sequences, then the incoming links from [L4-SROBC-110], [L4-SROBC-111], [L4-SROBC-112], and [L4-SROBC-113] are invalid. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-823] The Flight Software shall support parameterized, reusable relative-time sequences (i.e., blocks). Blocks may accept parameters (a parameterized block), return a value (a block with a returned value), or both (a parameterized block with a returned value). Requirements linked to [L3-SFS-823]: [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface. [L4-SROBC-110] Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations. [L4-SROBC-111] Flight Software shall execute the requested RTS upon receipt of the real-time command (START_RTS directive) from either the ground or another on-board software application. [L4-SROBC-112] Flight Software shall execute commands within the RTS buffer (in position order) as the relative time-tag specified in the RTS command expires. [L4-SROBC-113] Flight Software shall interpret the RTS time-tag as the number of seconds to delay ""relative"" to the previous RTS command execution, or, in the case of the first command in a sequence, the number of seconds to delay after the receipt of the RTS execution request.",7/29/05ProjectA - TIM - 1920,L4 VML RTA: [L3-SFS-821] intent unclear and incomplete traceability,3,"The only requirement linked to [L3-SFS-821] is [L4-SRVML-4], which does not seem to satisfy the parent. Specifically, [L4-SRVML-4] specifies the support of sequence ""global"" variables, but not sequence ""local"" variables, and also does not specify the ""capability to compute and assign values."" Furthermore, since [L3-SFS-821] only makes a general reference to ""sequence,"" it is unclear whether it should have also flowed down to the L4 SCP-related requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-821] The Flight Software shall provide the capability to compute and assign values to sequence local and sequence global variables. Requirements linked to [L3-SFS-821]: [L4-SRVML-4] Sequence Variables - Through VM Task interface, VML Flight Component shall provide global variables with read/write accessibility to active sequences and spacecraft subsystems.",7/29/05ProjectA - TIM - 1919,L4 VML RTA: [L3-SFS-819] intent unclear and incomplete traceability,3,"The only requirement linked to [L3-SFS-819] is [L4-SRVML-4], which does not seem to satisfy the parent. Specifically, [L4-SRVML-4] specifies the support of sequence ""global"" variables, but not sequence ""local"" variables. Furthermore, since [L3-SFS-819] only makes a general reference to ""sequence,"" it is unclear whether it should have also flowed down to the L4 SCP-related requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-819] The Flight Software shall provide for sequence local and global variables to be set via sequence instructions. Requirements linked to [L3-SFS-819]: [L4-SRVML-4] Sequence Variables - Through VM Task interface, VML Flight Component shall provide global variables with read/write accessibility to active sequences and spacecraft subsystems.",7/29/05ProjectA - TIM - 1917,L4 VML RTA: [L3-SFS-817] intent unclear and incomplete traceability,3,"The only requirement linked to [L3-SFS-817] is [L4-SRVML-4], which does not seem to satisfy the parent. Specifically, [L4-SRVML-4] does not specify the data types supported by sequence variables. Aside from [L3-SFS-817] residing under Section 10.6.6.2 Sequence Variables, (i.e., [L3-SFS-815]), [L3-SFS-817] is not written specific to ""sequence"" variables. Conceding [L3-SFS-817] is within the context of sequence variables, still leaves uncertainty over whether [L3-SFS-817] was intended to flow down to both the L4 VML and L4 SCP-related requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-817] The Flight Software shall support variables of the following data types shall be supported: integer, unsigned integer, double, string, command, and time. Requirements linked to [L3-SFS-817]: [L4-SRVML-4] Sequence Variables - Through VM Task interface, VML Flight Component shall provide global variables with read/write accessibility to active sequences and spacecraft subsystems.",7/29/05ProjectA - TIM - 1916,L4 VML RTA: [L3-SFS-816] intent unclear and incomplete traceability,3,"[L3-SFS-816] has incoming links from [L4-SRVML-4] and [L4-SRVML-12], but these requirements do not satisfy the parent. Specifically, neither L4 requirement addresses the capability to support 200 sequence global variables. Also, since [L3-SFS-816] only makes a general reference to ""sequences,"" it is unclear whether it should have also flowed down to the L4 SCP-related requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-816] The Flight Software shall provide 200 sequence global variables for interaction between sequences and flight software applications. Requirements linked to [L3-SFS-816]: [L4-SRVML-4] Sequence Variables - Through VM Task interface, VML Flight Component shall provide global variables with read/write accessibility to active sequences and spacecraft subsystems. [L4-SRVML-12] VM Global Variable Telemetry - VM Task shall provide interface storage and transmission of the VMLFC global variables in sequences/blocks being executed.",7/29/05ProjectA - TIM - 1915,L4 VML RTA: [L3-SFS-814] intent unclear and incomplete/incorrect traceability,3,"[L3-SFS-814] has an incoming link from [L4-SRVML-3] and several links from the L4 OBC C&DH and UPL requirements. [L4-SRVML-3] does not seem directly related to [L3-SFS-814]. [L3-SFS-814] addresses the initiation of a sequence; whereas, [L4-SRVML-3] specifies the default engine states of the VMFLC upon startup of the VM Task. Furthermore, since [L3-SFS-814] only makes a general reference to ""sequence,"" it is unclear it was intended to flow down to both the L4 VML and L4 SCP-related requirements. [L2-FGI-151], the only parent of [L3-SFS-814], is specific to VML sequences, which implies [L3-SFS-814] was only intended to flow down to the L4 VML requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-814] The Flight Software shall initiate a sequence upon receipt of a sequence start command. This command will be a command or a sequence instruction. Requirements linked to [L3-SFS-814]: [L4-SRVML-3] Initial State - Upon Start up of VM Task, VML Flight Component shall default engine states to “unloaded” and “inactive”. [L4-SRUP-289] Flight Software shall stop execution of the requested RTS upon receipt of the real-time command STOP_RTS from either the ground or another on-board software application. [L4-SRUP-290] Flight Software shall enable or disable the execution of the requested RTS upon receipt of the real-time commands ENABLE_RTS or DISABLE_RTS from either the ground or another on-board software application. [L4-SRUP-291] Flight Software shall reset command counters upon receipt of Reset Counters command. [L4-SRUP-292] The Flight Software shall pause or restart execution of an RTS on command. [L4-SROBC-111] Flight Software shall execute the requested RTS upon receipt of the real-time command (START_RTS directive) from either the ground or another on-board software application. [L4-SROBC-120] RTSs shall be DISABLED upon a COLD_RESTART with the exception of RTS #1 (the Start-Up RTS). Artifact: DOORS database dated 11/2/04 Parent of [L3-SFS-814]: [L2-FGI-151] 2. The spacecraft shall initiate a VML sequence upon receipt of a sequence start command. This command will be a command or a sequence instruction.",7/29/05ProjectA - TIM - 1914,L4 VML RTA: [L3-SFS-812] not satisfied by [L4-SRVML-2],3,"The only requirement linked to [L3-SFS-812] is [L4-SRVML-2], which does not seem directly applicable to the parent. Specifically, [L4-SRVML-2] does not address the capability to enable/disable aborts of VM threads of execution Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-812] The Flight Software shall provide the capability to enable or disable aborts on any or all of the virtual machine threads of execution. Requirements linked to [L3-SFS-812]: [L4-SRVML-2] Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences.",7/29/05ProjectA - TIM - 1912,L4 VML RTA: [L3-SFS-807] intent unclear and incomplete traceability,3,"[L3-SFS-807] has incoming links from [L4-SRVML-2] and [L4-SRVML-5], but these requirements do not satisfy the parent. Specifically, neither L4 requirement addresses the capability to execute 16 relative time sequences per second. Also, since [L3-SFS-807] only makes a general reference to “relative time sequences,” it is unclear whether it should have also flowed down to the L4 SCP-related requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-807] The Flight Software shall be capable of executing 16 or more relative time sequence instructions per second. Requirements linked to [L3-SFS-807]: [L4-SRVML-2] Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences. [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface. [L4-SRUP-288] Uplink RTS' shall dispatch up to 10 commands per second.",7/29/05ProjectA - TIM - 1911,L4 VML RTA: [L3-SFS-806] intent unclear and incomplete traceability,3,"[L3-SFS-806] has an incoming link from [L4-SRVML-5] and several links from the L4 OBC C&DH and UPL requirements. [L4-SRVML-5] does not satisfy the VML Task allocations from [L3-SFS-806], since it does not specify the capability to execute relative times sequences at a 10 Hz rate. Furthermore, since [L3-SFS-806] only makes a general reference to ""relative time sequences,"" it is unclear that it was intended to flow down to both the L4 VML and L4 SCP-related requirements. [L2-FGI-141], the only parent of [L3-SFS-806], is specific to VML sequences, which implies [L3-SFS-806] was only intended to flow down to the L4 VML requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-806] The Flight Software shall provide the capability to execute consecutive sequence instructions with relative time tags of 0.1 second apart. Requirements linked to [L3-SFS-806]: [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface. [L4-SRUP-276] The Uplink FSW shall provide a Relative Time-tagged (RTS) stored command load and execution capability. [L4-SRUP-278] Flight Software shall execute commands within the RTS buffer (in position order) as the relative time-tag specified in the RTS command expires. [L4-SRUP-279] Flight Software shall interpret the RTS time-tag as the number of seconds to delay ""relative"" to the previous RTS command execution, or, in the case of the first command in a sequence, the number of seconds to delay after the receipt of the RTS execution request. [L4-SRUP-288] Uplink RTS' shall dispatch up to 10 commands per second. [L4-SROBC-110] Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations. [L4-SROBC-112] Flight Software shall execute commands within the RTS buffer (in position order) as the relative time-tag specified in the RTS command expires. [L4-SROBC-113] Flight Software shall interpret the RTS time-tag as the number of seconds to delay ""relative"" to the previous RTS command execution, or, in the case of the first command in a sequence, the number of seconds to delay after the receipt of the RTS execution request. Artifact: DOORS database dated 11/2/04 Parent of [L3-SFS-806]: [L2-FGI-141] 7. The spacecraft shall provide the capability to execute consecutive VML sequence instructions with relative time tags of 0.1 second apart.",7/29/05ProjectA - TIM - 1910,L4 VML RTA: [L3-SFS-805] intent unclear and incomplete traceability,3,"The only requirement linked to [L3-SFS-805] is [L4-SRVML-2], which does not seem directly applicable to the parent. Specifically, [L4-SRVML-2] does not specify the capability to execute consecutive ATSs at a 10 Hz rate. Furthermore, although ATSs are only used by VMFLC for ProjectA, [L3-SFS-805] does not preclude usage by SCP. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-805] The Flight Software shall provide the capability to execute consecutive sequence instructions with absolute time tags of 0.1 second apart. Requirements linked to [L3-SFS-805]: [L4-SRVML-2] Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences.",7/29/05ProjectA - TIM - 1909,L4 VML RTA: [L3-SFS-804] intent unclear and incomplete traceability,3,"[L3-SFS-804] has an incoming link from [L4-SRVML-5] and several links from the L4 OBC C&DH and UPL requirements. [L4-SRVML-5] does not satisfy the VML Task allocations from [L3-SFS-804], since it does not specify the capability to execute a relative time sequence with 0.1-second accuracy. Furthermore, since [L3-SFS-804] only makes a general reference to ""relative time sequences,"" it is unclear that it was intended to flow down to both the L4 VML and L4 SCP-related requirements. [L2-FGI-139], the only parent of [L3-SFS-804], is specific to VML sequences, which implies [L3-SFS-804] was only intended to flow down to the L4 VML requirements. . Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-804] The Flight Software shall execute relative-time sequence instructions within 0.1 second, inclusive of the indicated time relative to the preceding instruction. Requirements linked to [L3-SFS-804]: [L4-SRVML-5] On-Board Block Execution Capabilities - VM Task shall be capable, through VMLFC, to support and execute reusable-time-relative sequences (blocks) loaded on-board via VML interface. [L4-SRUP-276] The Uplink FSW shall provide a Relative Time-tagged (RTS) stored command load and execution capability. [L4-SRUP-277] Flight Software shall execute the requested RTS upon receipt of the real-time command (START_RTS directive) from either the ground or another on-board software application. [L4-SRUP-288] Uplink RTS' shall dispatch up to 10 commands per second. [L4-SROBC-110] Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations. [L4-SROBC-111] Flight Software shall execute the requested RTS upon receipt of the real-time command (START_RTS directive) from either the ground or another on-board software application. Artifact: DOORS database dated 11/2/04 Parent of [L3-SFS-804]: [L2-FGI-139] 5. The spacecraft shall execute relative-time VML sequence instructions with 0.1 second accuracy, inclusive of the indicated time relative to the preceding instruction.",7/29/05ProjectA - TIM - 1908,L4 VML RTA: [L3-SFS-803] intent unclear and incomplete traceability,3,"The only requirement linked to [L3-SFS-803] is [L4-SRVML-2], which does not seem directly applicable to the parent. Specifically, [L4-SRVML-2] does not specify the capability to execute an ATS with 0.1-second accuracy. Furthermore, although ATSs are only used by VMFLC for ProjectA, [L3-SFS-803] does not preclude usage by SCP. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-803] The Flight Software shall execute absolute-time sequence instructions within 0.1 second of the spacecraft clock, inclusive of execution of indicated absolute Flight Software clock time. This value is independent of inaccuracies in Flight Software time. Requirements linked to [L3-SFS-803]: [L4-SRVML-2] Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences.",7/29/05ProjectA - TIM - 1907,L4 VML RTA: [L3-SFS-802] intent unclear and incomplete traceability,2,"The only requirement linked to [L3-SFS-802] is [L4-SRVML-2], which does not seem directly applicable to the parent. Specifically, [L4-SRVML-2] does not specify the minimum number of concurrent sequence execution. Also, since [L3-SFS-802] only makes a general reference to “sequence,” it is unclear whether it should have also flowed down to the L4 SCP-related requirements. Note that the VML SRS Rev. ""-"" version of L4-SRVML-2 (previously idenitified in RMS as VM001.1) specified that ""The VMLFC shall be configured with 12 (twelve) Virtual Machines, capable of executing on-board blocks and sequences."" This version of the requirement was also presented at the ProjectA Project CDR in Book 2, page 15 of the Flight Software presentation as a Driving Requirement. TIM 1158 documents the inconsistency between the RMS version of the requirement (i.e., 10 Virtual Machines) and the SRS Rev. B version of the requirement (i.e., 12 Virtual Machines). This issue brings into question the correctness of the requirements currently in the DOORS database. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-802] The Flight Software shall provide for at least 12 concurrent threads of sequence execution. Requirements linked to [L3-SFS-802]: [L4-SRVML-2] Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences.",7/29/05ProjectA - TIM - 1906,L4 VML RTA: [L3-SFS-801] intent unclear and incomplete traceability,3,"The only requirement linked to [L3-SFS-801] is [L4-SRVML-3], which does not seem applicable to the parent. Specifically, [L4-SRVML-3] does not address the capability for sequences to initiate other sequences. Also, since [L3-SFS-801] only makes a general reference to “sequences,” it is unclear whether it should have also flowed down to the L4 SCP-related requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-801] The Flight Software shall provide for initiation of sequences by other sequences. Requirements linked to [L3-SFS-801]: [L4-SRVML-3] Initial State - Upon Start up of VM Task, VML Flight Component shall default engine states to “unloaded” and “inactive”.",7/29/05ProjectA - TIM - 1905,L4 VML RTA: [L3-SFS-800] not satisfied by [L4-SRVML-2],3,"The only requirement linked to [L3-SFS-800] is [L4-SRVML-2], which does not seem directly applicable to the parent. Specifically, [L4-SRVML-2] does not specify the maximum length of a VML instruction. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-800] The Flight Software shall support VM sequences containing of up to 4000 instructions in length. Requirements linked to [L3-SFS-800]: [L4-SRVML-2] Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences.",7/29/05ProjectA - TIM - 1904,L4 VML RTA: [L4-SRVML-18] intent unclear with respect to flow-down of [L3-SFS-793],3,"[L4-SRVML-18] is the only L4 VML requirement linked to [L3-SFS-793]. [L4-SRVML-18] addresses the capability to accept sequence loads; however, it is unclear whether the intent of the phrase ""without interrupting a thread of execution"" is the responsibility of the VM task or VMLFC. [L4-SRVML-18] also implies that the VM Task provides the VMLFC with the capability to accept sequence loads. Presumably, the VM Task and VMLFC are separate modules of the FSW; however, it is difficult to conceive how one module could provide another module with the ""capability…to accept."" Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-793] The Flight Software shall accept uplink of sequence loads while an onboard sequence is executing. Requirements linked to [L3-SFS-793]: [L4-SRVML-18] VM Sequence Loading - VM Task shall provide capability for VMLFC to accept sequence loads without interrupting a thread of execution. [L4-SROBC-177] Flight Software shall maintain a special command for VML memory load when the command address matches F1xxyyyy hexadecimal where xx shall be the VM file buffer number, and yyyy shall be the offset address for VM files.",7/29/05ProjectA - TIM - 1903,L4 VML RTA: [L3-SFS-792] intent unclear and possible incomplete traceability,3,"The intent of [L3-SFS-792] is not entirely clear, making it difficult to assess whether the requirement is satisfied by its incoming links. The intent may be for ground to be able to preempt any running sequence. On the other hand, the intent may be to allow a ground command to run concurrently with any VML and/or SCP running sequence. [L3-SFS-792] has one incoming links from the L4 VML requirements and several incoming links from the L4 UPL requirements associated with SCP. Although the incoming link from [L4-SRVML-2] may be valid, its connection to [L3-SFS-792] does not seem obvious. Also, since [L3-SFS-792] only makes a general reference to “onboard sequence,” it is unclear whether it should have flowed down to the L4 SCP-related requirements and/or the L4 VML requirements. Consequently, links from the L4 SCP-related requirements to [L3-SFS-807] may be missing or the existing links from [L4-SRUP-289], [L4-SRUP-290], [L4-SRUP-291], and [L4-SRUP-292] may be invalid and/or the links from the L4 VML requirements may be missing or the existing link from [L4-SRVML-2] may be invalid. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-792] The Flight Software shall allow execution of uplinked commands while an onboard sequence is executing. Requirements linked to [L3-SFS-792]: [L4-SRVML-2] Sequence Execution Capabilities - VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences. [L4-SRUP-289] Flight Software shall stop execution of the requested RTS upon receipt of the real-time command STOP_RTS from either the ground or another on-board software application. [L4-SRUP-290] Flight Software shall enable or disable the execution of the requested RTS upon receipt of the real-time commands ENABLE_RTS or DISABLE_RTS from either the ground or another on-board software application. [L4-SRUP-291] Flight Software shall reset command counters upon receipt of Reset Counters command. [L4-SRUP-292] The Flight Software shall pause or restart execution of an RTS on command.",7/29/05ProjectA - TIM - 1901,L4 VML RTA: [L3-SFS-768] flow-down and traceability incomplete relative to L4 VML SRS,3,"[L4-SRVML-16] is the only L4 VML linked to [L3-SFS-768]. [L4-SRVML-16] seems to sufficiently address conformance with the ""command"" specifications documented in the CTD; however, there are no L4 VML requirements linked to [L3-SFS-768], nor were any found that address conformance with the ""telemetry"" specifications documented by the CTD. Therefore, [L3-SFS-768] has not been flowed sufficiently to the L4 VML requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-768] The Flight Software shall conform to the Command and Telemetry formats and protocols documented in the command and Telemetry Dictionary (CTD). Requirements linked to [L3-SFS-768]: [L4-SRVML-16] Spacecraft-VMLFC Command Execution - VM Task shall provide command-handling interface capabilities to recognize all commands in Command Database. Other requirements linked to [L3-SFS-747]: [L4-SRUP-119], [L4-SRUP-127], [L4-SRUP-128], [L4-SRUP-130], [L4-SRUP-132], [L4-SRUP-133], [L4-SRUP-134], [L4-SRUP-135], [L4-SRUP-136], [L4-SRUP-137], [L4-SRUP-165], [L4-SRUP-166], [L4-SRUP-167], [L4-SRUP-168], [L4-SRUP-169], [L4-SRUP-170], [L4-SRUP-171], [L4-SRUP-172], [L4-SRUP-173], [L4-SRUP-174], [L4-SRUP-175], [L4-SRUP-179], [L4-SRUP-180], [L4-SRUP-182], [L4-SRUP-183], [L4-SRUP-184], [L4-SRUP-185], [L4-SRUP-186], [L4-SRUP-187], [L4-SRUP-188], [L4-SROBC-42], [L4-SROBC-43], [L4-SROBC-44], [L4-SROBC-45], [L4-SROBC-46], [L4-SROBC-153], [L4-SROBC-169]",7/29/05ProjectA - TIM - 1900,L4 VML RTA: [L4-SRVML-22] intent unclear with respect to flow-down of [L3-SFS-751],3,"According to the 7/5/05 DOORS database, [L3-SFS-751] has (15) incoming links from the L4 requirements. [L4-SRVML-22], which is the only incoming link from the L4 VML requirements, seems directly applicable to [L3-SFS-751]. However, the wording of [L4-SRVML-22] makes it difficult to assess whether [L3-SFS-751] was sufficiently flowed down to L4 VML requirements. Specifically, the last part of [L4-SRVML-22], which states, ""to be logged into Event Handler task with logging capabilities,"" seems unintelligible. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-751] The Flight Software shall log major events as reported by subsystem tasks for later retransmit Requirements linked to [L3-SFS-751]: [L4-SRVML-22] VM Event Handler - VM Task shall provide interface for VMLFC internal Event Reports to be logged into Event Handler task with logging capabilities. Other requirements linked to [L3-SFS-747]: [L4-SRUP-213], [L4-SRUP-214], [L4-SRUP-215], [L4-SRUP-219], [L4-SRUP-220], [L4-SRUP-221], [L4-SROBC-18], [L4-SROBC-30], [L4-SROBC-31], [L4-SROBC-320], [L4-SROBC-321], [L4-SROBC-322], [L4-SROBC-323], [L4-SROBC-324]",7/29/05ProjectA - TIM - 1899,L4 VML RTA: [L3-SFS-748] intent unclear and incomplete traceability,3,"The only L4 VML requirement linked to [L3-SFS-748] is [L4-SRVML-15], which does not address the specific types of commands (""relative"" and ""absolute"") as specified by the parent. Also, since [L3-SFS-748] specifies both types of commands, it is unclear whether it was intended to flow down to the L4 SCP-related requirements. If it was, then [L3-SFS-748] seems to be missing a link from L4 OBC C&DH requirements that corresponds to [L4-SRUP-276]. The only incoming links for [L3-SFS-748] from the L4 OBC C&DH are [L4-SROBC-112] and [L4-SROBC-113]. Although these requirements probably represent valid derived links, they are both specific to the processing and handling of RTSs, rather than directly specifying support of the RTSs themselves. Therefore, [L3-SFS-748] does not seemed satisfied by the L4 requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-748] The Flight Software shall support time tagged commands (relative and absolute) for all subsystem functions and instruments Requirements linked to [L3-SFS-748]: [L4-SRVML-15] VM Command Handling - VM Task shall provide command-handling interface capabilities to receive scheduled and unscheduled commands addressed to VMLFC as well as on-board subsystems. [L4-SRVML-27] Absolute Time Command - The Flight Software shall not execute an absolute time command if the desired time is earlier than the current Flight Software time by a threshold interval. The Flight Software shall report this error in telemetry and terminate the sequence. The threshold interval shall be ground-prescribed, but nominally 2 seconds. [L4-SRUP-276] The Uplink FSW shall provide a Relative Time-tagged (RTS) stored command load and execution capability. [L4-SRUP-278] Flight Software shall execute commands within the RTS buffer (in position order) as the relative time-tag specified in the RTS command expires. [L4-SRUP-279] Flight Software shall interpret the RTS time-tag as the number of seconds to delay ""relative"" to the previous RTS command execution, or, in the case of the first command in a sequence, the number of seconds to delay after the receipt of the RTS execution request. [L4-SROBC-110] Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations. [L4-SROBC-112] Flight Software shall execute commands within the RTS buffer (in position order) as the relative time-tag specified in the RTS command expires.",7/29/05ProjectA - TIM - 1898,L4 VML RTA: [L4-SRVML-9] intent unclear with respect to flow-down of [L3-SFS-747],3,"According to the 7/5/05 DOORS database, (40) L4 requirements are linked to [L3-SFS-747] - (4) of which are from the L4 VML requirements. [L4-SRVML-9] seems like the most applicable requirement linked from the L4 VML requirements to [L3-SFS-747]. However, the wording of [L4-SRVML-9] makes it difficult to determine the intent of this requirement. Also, it is not clear whether maintaining counters, as stipulated by [L3-SFS-747], is consistent with providing ""proper interface to accept and reject commands."" Therefore, [L3-SFS-747] is not clearly flowed down to the L4 VML requirements. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-747] The Flight Software shall provide command accept and reject counters for subsystem tasks and interfaces. Requirements linked to [L3-SFS-747]: [L4-SRVML-9] VM Task Health & Safety - VM Task shall provide proper interface to accept and reject commands and housekeeping packet generation. [L4-SRVML-14] VM Command Interface - VM Task shall provide capability to interface with the Flight Software through Command interface. [L4-SRVML-15] VM Command Handling - VM Task shall provide command-handling interface capabilities to receive scheduled and unscheduled commands addressed to VMLFC as well as on-board subsystems. [L4-SRVML-16] Spacecraft-VMLFC Command Execution - VM Task shall provide command-handling interface capabilities to recognize all commands in Command Database. Other requirements linked to [L3-SFS-747]: [L4-SROAC-21], [L4-SROAC-22], [L4-SROAC-23], [L4-SROAC-25], [L4-SROAC-26], [L4-SROAC-27], [L4-SROAC-29], [L4-SRUP-7], [L4-SRUP-8], [L4-SRUP-25], [L4-SRUP-28], [L4-SRUP-29], [L4-SRUP-121], [L4-SRUP-122], [L4-SRUP-129], [L4-SRUP-148], [L4-SRUP-150], [L4-SRUP-180], [L4-SRUP-295], [L4-SRUP-296], [L4-SRUP-310], [L4-SROBC-42], [L4-SROBC-45], [L4-SROBC-86], [L4-SROBC-114], [L4-SROBC-116], [L4-SROBC-117], [L4-SROBC-118], [L4-SROBC-119], [L4-SROBC-125], [L4-SROBC-172], [L4-SROBC-173], [L4-SROBC-174], [L4-SROBC-175], [L4-SROBC-210], [L4-SROBC-318]",7/29/05ProjectA - TIM - 1897,L4 VML RTA: [L3-SFS-724] traceability incomplete and incorrect,3,"[L4-SRVML-22] is linked to [L3-SFS-724], but does not seem directly associated with the parent. The remaining links are from [L4-SRVML-7] and [L4-SRVML-8] to [L3-SFS-724]. The link from [L4-SRVML-7] and, to a lesser extent, the link from [L4-SRVML-8] appear valid; however, these requirements do not sufficiently address [L3-SFS-724]. Also, [L3-SFS-24] is the parent of [L3-SFS-724]; however, the parent is more specific than the child, and as written, the two requirements are inconsistent. [L3-SFS-724] specifies controlling Flight System (FS) events to within 5 minutes; whereas, [L3-SFS-24] specifies 5 seconds, but is limited to science phases. Referenced Requirements: Artifact: DOORS database dated 7/5/05 [L3-SFS-724] The Flight Software shall support control the UTC-relative execution time of a Flight System event to within 5 minutes. Parent of [L3-SFS-724]: [L3-SFS-24] The Flight System shall support control of the UTC-relative execution time of a Flight System event to within 5 seconds during science phases. Note: Allocations of this requirement are in the FGICD. Requirements linked to [L3-SFS-724]: [L4-SRVML-7] VM Task Time Management - VM Task shall provide interface for time synchronization between VM Engines and spacecraft. [L4-SRVML-8] VM Re-start Capability - VM Task shall provide proper interface for initializing VML Flight Component Engines and trigger default configuration. [L4-SRVML-22] VM Event Handler - VM Task shall provide interface for VMLFC internal Event Reports to be logged into Event Handler task with logging capabilities.",7/29/05ProjectA - TIM - 1896,"Uplink Test Script, Requirements not Traced to any Test Scripts",2,"The attached document contains a table of 120 Uplink SRS requirements, which have a verification method of ""Test"" listed in the 07/05/05 DOORS database but are not traced to any test scripts",7/28/05ProjectA - TIM - 1895,"Uplink Test Script, ul_CTE_ccw_csw_test, Does not Properly Test L4-SRUP-111 or L4-SRUP-116",2,"Requirements L4-SRUP-111 and L4-SRUP-116 are listed in DOORS traced to the test script ul_CTE_ccw_csw_test; however, the requirements do not appear to be tested in this script. The test script does not list these requirements and test steps could not be found that relate to these capabilities. L4-SRUP-111 : SRC-UPC002.7 - Function Code 66 - Action: Initiate a memory dump L4-SRUP-116 : SRC-UPC002.12 - Function Code 6B - Action: Load the specified dataset into the specified location in memory Heading excerpt from test script: ; Title: ul_ccw_csw_test.scr ; ; Purpose: Functional testing script for Uplink/OBC interface. ; Specifically: ; 1) CCW discrete lines from the ULC to the OBC ; (AMBI_PIDS). The CCW values determine how (which ; mode) the OBC boots. ; 2) CSW discrete lines from the OBC to the ULC ; (QHSS_PIDS). The CSW values indicate the ; success/failure of various boot stages of the OBC. ; 3) Watchdog timer expired from the OBC to the ULC ; (LIO_PID(0)). ; 4) Heartbeat from the OBC to the ULC (LIO_PID(1)) ; ; The following requirements are tested: ;",7/28/05ProjectA - TIM - 1894,"Uplink Test Script, ul_hlp_command_test, Does not Properly Test L4-SRUP-56 or L4-SRUP-104",2,"Requirements L4-SRUP-56 and L4-SRUP-104 are listed in the test script ul_hlp_command_test and DOORS also traces verification to this script; however, the requirements do not appear to be tested properly due to the differences noted below. According to the header in the test script, ul_hlp_command_test.scr, the script has not been updated specifically to verify ProjectA requirements. 1) L4-SRUP-56 : OV4-UPC007 - The Uplink FSW shall write the HLP command field from the following Standard PCC commands to the HLP hardware if it is non-zero: This requirement is followed by the subrequirements L4-SRUP-57 / OV4-UPC007.A1 - to - L4-SRUP-99 / OV4-UPC007.B15, which are a list of commands for which L4-SRUP-56 applies. Excerpt from test script; note the difference in the requirement definition: ; OV4-UPC007 The UPL shall write the HLP command field in a ; Standard PCC command to the HLP hardware if it is ; non-zero. It would be expected that the subrequirements (commands) would all be tested; however, the commands are not tested in this script. 2) L4-SRUP-104 : SRC-UPC002 - The Uplink FSW shall process the function codes in a Local PCC command in accordance with the following: This requirement is followed by the subrequirements L4-SRUP-105 / SRC-UPC002.1- to - L4-SRUP-118 / SRC-UPC002.14, which are a list of commands for which L4-SRUP-104 applies Excerpt from test script; Note that this Definition does not agree with the one in the script and the testing does not appear to cover the new definition ; SRC-UPC002 The UPL shall write the contents of the HLP Extended ; Code Field into a hardware defined I/O address prior ; to writing the HLP command into the HLP Control ; register if the HLP command is HLP_GRPA_2.",7/28/05ProjectA - TIM - 1893,"Uplink Test Script, ul_ccw_csw_test, Does not Properly Test L4-SRUP-20",2,"Requirement L4-SRUP-20 is listed in the test script ul_ccw_csw_test and DOORS also traces verification to this script; however, it does not appear to be tested. L4-SRUP-20 : OV4-UCP008 - The Uplink FSW shall verify that the primary header contains a valid Application Identifier (APID). The script does not explain how this requirement will be verified nor specific pass/fail criteria for it. It would be expected that the test would cover a variety of valid and invalid APIDs; however, it does not appear that this occurs in this test script.",7/28/05ProjectA - TIM - 1892,"Uplink Test Script, ul_telemetry_gatherer_test, Needs Updating From SORCE References to ProjectA Values",2,"The script ul_telemetry_gatherer_test.scr needs updating. This script still refers to SORCE values for verification and ProjectA has different values for the following requirements: 1) L4-SRUP-167 : GLX-UTG002 - The Uplink FSW shall initialize the VCDU Release Rate to a default rate of 360 seconds per VCDU upon boot up. corresponding script excerpt ; GLX-UTG002 The UPL shall initialize the VCDU Release Rate to a ; default rate of 5 seconds per VCDU upon boot up. … ; Verify the default VCDU release rate wait ul_vcdu_rate = 5 2) L4-SRUP-168 : GLX-UTG003 - The Uplink FSW shall provide the capability for the ground to load the VCDU Release Rate with integer value within the range of 0-65,535 (seconds per VCDU, where 0 halts transfer to the Downlink Card). corresponding script excerpt ; GLX-UTG003 The UPL shall provide the capability for the ground to ; load the VCDU Release Rate with an odd integer value ; within the range of 1-31 (seconds per VCDU.) 3) L4-SRUP-174 : SRC-UTG003 - The Uplink FSW shall generate VCDU's with a spacecraft ID of CB hex. corresponding script excerpt SRC-UTG003 The UPL shall generate VCDU's with a spacecraft ID of ; 0A3H. 4) L4-SRUP-175 : SRC-UTG004 - The Uplink FSW shall generate VCDU's with a Reed-Solomon code of DDC hex. corresponding script excerpt SRC-UTG004 The UPL shall generate VCDU's with a Reed-Solomon code ; of 0626BH.",7/28/05ProjectA - TIM - 1891,Unused Uplink Test Scripts,3,"Two uplink test scripts are found in the Build 4.0 and 5.0 folders, which are not listed in either the Build 4.0 or 5.0 Test Procedure or the 07/05/05 DOORS database. The folder is configuration controlled and should not contain items that are not in use. ul_command_processor_test.scr This script has a number of requirements listed in it and some of them are included in the DOORS database; however, the DOORS database does not have links to this script. ul_cop1_checkout.scr This script has one requirement cited in it; however, the requirement is not in the DOORS database.",7/27/05ProjectA - TIM - 1890,Missing Uplink Test Scripts in Build 4.0 and 5.0,3,"Three scripts are listed in the Build 4 test procedure and have links in the 07/05/05 DOORS database, but were not part of the build 4.0 or 5.0 test script folders. The following scripts are missing; therefore, it is not possible to verify that the linked requirements are tested: ul_sys_tbl_test, ul_scp_tbl_test, ul_tbl_load_abort_test",7/27/05ProjectA - TIM - 1889,Incomplete Verification of ACS FDC Requirements by the Build 5 ACS Test Procedures,2,"A. This TIM presents the issues identified through analysis of the following artifacts: 1. OBC ACS Flight Software Requirements Specification, S912-SRS4930, DOORS 7-5-05 data base. 2. ProjectA OBC ACS Flight Test Procedures, S912-TP4930, Revision–B, Section 11.2 ACS FDC Test 3. ProjectA_acs_fdc_test_main_scr () (and all scripts invoked by _main.scr) for Build 5.0 4. ProjectA Attitude Control Subsystem Performance Specification, S912-PF4610, Revision-C 5. ACS Flight Software Requirements Specification, S912-SRS4930, Rev-B B. Sub-Issues (Note: the TIM recommendation field provides IV&V suggested resolutions for each of the following sub-issues) Sub-issue #1: The ACS test procedure does not map individual ACS SRS requirements to specific test points: 38 SRS requirements are mapped to the entire test script and there is no further linking of requirements to test points in the script. . Sub-issue #2: Document 4, Section 11.2, row 6, states: (1) “Action: Review event log, note any unexpected event messages, and note any unexpected results and (2) “Expected Results: The basic functionality should be verified against ACS Performance Spec (S912-PF4610)”. The two statements seem inconsistent as the first focuses on the “event log and noting unexpected messages/results” while the second seems to imply “use the unexpected messages/results to verify basic functionality”. Also, it is unclear why the ACS Performance Specification (ACSPS) is referenced as the document for providing the basis for “expected results” as the Requirement ID column only references ACS SRS requirements (it is noted that several of the linked SRS requirements point to the ACSPS for FDIR type requirements). Sub-issue #3: In most cases the procedure and the scripts do not identify specific pass/fail criteria other than the “wait statements” in the script. These are designed to check whether certain events have happened (e.g., a TMON indicates a fault). Based on the scripts, the test conductor is observing screens that contain TLM, etc. and data is collected for post test analysis (e.g., plots); however, there is no indication of how this data is to be screened for pass/fail. Sub-issue #4: Due to Sub-issue #1 there is little guidance as to where a specific requirement is verified in the test scripts. An analysis of the ProjectA_acs_fdc_test_main.scr shows that few of the linked SRS requirements are verified by the script. The attachment to this TIM identifies: (1) the linked SRS requirements from the OBC ACS Flight Software Requirements Specification, S912-SRS4930 Revision-B; (2) the companion SRS requirements from the 7-5-05 DOORS version and (3) a statement as to whether IV&V could find evidence that the linked test actually verifies the requirement. While the Build 5 ACS FDC Test script exercises many functions associated with ACS FDIR related functions, it seems to be insufficiently focused in scope to verify the detailed ACS SRS requirements.",7/27/05ProjectA - TIM - 1888,Inconsistent specification of the Verification Method for Uplink Software Requirements in DOORS and the Test Scripts,2,"The following requirements list ""Test"" as the verification method in the DOORS database (07/05/05); however, the test scripts state that the requirements are verified through Code Inspection. The IV&V team has no issue with verification by inspection. However, if the intent is to test the functionality specified in the requirements then, either the referenced test scripts will need to be modified to include steps to verify the requirements or new test scripts will need to be created. Note that the four test scripts referenced in this TIM have not been updated specifically for the ProjectA Project. Specifically, test script ul_hss1_test.scr includes references to two requirements from GALEX that are not applicable to ProjectA. 1. Requirements included in ul_hss1_test.scr: L4-SRUP-128 : OV4-UHS002 - The Uplink FSW shall reject any HSS1 message experiencing a hardware error. L4-SRUP-140 : OV4-UHS021 - The Uplink FSW shall log an HSS1 error if a GSC command is requested and none are available for transmission. L4-SRUP-141 : OV4-UHS022 - The Uplink FSW shall reset the Uplink side of the HSS1 interface when signaled by the OBC through a discrete line that a hang condition exists by performing the following actions: L4-SRUP-142 : OV4-UHS022.1 - Drop all GSC commands held by the Uplink L4-SRUP-143 : OV4-UHS022.2 - Abort any HSS1 transmissions in progress L4-SRUP-144 : OV4-UHS022.3 - Clear the GSC command interrupt line; L4-SRUP-145 : OV4-UHS023 - The Uplink FSW shall log the HSS1 interface hang condition as an HSS1 error. L4-SRUP-146 : OV4-UHS024 - The Uplink FSW shall log each dropped GSC command as a GSC command error. 2. Requirements included in ul_scsa_test.scr: L4-SRUP-151 : OV4-USC004 - The Uplink FSW shall maintain an error status describing the reason for the rejection of the last rejected SCSA message. L4-SRUP-152 : OV4-USC006 - The Uplink FSW shall abort and log as an SCSA error any VCDU transmission that has not completed within 100 milliseconds (ms). L4-SRUP-154 : OV4-USC012 - The Uplink FSW shall abort and log as an SCSA error any Downlink command transmission that has not completed within 100 microseconds. L4-SRUP-149 : OV4-USC002 - The Uplink FSW shall log any SCSA message experiencing a hardware error as an SCSA error. L4-SRUP-150 : OV4-USC003 - The Uplink FSW shall maintain a count of rejected SCSA messages. 3. Requirement included in ul_watchdog_monitor_test.scr: L4-SRUP-162 : SRC-UWM001 - The Uplink FSW shall monitor the OBC Watchdog timer at a frequency of once per second. 4. Requirements included in ul_master_clock.scr: L4-SRUP-191 : OV4-UMC003 - The Uplink FSW shall support an open loop mode of operation by loading a specified hardware divider with the number of Master Clock ticks specified to equal one second. L4-SRUP-195 : OV4-UMC016 - The Uplink FSW shall calculate an integer 1 Hz signal timing count, segmenting the count into evenly spaced integer values and applying these to every one of the 2 KHz intervals within one second. Note that L4-SRUP-191 and L4-SRUP-195 are not linked to ul_master_clock.scr in the 07/05/05 DOORS Database.",7/27/05ProjectA - TIM - 1887,"Uplink Software Test 9, Uplink Telemetry and Status Functional Test, May Not Fully Verify the Linked Uplink SRS Requirements",2,"Uplink Software Test 9, Uplink Telemetry and Status Functional Test, is mapped to a set of Uplink SRS requirements; however, these requirements are not called out in the test script and it did not appear to IV&V that any of these requirements were tested. The test procedure states that this test verifies uplink card functionality for telemetry and status. The test procedure lists the following step: Record the Pass/Fail status for script. Ability to receive telemetry and status from uplink card. (pass or fail) The test script does not refer to the requirements and the script itself is difficult to relate to the requirements. For Example: msg ""Test 2:"" msg ""Enable monitor 0 with UTS disabled,"" msg ""Insure that it doesn't trigger"" The requirements traced to this test script are as follows: L4-SRUP-246 : DWN-TS004 - The Uplink FSW shall leave empty monitors, and responses disabled. L4-SRUP-248 : DWN-TS006 - The Uplink FSW telemetry monitor logic shall provide telemetry indicating current state and evaluation result for each monitor: L4-SRUP-249 : DWN-TS006.1 - State (enable/disable) - enabled default state, command enable/disable. L4-SRUP-250 : DWN-TS006.2 - Last check result (fail/pass) - updated every cycle based on telemetry. L4-SRUP-254 : DWN-TS006.4 - Fail flag status - set if check fails for persistnece, clear by command. L4-SRUP-261 : DWN-TS009 - The Uplink FSW telemetry monitors (individual or all) shall be enabled or disabled by command. L4-SRUP-263 : DWN-TS011 - The Uplink FSW telemetry monitors (individual or all) shall be reset to their default states by command (enabled, persistence reset, flag cleared). L4-SRUP-268 : DWN-TS014.2 - All (enabled) telemetry monitors evaluated. L4-SRUP-269 : DWN-TS014.3 - All (enabled) fault monitors evaluated until a fault is detected and a response is initiated.",7/27/05ProjectA - TIM - 1886,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.7 and fsw_test_03 inconsistent with RVM,2,"The EngCntrl SRS and fsw_test_03 requirement text for the ""BFAULTPRT"" does not agree with the RVM. The EngCntrl SRS and the test script text discuss the requirement in terms of a BFAULTPRT command, and the RVM discusses an XFAULTPRT command. The command name is different in the versions of the requirement text. Also, the EngCntrl SRS requirement for the ""BFAULTPRT "" is numbered 3.4.7.7, the test script requirement for ""BFAULTPRT"" is numbered 3.4.6.7, and the RVM requirement for the ""XFAULTPRT "" is numbered 3.4.6.7. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.7: BFAULTPRT The BFAULTPRT command is used to enable and disable various fault protection function of the Bootloader Software. Referenced Test Script Requirement 3.4.6.7: BFAULTPRT The BFAULTPRT command is used to enable and disable various fault protection function of the Bootloader Software. Referenced RVM Requirement 3.4.6.7: XFAULTPRT The XFAULTPRT command is used to enable and disable various fault protection function of the Bootloader Software.",7/15/05ProjectA - TIM - 1885,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.5 and fsw_test_03 inconsistent with RVM,2,"The EngCntrl SRS and fsw_test_03 requirement text for the ""BPEEKMEM"" does not agree with the RVM. The EngCntrl SRS and the test script text discuss the requirement in terms of a BPEEKMEM command, and the RVM discusses an XPEEKMEM command. The command name is different in the versions of the requirement text. Also, the EngCntrl SRS requirement for the ""BPEEKMEM "" is numbered 3.4.7.5, the test script requirement for ""BPEEKMEM"" is numbered 3.4.6.5, and the RVM requirement for the ""XPEEKMEM "" is numbered 3.4.6.5. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.5: BPEEKMEM The BPEEKMEM command is used to specify the start address to be used when the Telemetry Update task reports the memory peek data. Referenced Test Script Requirement 3.4.6.5: BPEEKMEM The BPEEKMEM command is used to specify the start address to be used when the Telemetry Update task reports the memory peek data. Referenced RVM Requirement 3.4.6.5: XPEEKMEM The XPEEKMEM command is used to specify the start address to be used when the Telemetry Update task reports the memory peek data.",7/15/05ProjectA - TIM - 1884,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.4.3 and fsw_test_03 inconsistent with RVM,2,"The EngCntrl SRS and fsw_test_03 requirement text for the ""Checksum Calculation In Progress Check"" does not agree with the RVM. The EngCntrl SRS and the test script text discuss the requirement in terms of an BPOKEMEM command, and the RVM discusses an XPOKEMEM command. The command name is different in the versions of the requirement text. Also, the EngCntrl SRS requirement for the ""BPOKEMEM"" is numbered 3.4.7.4.3 and the RVM and test script requirement for ""BPOKEMEM"" is numbered 3.4.6.4.3. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.4.3: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a BPOKEMEM command is received and the command will be ignored. Referenced Test Script Requirement 3.4.6.4.3: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a BPOKEMEM command is received and the command will be ignored. Referenced RVM Requirement 3.4.6.4.3: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XPOKEMEM command is received and the command will be ignored.",7/15/05ProjectA - TIM - 1883,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.4.1 and fsw_test_03 inconsistent with RVM,2,"The EngCntrl SRS and fsw_test_03 requirement text for the ""Data Type Verification"" does not agree with the RVM. The EngCntrl SRS and the test script text discuss the requirement in terms of an BPOKEMEM command, and the RVM discusses an XPOKEMEM command. The command name is different in the versions of the requirement text. Also, the EngCntrl SRS requirement for the ""BPOKEMEM"" is numbered 3.4.7.4.1 and the RVM and test script requirement for ""BPOKEMEM"" is numbered 3.4.6.4.1. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.4.1: Data Type Verification The Bootloader software shall verify the BPOKEMEM command specifies a valid data type. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the data type is not valid and the command will be ignored. Referenced Test Script Requirement 3.4.6.4.1: Data Type Verification The Bootloader software shall verify the BPOKEMEM command specifies a valid data type. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the data type is not valid and the command will be ignored. Referenced RVM Requirement 3.4.6.4.1: Data Type Verification The Bootloader software shall verify the XPOKEMEM command specifies a valid data type. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the data type is not valid and the command will be ignored.",7/15/05ProjectA - TIM - 1882,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.4 and fsw_test_03 inconsistent with RVM,2,"The EngCntrl SRS and fsw_test_03 requirement text for the ""BPOKEMEM"" does not agree with the RVM. The EngCntrl SRS and the test script text discuss the requirement in terms of an BPOKEMEM command, and the RVM discusses an XPOKEMEM command. The command name is different in the versions of the requirement text. Also, the EngCntrl SRS requirement for the ""BPOKEMEM"" is numbered 3.4.7.4 and the RVM and test script requirement for ""BPOKEMEM"" is numbered 3.4.6.4. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.4: BPOKEMEM The BPOKEMEM command is used to write a data value into a specified memory location in the CPU address space. Referenced Test Script Requirement 3.4.6.4: BPOKEMEM The BPOKEMEM command is used to write a data value into a specified memory location in the CPU address space. Referenced RVM Requirement 3.4.6.4: BPOKEMEM The XPOKEMEM command is used to write a data value into a specified memory location in the CPU address space.",7/15/05ProjectA - TIM - 1881,EngCntrl Test Scripts: EngCntrl SRS v1.2 and fsw_test_01 inconsistent with RVM for requirement 3.3.5.4,2,"The EngCntrl SRS and the requirement text included in the RVM and fsw_test_01 for EngCntrl SRS Requirement 3.3.5.4 do not agree . The SRS and the test script text for the ""1553 Command Sub-addresses"" are different than the RVM in that they discuss ""writes to subaddresses 2"" and the RVM discusses ""writes to sub-addresses 2 and 9"". This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.3.5.4: 1553 Command Sub-addresses The Bootloader Software shall configure the 1553 interface to provide 32 word buffers to receive host spacecraft writes to subaddresses 2. Referenced Test Script Requirement 3.3.5.4: 1553 Command Sub-addresses The Bootloader Software shall configure the 1553 interface to provide 32 word buffers to receive host spacecraft writes to sub-addresses 2. Referenced RVM Requirement 3.3.5.4: 1553 Command Sub-addresses The Bootloader Software shall configure the 1553 interface to provide 32 word buffers to receive host spacecraft writes to sub-addresses 2 and 9.",7/13/05ProjectA - TIM - 1880,"EngCntrl Test Scripts: EngCntrl SRS v1.2 , fsw_test_01, and RVM all inconsistent with each other for requirement 3.3.5.5",2,"The EngCntrl SRS and fsw_test_01 requirement text do not agree with the RVM text for requirement 3.3.5.5. The SRS and fsw_test_01 states the reads are ""from sub-addresses 2 through 8"", but the RVM states the reads are ""from sub-addresses 2 through 9"". All three requirements state that there are eight 32-word buffers; therefore assuming one 32-word buffer is required for each subaddress, it would appear as though the RVM is the correct requirement since subaddresses 2 though 9 would equal eight addresses and subaddresses 2 through 8 would only equal seven addresses. However, the EngCntrl Code and EngCntrl-SC ICD indicate that only seven buffers are used for subaddresses 2 through 8. There appears to be a CM process issue, based on the data that indicates changes were made in 3 different places (SRS, RVM, and Test Scripts) but not roled back into the other sources. This leads to the questions as to whether the approved SRS requirement was implemented and verified. Referenced EngCntrl SRS Requirement 3.3.5.5: 1553 Telemetry Sub-addresses The Bootloader Software shall configure the 1553 interface to support eight 32-word buffers to support host spacecraft reads from sub-addresses 2 through 8. Referenced Test Script Requirement 3.3.5.5: 1553 Telemetry Subaddresses The Bootloader Software shall configure the 1553 interface to support eight 32-word buffers to support host spacecraft reads from subaddresses 2 through 8. RVM Requirement 3.3.5.5: 1553 Telemetry Sub-addresses The Bootloader Software shall configure the 1553 interface to support eight 32-word buffers to support host spacecraft reads from subaddresses 2 through 9. Artifact: ProjectA - Digital Control Interface Unit (EngCntrl) Code File: ..\EngCntrl-fsw-100\src\SH_DEFINE.H 172:#define COMMAND_SUBADDRESS 2 173:#define CIRCULAR_SUBADDRESS 2 174:#define PACKET_0_SUBADDRESS 3 175:#define PACKET_1_SUBADDRESS 4 176:#define PACKET_2_SUBADDRESS 5 177:#define PACKET_3_SUBADDRESS 6 178:#define PACKET_4_SUBADDRESS 7 179:#define PACKET_5_SUBADDRESS 8 180:#define TIME_BROADCAST_SUBADDRESS 24 181:#define DATA_WRAPAROUND_SUBADDRESS 30 File: ..\EngCntrl-fsw-100\src\SH_1553.H 44:#define WORDS_PER_SUBADDRESS 32 85: /* 0400 +200 */ WORD telemetry [2][8][WORDS_PER_SUBADDRESS]; 86: /* 0600 +020 */ WORD data_wrap_around[WORDS_PER_SUBADDRESS]; 87: /* 0620 +020 */ WORD spare_1553 [WORDS_PER_SUBADDRESS]; 88: /* 0640 +020 */ WORD time_broadcast [WORDS_PER_SUBADDRESS]; 89: /* 0660 +1A0 */ WORD spare_region[13][WORDS_PER_SUBADDRESS]; Artifact: ProjectA - Ion Propulsion System (Engine) - Digital Control Interface Unit (EngCntrl) - Spacecraft Interface Control Document (ICD) - DD-510. 5.2.3 1553 Subaddress Utilization The EngCntrl shall utilize the following subaddresses of the 1553 interface: Table 5-3: EngCntrl Subaddress Utilization ------------------------------------------------------------------ Subaddress Transmit Broadcast ------------------------------------------------------------------ 2 Circular Telemetry Buffer (Packet #0 - #5) 3 SOH Telemetry Packet #0 (Static) 4 SOH Telemetry Packet #1 (Static) 5 SOH Telemetry Packet #2 (Static) 6 SOH Telemetry Packet #3 (Static) 7 SOH Telemetry Packet #4 (Static) 8 SOH Telemetry Packet #5 (Static) 24 S/C Time Broadcast 30 Data Wrap Around ------------------------------------------------------------------ Commands for either FSW build shall be received by the EngCntrl via 1553 subaddress 2. The EngCntrl shall reject any command received to any subaddress other than subaddress 2. The spacecraft shall collect telemetry for either FSW build from the EngCntrl via 1553 subaddresses number 2 through subaddress 8. Subaddress number 2 contains a circular buffer of the data contained in subaddress 3 through subaddress 8. The EngCntrl shall reject any request to collect telemetry from any other subaddress. All telemetry collection shall be nondestructive. The circular buffer is updated by the EngCntrl based on the internal EngCntrl timers and may contain partially updated data when read asynchronously to the EngCntrl internal timers.",7/8/05ProjectA - TIM - 1879,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement numbers inconsistent with RVM and test script numbers,3,"59 Requirement numbers for EngCntrl SRS requirements do not match the RVM and Test Scripts requirement numbers. 38 other requirements have this same issue, but are not included in this TIM because they also have additional issues beyond a numbering issue. Each of the additional 38 requirements with a numbering issue are identified within each individual TIM. See the attached excel file for a complete list of the 59 requirements with a only numbering issue. These inconsistencies lead to a concern about configuration management of the EngCntrl requirements and whether the requirements were finalized prior to completion of the formal verification.",7/8/05ProjectA - TIM - 1878,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.5.1.1.3 inconsistent with RVM and fsw_test_06,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_06 requirement text. The RVM and test script text for the ""Analog Data Correction"" is different than the SRS in that the RVM and test script refers to the ""EngCntrl Flight Software"", but the SRS refers to the ""Operational Software"". The intent of the requirement is the same; however, the inconsistency leads to the question concerning configuration management and whether the approved SRS requirements were verified. Referenced EngCntrl SRS Requirement 3.5.1.1.3: Analog Data Correction The Operational Software shall adjust all of the analog values read from the Analog Controller of the CPU board using calibration data for the board. Referenced Test Script Requirement 3.5.1.1.3: Analog Data Correction The EngCntrl Flight Software shall adjust all of the analog values read from the Analog Controller of the CPU board using calibration data for the board. Referenced RVM Requirement 3.5.1.1.3: Analog Data Correction The EngCntrl Flight Software shall adjust all of the analog values read from the Analog Controller of the CPU board using calibration data for the board.",7/8/05ProjectA - TIM - 1875,"EngCntrl Test Scripts: EngCntrl SRS v1.2 requirements refer to ""control cycle"" vs. RVM and Test Scripts refer to ""control loop""",3,"The EngCntrl SRS v1.2 does not agree with the RVM and test script requirement text. The RVM and test script text is different than the SRS in that it specifies a ""control loop"" versus ""control cycle"". This issue is found within 24 requirements (see the attached excel spreadsheet). Also, the following additional editorial issues exist within these same requirements. 1.) within requirement 3.2.2.12 the RVM and test script text is different than the SRS in that it specifies a ""interrupt"" versus ""hardware interrupt"" 2.) within requirement 3.2.2.3 the RVM and test script text is different than the SRS in that it specifies a ""signal 1Hz"" versus ""single 1Hz"". 3.) within requirement 3.2.3.2.1 the RVM and test script text is different than the SRS in that it does not contain the words ""that is"". 4.) EngCntrl SRS requirement for the ""Refresh Watchdog Step"" is numbered 3.2.3.4.2.8 and the RVM and test script requirement for ""Refresh Watchdog Step"" is numbered 3.2.3.4.3.5. 5.) EngCntrl SRS requirement for the ""Idle Process/Wait 1Hz Tick Step"" is numbered 3.2.3.4.2.9 and the RVM and test script requirement for ""Idle Process/Wait 1Hz Tick Step"" is numbered 3.2.3.4.3.6. 6.) EngCntrl SRS requirement for the ""Initialization State"" is numbered 3.2.3.4.2.11 and the RVM and test script requirement for ""Initialization State"" is numbered 3.2.4.2.1.",7/7/05ProjectA - TIM - 1874,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.9.6.1.3 inconsistent with RVM and fsw_test_29,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_29 requirement text. The RVM and test script text for the ""Pressure Maintenance Faults"" is different than the SRS in that the RVM and test script text contains a ""TBD seconds"" instead of ""10 seconds"". Also, the SRS requirement for the ""Pressure Maintenance Faults"" is numbered 3.9.6.1.3 and the RVM and test script requirement for ""Pressure Maintenance Faults "" is numbered 3.9.5.1.3. This leads to the question as to whether the approved SRS requirement was defined prior to testing and verified during testing. Referenced EngCntrl SRS Requirement 3.9.6.1.3: Pressure Maintenance Faults The Operational software shall determine a leak is detected when leak detection is enabled and a plenum tank pressure cannot be maintained with in 0.2 psi of the required pressure for more than 10 seconds. Referenced Test Script Requirement 3.9.5.1.3: Pressure Maintenance Faults The Operational software shall determine a leak is detected when leak detection is enabled and a plenum tank pressure cannot be maintained with in 0.2 psi of the required pressure for more then TBD seconds. Referenced RVM Requirement 3.9.5.1.3: Pressure Maintenance Faults",7/7/05ProjectA - TIM - 1873,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.9.6.1.1 inconsistent with RVM and fsw_test_29,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_29 requirement text. The RVM and test script text for the ""Pressure Initialization Faults "" is different than the SRS in that the RVM and test script text contains 2 ""TBD seconds"" instead of ""9000 seconds for the Main Plenum tank and 9000 seconds for the Cathode Plenum tank"". Also, the SRS requirement for the ""Pressure Initialization Faults"" is numbered 3.9.6.1.1 and the RVM and test script requirement for ""Pressure Initialization Faults "" is numbered 3.9.5.1.1. This leads to the question as to whether the approved SRS requirement was defined prior to testing and verified during testing. Referenced EngCntrl SRS Requirement 3.9.6.1.1: Pressure Initialization Faults The Operational software shall determine a plenum tank has failed to initialize when the required pressure has not been achieved within 9000 seconds for the Main Plenum tank and 9000 seconds for the Cathode Plenum tank. Referenced Test Script Requirement 3.9.5.1.1: Pressure Initialization Faults The Operational software shall determine a plenum tank has failed to initialize when the required pressure has not been achieved within TBD seconds for the Main Plenum tank and TBD seconds for the Cathode Plenum tank. Referenced RVM Requirement 3.9.5.1.1: Pressure Initialization Faults The Operational software shall determine a plenum tank has failed to initialize when the required pressure has not been achieved within TBD seconds for the Main Plenum tank and TBD seconds for the Cathode Plenum tank.",7/7/05ProjectA - TIM - 1872,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.9.5.1 missing from RVM and test scripts,2,"EngCntrl SRS 3.9.5.1 Fault Response is missing from the RVM and test scripts. This leads to the question as to whether the baselined set of requirements were verified. Referenced EngCntrl SRS Requirement 3.9.5.1: Fault Response The EngCntrl Flight software response to memory errors shall be configurable to three levels. A) disabled, B) Report and Clear or C) Report and Reset EngCntrl. The Default response level shall be disabled. A single bit EDAC error will never cause a EngCntrl Reset.",7/7/05ProjectA - TIM - 1871,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.9.5 inconsistent with RVM and fsw_test_28,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_28 requirement text. The RVM and test script text for the ""Memory Space Errors"" is different than the SRS in that the RVM and test script text does not identify the faults. To ensure that the requirement is fully verified it is essential to identify the actual faults the FSW is monitoring for in the memory. Also, the EngCntrl SRS requirement for the ""Memory Space Errors"" is numbered 3.9.5 and the RVM and test script requirement for ""Memory Space Errors"" is numbered 3.9.4. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.9.5: Memory Space Errors The EngCntrl Flight software shall monitor indications of faults in the memory data and faults in the memory space access. These faults are a) Single Bit EDAC Error, b) Double Bit EDAC Error, c) Illegal CPU Access Error and d) VME Bus Error. Referenced RVM and Test Script Requirement 3.9.4: Memory Space Errors The EngCntrl Flight software shall monitor indications of faults in the memory data and faults in the memory space access.",7/7/05ProjectA - TIM - 1870,EngCntrl Test Scripts: EngCntrl SRS requirement 3.9.4.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.9.4.2 is missing from the RVM and test scripts. This leads to the question as to whether the baselined set of requirements were verified. Referenced EngCntrl SRS Requirement 3.9.4.2: Error Reporting The EngCntrl Flight software shall indicate an ILLEGAL INTERRUPT error if an illegal interrupt is detected.,7/7/05ProjectA - TIM - 1869,EngCntrl Test Scripts: EngCntrl SRS requirement 3.9.4.1 is missing from RVM and test scripts,2,"The EngCntrl SRS requirement 3.9.4.1 is missing from the RVM and test scripts. This leads to the question as to whether the baselined set of requirements were verified. Referenced EngCntrl SRS Requirement 3.9.4.1: Fault Response The EngCntrl Flight software response to an illegal interrupt shall be configurable to three levels. A) disabled, B) Report and Clear or C) Report and Reset EngCntrl. The Default response level shall be disabled.",7/7/05ProjectA - TIM - 1868,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.9.4 inconsistent with RVM and fsw_test_28,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_28 requirement text. The RVM and test script text for the ""Illegal Interrupt Error"" requirement is different than the SRS in that the RVM and test script text define the handling of an Illegal interrupt differently. The SRS version of 3.9.4 does not contain a ""Shall"" statement; however, the RVM and test script version specifically has two specific requirement statements; one of which matches SRS requirement 3.9.4.2 Error Reporting. The second requirement statement included in the RVM and test script is not in the EngCntrl SRS v1.2. Also, the EngCntrl SRS requirement for the ""Illegal Interrupt Error"" is numbered 3.9.4 and the RVM and test script requirement for ""Illegal Interrupt Error"" is numbered 3.9.3. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.9.4: Illegal Interrupt Error All unused interrupt sources are handled by the Illegal Interrupt ISR. The Illegal Interrupt Error ISR does not distinguish between the unused interrupt vectors and the internal 8086 exceptions, except for the Divide By Zero interrupt. Referenced EngCntrl SRS Requirement 3.9.4.2 Error Reporting The EngCntrl Flight software shall indicate an ILLEGAL INTERRUPT error if an illegal interrupt is detected. Referenced Test Script Requirement 3.9.3: Illegal Interrupt Error All unused interrupt sources are handled by the Illegal Interrupt ISR. The EngCntrl Flight software shall indicate an ILLEGAL INTERRUPT error if an illegal interrupt is detected. The EngCntrl Flight software shall then reinforce the interrupt mask setting of the CPU FPGA. Referenced RVM Requirement 3.9.3: Illegal Interrupt Error All unused interrupt sources are handled by the Illegal Interrupt ISR. The EngCntrl Flight software shall indicate an ILLEGAL INTERRUPT error if an illegal interrupt is detected. The EngCntrl Flight software shall then reinforce the interrupt mask setting of the CPU FPGA.",7/7/05ProjectA - TIM - 1867,EngCntrl Test Scripts: EngCntrl SRS requirement 3.9.3.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.9.3.2 is missing from the RVM and test scripts. This leads to the question as to whether the baselined set of requirements were verified. Referenced EngCntrl SRS Requirement 3.9.3.2: Error Reporting The EngCntrl Flight software shall indicate a DIVIDE BY ZERO error if a Divide By Zero interrupt is received.,7/6/05ProjectA - TIM - 1866,EngCntrl Test Scripts: EngCntrl SRS requirement 3.9.3.1 is missing from RVM and test scripts,2,"The EngCntrl SRS requirement 3.9.3.1 is missing from the RVM and test scripts. This leads to the question as to whether the baselined set of requirements were verified. Referenced EngCntrl SRS Requirement 3.9.3.1: Fault Response The EngCntrl Flight software response to the divide by zero interrupt shall be configurable to three levels. A) disabled, B) Report and Clear or C) Report and Reset EngCntrl. The Default response level shall be disabled.",7/6/05ProjectA - TIM - 1865,EngCntrl Test Scripts: EngCntrl SRS requirement 3.9.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.9.3 is missing from the RVM and test scripts. This leads to the question as to whether the baselined set of requirements were verified. Referenced EngCntrl SRS Requirement 3.9.3: Divide By Zero Error The EngCntrl Flight software shall enable the Divide By Zero Interrupt in the 80C86.,7/6/05ProjectA - TIM - 1864,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.8.3.1 inconsistent with RVM and fsw_test_02,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_02 requirement text. The RVM and test script text for the ""Atomic Operation"" is different than the SRS in that the RVM and test script text include a ""Disable processor interrupt"" step and an ""Enable processor interrupt"" step. Also, only the SRS includes an ""Increment memory scrub address pointer"" step. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.8.3.1: Atomic Operation The Memory Scrub function shall perform each memory check, correct and refresh operation as an atomic operation by masking the processor interrupt. The following steps will be performed: a) Check if done or abort b) Disable write protection (if testing write protected EEPROM) c) Read location to be tested d) Check EDAC status e) Write back read value f) Clear EDAC error interrupt source if error detected g) Enable write protection h) Log EDAC error if detected i) Increment memory scrub address pointer Referenced Test Script Requirement 3.8.3.1-1: Atomic Operation The Memory Scrub function shall perform each memory check correct and refresh operation as an atomic operation by masking the processor interrupt. The following steps will be performed: Referenced Test Script Requirement 3.8.3.1-2: Atomic Operation a) Check if done or abort Referenced Test Script Requirement 3.8.3.1-3: Atomic Operation b) Disable processor interrupt Referenced Test Script Requirement 3.8.3.1-4: Atomic Operation c) Disable write protection (if testing write protected EEPROM) Referenced Test Script Requirement 3.8.3.1-5: Atomic Operation d) Read location to be tested Referenced Test Script Requirement 3.8.3.1-6: Atomic Operation e) Check EDAC status Referenced Test Script Requirement 3.8.3.1-7: Atomic Operation f) Write back read value Referenced Test Script Requirement 3.8.3.1-8: Atomic Operation g) Clear EDAC error interrupt source if error detected Referenced Test Script Requirement 3.8.3.1-9: Atomic Operation h) Enable write protection Referenced Test Script Requirement 3.8.3.1-10: Atomic Operation i) Enable processor interrupt Referenced Test Script Requirement 3.8.3.1-11: Atomic Operation j) Log EDAC error if detected Referenced RVM Requirement 3.8.3.1-1: Atomic Operation The Memory Scrub function shall perform each memory check correct and refresh operation as an atomic operation by masking the processor interrupt. The following steps will be performed: Referenced RVM Requirement 3.8.3.1-2: Atomic Operation a) Check if done or abort Referenced RVM Requirement 3.8.3.1-3: Atomic Operation b) Disable processor interrupt Referenced RVM Requirement 3.8.3.1-4: Atomic Operation c) Disable write protection (if testing write protected EEPROM) Referenced RVM Requirement 3.8.3.1-5: Atomic Operation d) Read location to be tested Referenced RVM Requirement 3.8.3.1-6: Atomic Operation e) Check EDAC status Referenced RVM Requirement 3.8.3.1-7: Atomic Operation f) Write back read value Referenced RVM Requirement 3.8.3.1-8: Atomic Operation g) Clear EDAC error interrupt source if error detected Referenced RVM Requirement 3.8.3.1-9: Atomic Operation h) Enable write protection Referenced RVM Requirement 3.8.3.1-10: Atomic Operation i) Enable processor interrupt Referenced RVM Requirement 3.8.3.1-11: Atomic Operation j) Log EDAC error if detected",7/6/05ProjectA - TIM - 1863,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.8.3 inconsistent with RVM and fsw_test_02,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_02 requirement text. The RVM and test script text for the ""Memory Scrub"" is different than the SRS in that the RVM and test script text state: ""This function will also refresh the EEPROM contents"", and the SRS states: ""This function will also refresh the EEPROM and SRAM contents."" The EngCntrl V1.2 SRS discusses refreshing the EEPROM and SRAM contents and the RVM and Test Script version of the requirement do not. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.8.3: Memory Scrub The Memory Scrub function is used to check the EEPROM and SRAM space for correctable EDAC errors started at the address defined in the command parameters. This function will also refresh the EEPROM and SRAM contents. Referenced Test Script Requirement 3.8.3: Memory Scrub The Memory Scrub function is used to check the EEPROM and SRAM space for correctable EDAC errors started at the address defined in the command parameters. This function will also refresh the EEPROM contents. Referenced RVM Requirement 3.8.3: Memory Scrub The Memory Scrub function is used to check the EEPROM and SRAM space for correctable EDAC errors started at the address defined in the command parameters. This function will also refresh the EEPROM contents.",7/6/05ProjectA - TIM - 1862,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.8.2 inconsistent with RVM and fsw_test_02,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_02 requirement text. The RVM and test script text for the ""Checksum Calculation"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of an XCALCKSM and an XSTARTSW command, and the SRS discusses a BCALCKSM and a BSTARTSW command. The command names are different in the versions of the requirement text. No reference to the XSTARTSW or XCALCKSM commands are found in the EngCntrl V1.2 SRS. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.8.2: Checksum Calculation The Checksum Calculation function may be initiated by either a BCALCKSM command or a BSTARTSW command. The function will perform the slightly different steps depending on the requestor. Referenced Test Script Requirement 3.8.2: Checksum Calculation The Checksum Calculation function may be initiated by either a XCALCKSM command or a XSTARTSW command. The function will perform the slightly different steps depending on the requestor. Referenced RVM Requirement 3.8.2: Checksum Calculation The Checksum Calculation function may be initiated by either a XCALCKSM command or a XSTARTSW command. The function will perform the slightly different steps depending on the requestor.",7/6/05ProjectA - TIM - 1861,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.7.3.8.6.9 inconsistent with RVM and fsw_test_27,3,"The EngCntrl SRS does not agree with the RVM and fsw_test_27 requirement text. The RVM and test script text for the ""Neutralizer Current 5% Error"" is different than the SRS in that the test script text contains additional data for requirement 3.7.3.8.6.10. The intended text for requirement 3.7.3.8.6.9 is present in all three sources. There appears to be an editorial error. This leads to the question about configuration management and whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.7.3.8.6.9: Neutralizer Current 5% Error The Neutralizer Current 5% Error Flag shall be set when the value of the measured Neutralizer Current differs from the value in the currently selected Throttle Table entry by more than 5% Referenced Test Script Requirement 3.7.3.8.6.9: Neutralizer Current 5% Error The Neutralizer Current 5% Error Flag shall be set when the value of the measured Neutralizer Current differs from the value in the currently selected Throttle Table entry by more than 5% 3.7.3.8.6.10 Neutralizer Current 10% Error The Neutralizer Current Referenced RVM Requirement 3.7.3.8.6.9: Neutralizer Current 5% Error The Neutralizer Current 5% Error Flag shall be set when the value of the measured Neutralizer Current differs from the value in the currently selected Throttle Table entry by more than 5% 3.7.3.8.6.10 Neutralizer Current 10% Error The Neutralizer Current",7/5/05ProjectA - TIM - 1860,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.7.3.3.2.3 inconsistent with RVM and fsw_test_11,3,"The EngCntrl SRS does not agree with the RVM and fsw_test_11 requirement text. The RVM and test script text for the ""Standby Mode"" is different than the SRS in that the SRS provides more detailed information on the Standby Procedures. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.7.3.3.2.3: Open Upstream Latch Valve 2 If the XFS MODE is set for NORMAL (non-single plenum mode), command the Cathode Flow upstream latch valve to OPEN If the XFS MODE is NOT set for NORMAL (non-single plenum mode), command the single plenum latch valve to OPEN If the XFS MODE is set for SINGLE PLENUM MAIN mode, command the cathode flow upstream latch valve to CLOSED If the XFS MODE is set for SINGLE CATHODE MAIN mode, command the main flow upstream latch valve to CLOSED Referenced Test Script Requirement 3.7.3.3.2.3: Open Upstream Latch Valve 2 If the XFS MODE is set for NORMAL (non-single plenum mode) command the Cathode Flow upstream latch valve to OPEN If the XFS MODE is NOT set for NORMAL (non-s ingle plenum mode) command the single plenum latch valve to OPEN Referenced RVM Requirement 3.7.3.3.2.3: Open Upstream Latch Valve 2 If the XFS MODE is set for NORMAL (non-single plenum mode), command the Cathode Flow upstream latch valve to OPEN If the XFS MODE is NOT set for NORMAL (non-single plenum mode), command the single plenum latch valve to OPEN",7/5/05ProjectA - TIM - 1859,EngCntrl Test Scripts: EngCntrl SRS requirement 3.7.3.8.6.16 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.7.3.8.6.16 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.7.3.8.6.16: Discharge Voltage 10% Error The Discharge Voltage 10% Error Flag shall be set when the value of the measured Discharge Voltage differs from the value in the currently selected Throttle Table entry by more than 10%,7/5/05ProjectA - TIM - 1858,EngCntrl Test Scripts: EngCntrl SRS requirement 3.7.3.8.6.15 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.7.3.8.6.15 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.7.3.8.6.15: Discharge Voltage 5% Error The Discharge Voltage 5% Error Flag shall be set when the value of the measured Discharge Voltage differs from the value in the currently selected Throttle Table entry by more than 5%,7/5/05ProjectA - TIM - 1857,EngCntrl Test Scripts: EngCntrl SRS requirement 3.7.3.8.6.14 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.7.3.8.6.14 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.7.3.8.6.14: Discharge Current 10% Error The Discharge Current 10% Error Flag shall be set when the value of the measured Discharge Current differs from the value in the currently selected Throttle Table entry by more than 10%,7/5/05ProjectA - TIM - 1856,EngCntrl Test Scripts: EngCntrl SRS requirement 3.7.3.8.6.13 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.7.3.8.6.13 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.7.3.8.6.13: Discharge Current 5% Error The Discharge Current 5% Error Flag shall be set when the value of the measured Discharge Current differs from the value in the currently selected Throttle Table entry by more than 5%,7/5/05ProjectA - TIM - 1855,EngCntrl Test Scripts: EngCntrl SRS requirement 3.7.3.8.6.12 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.7.3.8.6.12 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.7.3.8.6.12: Neutralizer Voltage 10% Error The Neutralizer Voltage 10% Error Flag shall be set when the value of the measured Neutralizer Voltage differs from the value in the currently selected Throttle Table entry by more than 10%,7/5/05ProjectA - TIM - 1854,EngCntrl Test Scripts: EngCntrl SRS requirement 3.7.3.8.6.11 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.7.3.8.6.11 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.7.3.8.6.11: Neutralizer Voltage 5% Error The Neutralizer Voltage 5% Error Flag shall be set when the value of the measured Neutralizer Voltage differs from the value in the currently selected Throttle Table entry by more than 5%,7/5/05ProjectA - TIM - 1853,EngCntrl Test Scripts: EngCntrl SRS requirement 3.7.3.8.6.10 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.7.3.8.6.10 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.7.3.8.6.10: Neutralizer Current 10% Error The Neutralizer Current 10% Error Flag shall be set when the value of the measured Neutralizer Current differs from the value in the currently selected Throttle Table entry by more than 10%,7/5/05ProjectA - TIM - 1852,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.7.3.3 inconsistent with RVM and fsw_test_11,3,"The EngCntrl SRS does not agree with the RVM and fsw_test_11 requirement text. The RVM and test script text for the ""Standby Mode"" is different than the SRS in that the SRS provides more detailed information on the Standby Procedures. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.7.3.3: Standby Mode The Operational software shall perform a Standby Procedure upon transitioning the Engine into the STANDBY mode from the SAFE mode. The Operational software is not required to execute the Standby Procedure when transitioning the Engine into the STANDBY mode from any mode other than SAFE mode. The steps of this procedure may be executed in any order. Referenced Test Script Requirement 3.7.3.3: Standby Mode The Operational software shall perform a Standby Procedure upon transitioning the Engine into the STANDBY mode. Referenced RVM Requirement 3.7.3.3: Standby Mode The Operational software shall perform a Standby Procedure upon transitioning the Engine into the STANDBY mode.",7/1/05ProjectA - TIM - 1851,EngCntrl Test Scripts: EngCntrl SRS requirement 3.7.3.2.2.6 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.7.3.2.2.6 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.7.3.2.2.6: Close XFS Valves (Step 6) Command all remaining latch valves to be closed (Latch vales 3 through 20). Only two latch valves will be commanded for each 1Hz control cycle. This step will repeat until all required latch valves have been commanded closed.,7/1/05ProjectA - TIM - 1850,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.7.3.2.2.5 inconsistent with RVM and fsw_test_09,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_09 requirement text. The RVM and test script text for the ""Close XFS Valves (Step 5 )"" is different than the SRS in that the RVM and test script provide more detailed information on commanding the solenoid valves. Also, the SRS requirement title for requirement 3.7.3.2.2.5 is ""Stop Solenoid Valves (Step 5) "", and the RVM and test script requirement title for requirement 3.7.3.2.2.5 is ""Close XFS Valves (Step 5 )"". Also the RVM and test script requirement repeats the statement: ""Command all latch valves to be closed. (Latch Valves 1 through 20)."" This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.7.3.2.2.5: Stop Solenoid Valves (Step 5) Command all solenoid valves to stop cycling (Solenoid valves 1 through 8). Command latch valves 1 and 2 to be closed. Referenced Test Script Requirement 3.7.3.2.2.5: Close XFS Valves (Step 5 ) Command all solenoid valves to stop cycling (Solenoid valves 1 through 8). Command all latch valves to be closed. (Latch Valves 1 through 20). Command all latch valves to be closed. (Latch Valves 1 through 20). Only two latch valves will be commanded for each 1Hz Control Loop. This step will repeat until all latch valves have been commanded closed.",7/1/05ProjectA - TIM - 1849,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.7.2.2.2 inconsistent with RVM and fsw_test_12,3,"The EngCntrl SRS does not agree with the RVM and fsw_test_12 requirement text. The RVM and test script text for the ""Mode Exit"" is different than the SRS in that the RVM and test script is an incomplete requirement. It appears as though the requirement has been cut off in the middle of the requirement text. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.7.2.2.2: Mode Exit The Operational software shall be able to transition the Engine from STANDBY mode into any other Engine mode. The Operational Software shall transition the Engine from STANDBY mode into XFS INITIALIZE mode when both the Standby Procedure has completed and a XINITXFS command is received. The Operational Software shall transition the Engine from STANDBY mode into XFS ON mode when both the Standby Procedure has completed and a XRUNXFS command is received. The Operational Software shall transition the Engine from STANDBY mode into GRID CLEAR mode when both the Standby Procedure has completed and a XGRIDCLR command is received. The Operational Software shall transition the Engine from STANDBY mode into CATHODE CONDITION mode when both the Standby Procedure has completed and a XCATHCND command is received. The Operational Software shall transition the Engine from STANDBY mode into THRUST mode when both the Standby Procedure has completed and a XTHRSTON command is received. The Operational Software shall transition the Engine from STANDBY mode into SAFE mode when a XSAFESYS command is received. The Operational software shall indicate a STANDBY IN PROGRESS error when a command is received to leave the STANDBY mode and the Standby Procedure has not completed, the only exception to this is for the XSAFESYS command. Referenced Test Script Requirement 3.7.2.2.2: Mode Exit The Operational software shall be able to transition the Engine from STANDBY mode into any other Engine mode. The Operational Software shall transition the Engine from STANDBY mode into XFS Initialize mode when both the Standby Procedure has completed and a XINITX Referenced RVM Requirement 3.7.2.2.2: Mode Exit The Operational software shall be able to transition the Engine from STANDBY mode into any other Engine mode. The Operational Software shall transition the Engine from STANDBY mode into XFS INITIALIZE mode when both the Standby Procedure has completed and a XINITX",7/1/05ProjectA - TIM - 1848,EngCntrl Test Scripts: EngCntrl SRS requirement 3.6.3.3.6 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.6.3.3.6 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.6.3.3.6: Close XFS Valves (Step 6) Command all remaining latch valves to be closed (Latch vales 3 through 20). Only two latch valves will be commanded for each 1Hz control cycle. This step will repeat until all required latch valves have been commanded closed.,7/1/05ProjectA - TIM - 1847,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.6.3.3.5 inconsistent with RVM and fsw_test_01,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_01 requirement text. The RVM and test script text for the ""Close XFS Valves (Step 5 )"" is different than the SRS in that the RVM and test script provide more detailed information on commanding the solenoid valves. Also, the SRS requirement title for requirement 3.6.3.3.5 is ""Stop Solenoid Valves (Step 5) "", and the RVM and test script requirement title for requirement 3.6.3.3.5 is ""Close XFS Valves (Step 5 )"". This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.6.3.3.5: Stop Solenoid Valves (Step 5) Command all solenoid valves to stop cycling (Solenoid valves 1 through 8). Command latch valves 1 and 2 to be closed. Referenced Test Script Requirement 3.6.3.3.5: Close XFS Valves (Step 5 ) Command all solenoid valves to stop cycling (Solenoid valves 1 through 8 . Command all latch valves to be closed. (Latch Valves 1 through 20 . Only two latch valves will be commanded for each 1Hz Control Loop. This step will repeat until all latch valves have been commanded closed. Referenced RVM Requirement 3.6.3.3.5: Close XFS Valves (Step 5 ) Command all solenoid valves to stop cycling (Solenoid valves 1 through 8). Command all latch valves to be closed. (Latch Valves 1 through 20). Only two latch valves will be commanded for each 1Hz Control Loop. This step will repeat until all latch valves have been commanded closed.",7/1/05ProjectA - TIM - 1846,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.6.3 inconsistent with RVM and fsw_test_01,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_01 requirement text. The RVM and test script text for the ""Mode Procedures"" is different than the SRS in that the RVM and test script discuss a 5-step Safe System procedure, and the SRS discusses a 6-step Safe System procedure. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.6.3: Mode Procedures The Safe System procedure executed by the Bootloader Software consists of a 6-step procedure. Each step of the procedure is executed during a single 1Hz control cycle, with step 6 repeating for several cycles prior to completion. Referenced Test Script Requirement 3.6.3: Mode Procedures The Safe System procedure executed by the Bootloader Software consists of a 5-step procedure. Each step of the procedure is executed during a single 1Hz control loop. Note: The following steps define all possible PPU addresses; this is due to the fact that the PPU address is a configurable element in the ProjectA EngCntrl Software. The Bootloader software could be executing this procedure prior to the value of the PPU Address knowledge being acquired via commands from the spacecraft by the EngCntrl Flight Software. Referenced RVM Requirement 3.6.3: Mode Procedures The Safe System procedure executed by the Bootloader Software consists of a 5-step procedure. Each step of the procedure is executed during a single 1Hz control loop. Note: The following steps define all possible PPU addresses; this is due to the fact that the PPU address is a configurable element in the ProjectA EngCntrl Software. The Bootloader software could be executing this procedure prior to the value of the PPU Address knowledge being acquired, via commands from the spacecraft, by the EngCntrl Flight Software.",7/1/05ProjectA - TIM - 1845,Build 4.0 OBC Code: Body Occultation Thresholds Differ from Design,3,"OBC Bld 4.0 code implements Body Occultation thresholds which differ from those defined in the Design Notes. AcStaTable.h real_type BodyOccultationThr[3][NUM_OF_STA]; real_type SunOccultationThr[NUM_OF_STA]; AcStaTable.c /* Current parameters set to eliminate occultation */ { {-0.06975647374413, -0.06975647374413}, /* BodyOccultationThr[i][j] = cos(94) for 500 km orbit */ {-0.06975647374413, -0.06975647374413}, {-0.06975647374413, -0.06975647374413}}, { 0.88294759285893, /* SunOccultationThr[0] = cos(28) */ 0.88294759285893 }, /* SunOccultationThr[1] = cos(28) */ AcProcessSta.c /* Earth Occultation */ if ( pSta->StaDotBody[i] > AcStaTable.BodyOccultationThr[i][pSta->StaID] && AcTable.DefaultEnabled.OccultLogic ) /* Sun Occultation */ if ( pSta->StaDotSun > AcStaTable.SunOccultationThr[pSta->StaID] && AcTable.DefaultEnabled.OccultLogic ) ProjectA Design Note DN-ProjectA-ACS-011 Table 1. Selectable Star Tracker FDC Parameters ST_FDC_SUN_OCCULTATION_THRESHOLD Threshold for detecting Sun occultation expressed as a dot product 0.866 ST_FDC_EARTH_OCCULTATION_THRESHOLD Threshold for detecting Earth occultation expressed as a dot product 0.819 ST_FDC_MOON_OCCULTATION_THRESHOLD Threshold for detecting Moon occultation expressed as a dot product 0.906 ST_FDC_MARS_OCCULTATION_THRESHOLD Threshold for detecting Mars occultation expressed as a dot product 0.819 ST_FDC_VESTA_OCCULTATION_THRESHOLD Threshold for detecting Vesta occultation expressed as a dot product 0.174 ST_FDC_CERES_OCCULTATION_THRESHOLD Threshold for detecting Ceres occultation expressed as a dot product 0.174",7/1/05ProjectA - TIM - 1844,Build 4.0 OBC Code: CSS Thresholds Differ from Design,3,"OBC Bld 4.0 code implements CSS threshold limits, which differ from those defined in the Design Notes. FileName: AcProcessCss.c ** CSS Current Test ** ** Verify that the detector outputs are within the valid operating range. ** Note that the pyramid detectors (denoted by i = 0,1) can have +/- current ** values, while the other detectors are limited to values >= 0. */ table_index = i; if ( i >= NUM_OF_CSS ) table_index -= NUM_OF_CSS; if ( pCss->CurrentRaw[i] < AcCssTable.MinDetectorCurrent[table_index]) /* only check underflow */ where accsstable.h real_type MinDetectorCurrent[NUM_OF_CSS]; /* Min value for valid detector */ accsstable.c -0.00125, /* MinDetectorCurrent (Amp) */ ProjectA Design Note DN-ProjectA-ACS-011 Attitude Control Subsystem Fault Detection and Correction Design 1.1 CSS Fault Detection and Correction 1.1.1 CSS Current Range Test The output current on each of the 16 detectors (8 on CSS side A and 8 on side B) will be monitored to determine whether it is in the acceptable range, defined by selectable lower and upper thresholds. Mnemonic CSS_FDC_CURRENT_LOW_THRESHOLD Description threshold for detecting out-of-range current Units Amps Default Value 0.0 Mnemonic CSS_FDC_CURRENT_HIGH_THRESHOLD Description High threshold for detecting out-of-range current Units Amps Default Value 0.500",7/1/05ProjectA - TIM - 1843,"EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.5.2.2.1, RVM and fsw_test_05 inconsistent with each other",2,"The EngCntrl SRS, RVM,and fsw_test_05 requirement text do not agree. The test script text for the ""Report Telemetry Data"" is different than the SRS in that the test script provides more detailed information on updating the telemetry data. The RVM text is like the test script text with the exception of added commons, which changes the intent of the requirement. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.5.2.2.1: Report Telemetry Data The EngCntrl Flight software shall update all telemetry data channels Referenced Test Script Requirement 3.5.2.2.1: Report Telemetry Data The EngCntrl Flight software shall update all values in all telemetry data packets except the programmable telemetry buffer packet 6 and the following telemetry data words: a) EngCntrl Data (Packet 0): Error history list Error count and Processing Time b) Status Data 1 (Packet 3): Continuous Dump values and Peek Memory values Referenced RVM Requirement 3.5.2.2.1: Report Telemetry Data The EngCntrl Flight software shall update all values in all telemetry data packets except the programmable telemetry buffer, packet 6, and the following telemetry data words: a) EngCntrl Data (Packet 0): Error history list, Error count and Processing Time b) Status Data 1 (Packet 3): Continuous Dump values and Peek Memory values",7/1/05ProjectA - TIM - 1842,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.5.1.5.3 inconsistent with RVM and fsw_test_07,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_07 requirement text. The RVM and test script text for the ""Neutralizer Common Voltage"" is different than the SRS in that the RVM and test script text does not include: ""The EngCntrl Flight Software shall not indicate the Neutralizer Common error if the PPU Slice Power is reported to be OFF."" This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.5.1.5.3: Neutralizer Common Voltage The EngCntrl Flight Software shall indicate a Neutralizer Common error if the Neutralizer Common Voltage is measured to be less than 10v or greater than 90v. The EngCntrl Flight Software shall not indicate the Neutralizer Common error if the PPU Slice Power is reported to be OFF. Referenced Test Script Requirement 3.5.1.5.3: Neutralizer Common Voltage The EngCntrl Flight Software shall indicate a Neutralizer Common error if the Neutralizer Common Voltage is measured to be less than 10v or greater than 90v. Referenced RVM Requirement 3.5.1.5.3: Neutralizer Common Voltage The EngCntrl Flight Software shall indicate a Neutralizer Common error if the Neutralizer Common Voltage is measured to be less than 10v or greater than 90v.",7/1/05ProjectA - TIM - 1841,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.5.1.5.2 inconsistent with RVM and fsw_test_07,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_07 requirement text. The RVM and test script text for the ""High Voltage"" is different than the SRS in that the RVM and test script text does not include: ""The EngCntrl Flight Software shall indicate the High Voltage is OFF if the PPU Slice Power is reported to be OFF. "" This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.5.1.5.2: High Voltage The EngCntrl Flight Software shall indicate the High Voltage is ON if the measured line voltage is greater than or equal to 50v, otherwise the EngCntrl Flight Software shall indicate the High Voltage is OFF. The EngCntrl Flight Software shall indicate the High Voltage is OFF if the PPU Slice Power is reported to be OFF. Referenced Test Script Requirement 3.5.1.5.2: High Voltage The EngCntrl Flight Software shall indicate the High Voltage is ON if the measured line voltage is greater than or equal to 50v otherwise the EngCntrl Flight Software shall indicate the High Voltage is OFF. Referenced RVM Requirement 3.5.1.5.2: High Voltage The EngCntrl Flight Software shall indicate the High Voltage is ON if the measured line voltage is greater than or equal to 50v, otherwise the EngCntrl Flight Software shall indicate the High Voltage is OFF.",7/1/05ProjectA - TIM - 1840,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.5.1.4.3 inconsistent with RVM and fsw_test_07,3,"The EngCntrl SRS does not agree with the RVM and fsw_test_07 requirement text. The RVM and test script text for the ""Pressure Required Lookup Tables"" is different than the SRS in that the RVM and test script state: ""These tables are unique for each valves FCD..."", but the SRS states ""These tables are unique for each FCD..."". Note that 3.5.1.4.3 does not contain a ""shall"" statement; however, the text was included in the RVM and test scripts to be verified. If the functionality described is a ""requirement"" then the statement should be written as a ""shall"" statement. The inconsistent specification of the text leads to the question about configuration management and whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.5.1.4.3: Pressure Required Lookup Tables The Pressure Required Lookup Tables are the FCD correction table associated with the Main flow and Cathode flow FCDs. These tables are unique for each FCD, however there will only be two tables that will be always be used independent of the thruster selected. Referenced Test Script Requirement 3.5.1.4.3: Pressure Required Lookup Tables The Pressure Required Lookup Tables are the FCD correction table associated with the Main flow and Cathode flow FCDs. These tables are unique for each valves FCD however there will only be two tables that will be always be used independent of the thruster selected. Referenced RVM Requirement 3.5.1.4.3: Pressure Required Lookup Tables The Pressure Required Lookup Tables are the FCD correction table associated with the Main flow and Cathode flow FCDs. These tables are unique for each valves FCD, however there will only be two tables that will be always be used independent of the thruster selected.",7/1/05ProjectA - TIM - 1839,Build 4.0 OBC Code: Non-Initialized Data Maintenance Issue,5,"IV&V verified that current coding prevents the following possible uses of uninitialized variables, however future changes may expose these vulnerabilities. Klocwork reported the following warnings: 1) Non-Initialized Data Module - AC_JetTorqueDistribution File accommandjet.c 'axis1, axis2, and axis3' may be used uninitialized in this function at line 572. This could happen under conditions - default is true at line 518. switch ( pJet->GndCmd.Packed.ControlSet ) { case CNT_ODD_ALL: case CNT_EVEN_ALL: { axis1 = Y_AXIS; axis2 = Z_AXIS; axis3 = X_AXIS; break; } 2) Non-Initialized Data Module - AC_ControlLaw File accontrollaw.c 'selecti' might be used uninitialized in this function at line 180. Variable 'selecti' declared at line 80 might be used uninitialized under conditions - pAcGlobal->ActuatorSelect==0 is true at line 113 and (pAcGlobal->Mode==DeltaVRCS)&&(pAcGlobal->Jet.GndCmd.Packed.DeltaVBurnCompleted==0) is true at line 114 and pAcGlobal->Jet.GndCmd.Packed.ControlSet==0 is false at line 117 and pAcGlobal->Jet.GndCmd.Packed.ControlSet==1 is false at line 119 and i<3 is true at line 151 and fabs(pControl->RateCmd.v[i])>AcControlTable.RateLimit[select[i]].v[i] is false at line 160 and (pAcGlobal->Slew.Mode!=SlewInProgress)&&(pControl->IntegratorOn[i]==1) is true at line 179 and pAcGlobal->Slew.Mode!=SlewInProgress is true at line 179 Analysis: Both cases are currently precluded by values of ControlSet. ControlSet is a bitfield 4 (unsigned int 4 bits). Since it is defined in acjet.h it is initially 0 and the current code assignments only assign values of 0 or 1. Hence the current code assignments preclude the code paths that could lead to the possible use uninitialized variables in these two cases; however, a maintenance risk exists.",7/1/05ProjectA - TIM - 1838,"EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.5.1.2.3 inconsistent with RVM, fsw_test_06, and fsw_test_07",3,"The EngCntrl SRS does not agree with the RVM, fsw_test_06, and fsw_test_07 requirement text. The RVM, and the test script text in fsw_test_06 and fsw_test_07 for the ""PPU Data Correction "" is different than the SRS in that the RVM and test script discusses ""The EngCntrl Flight Software..."", but the SRS discusses ""The Operational Software..."". The intent of the requirement is the same; however, this leads to the question about configuration management and whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.5.1.2.3: PPU Data Correction The Operational Software shall adjust all of the analog values read from the PPU using calibration data for the unit. Referenced Test Script Requirement 3.5.1.2.3: PPU Data Correction The EngCntrl Flight Software shall adjust all of the analog values read from the PPU using calibration data for the unit. Referenced RVM Requirement 3.5.1.2.3: PPU Data Correction The EngCntrl Flight Software shall adjust all of the analog values read from the PPU using calibration data for the unit.",7/1/05ProjectA - TIM - 1837,Build 4.0 OBC Code: Non-Initialized Data 'Jet2New' May be Used in AC_JetTorqueDistribution,3,"IV&V verified the possible use of an uninitialized variable. Klocwork reported the following warning: Non-Initialized Data Module - AC_JetTorqueDistribution File accommandjet.c 'Jet2New' might be used uninitialized in this function at line 830. Variable 'Jet2New' declared at line 500 might be used uninitialized under conditions - fabs(pJet->TorqueCmdAugMag)<=(6.055454452393343E-006) is false at line 637 and pJet->DutyCycle.v[1]<0.0 is true at line 815 and pJet->ControlJet[i]!=pJet->ControlJet1 && pJet->ControlJet[i]!=pJet->ControlJet2 && SIGN(CrsProduct[i]) != SIGN(CrsProduct[Jet2Index]) is false at line 820 Jet2New is referenced in line 830: pJet->ControlJet2 = Jet2New; TorqueMatrixWrk.m[0][1] = AcJetTable.JetForceMag[pJet->ControlJet2] * AcJetTable.JetNormTorq[pJet->ControlJet2][axis1]; TorqueMatrixWrk.m[1][1] = AcJetTable.JetForceMag[pJet->ControlJet2] * AcJetTable.JetNormTorq[pJet->ControlJet2][axis2]; TorqueMatrixWrk.m[2][1] = AcJetTable.JetForceMag[pJet->ControlJet2] * AcJetTable.JetNormTorq[pJet->ControlJet2][axis3]; Minv( TorqueMatrixWrk, & TorqueMatrixWrkInv ); MoV( & TorqueMatrixWrkInv, TorqueCmdWrk, A_B, & pJet->DutyCycle );",7/1/05ProjectA - TIM - 1836,Build 4.0 OBC Code: Non-Initialized Data May be Used in AC_JetTorqueDistribution,3,"IV&V verified the possible use of an uninitialized variable. Klocwork reported the following warning: Non-Initialized Data Module - AC_JetTorqueDistribution File accommandjet.c 'Jet2Index' might be used uninitialized in this function at line 822. Variable 'Jet2Index' declared at line 500 might be used uninitialized under conditions - fabs(pJet->TorqueCmdAugMag)<=(6.055454452393343E-006) is false at line 637 and SIGN(CrsProduct[i]) != Jet1Direction is false at line 707 and pJet->DutyCycle.v[1]<0.0 is true at line 815 and i<4 is true at line 818 and pJet->ControlJet[i]!=pJet->ControlJet1 is true at line 820 A code comment before these final conditionals and variable usage highlights this possible error. /* ** If Second Primary Jets Duty Cycle Is Negative (Which Can Occur When ** The Primary Plane Torque Lies Exactly Along One Jet) Then ... ** ** 1. Set second primary jet to closest inactive jet in ** primary set on opposite side of Jet1, ** 2. Update jet torque matrix, and ** 3. Recompute duty cycles */ usage of Jet2Index: 815 if ( pJet->DutyCycle.v[1] < 0.0 ) 816 { 817 BypassDotProductCheck = TRUE;818 for (i=0; i<4; i++) 819 { 820 if ( pJet->ControlJet[i] != pJet->ControlJet1 && 821 pJet->ControlJet[i] != pJet->ControlJet2 && 822 SIGN(CrsProduct[i]) != SIGN(CrsProduct[Jet2Index]) && 823 (DotProduct[i] > DotProductMax || BypassDotProductCheck == TRUE) ) 824 { 825 BypassDotProductCheck = FALSE; 826 Jet2New = pJet->ControlJet[i]; 827 DotProductMax = DotProduct[i]; 828 } 829 }",7/1/05ProjectA - TIM - 1835,Build 4.0 OBC Code: Non-Initialized Data May be Used in AC_CommandEngineSequencer,3,"IV&V verified the possible use of an uninitialized variable. Klocwork reported the following warning: Non-Initialized Data Module - AC_CommandEngineSequencer File accommandEngine.c 'selecti' might be used uninitialized in this function. Variable 'selecti' declared at line 300 might be used uninitialized under conditions - pAcGlobal->Engine.Flags.SubMode==9 is true at line 380 and pEngine->Select[0].Use==1 is false at line 381 and pEngine->Select[1].Use==1 is false at line 383 and pEngine->Select[2].Use==1 is false at line 385 'selecti' is used in Line Number 387 Tdes = pAcGlobal->Control.IntegralErrLmtBdy[selecti]; 'Tdes is used in the subsequent line' AC_EngineTrq2Actuator ( pEngine, Tdes, (word *)&IntegratorOn[0], (dword *)&pEngine->MinusYCmdCnt, (dword *)&pEngine->PlusYCmdCnt, (real_type *)&PitchTorque, (real_type *)&YawTorque ); As reported, in order to use 'selecti' uninitialized, the variables Select[x].use (used in the conditionals at 381, 383, and 385) must all be zero. These variables are single bits defined in a structure in ACEngine.h. The values are initialized to zero. These variables are only set by Ground selection which occurs in AC_Select_Component of AC_ProcessACSCommands. There does not appear to be software protection to preclude this scenario; however, it seems operationally illogical since it would require commanding Engine without selection of an Engine.",7/1/05ProjectA - TIM - 1834,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.5.1.1.1 and RVM inconsistent with fsw_test_06,2,"The EngCntrl SRS and RVM do not agree with the fsw_test_06 requirement text. The test script text for the ""Analog Data Channels Collected"" is different than the SRS and RVM in that the test script discusses 18 temperature sensors, but the SRS and the RVM discuss 15 temperature sensors. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.5.1.1.1: Analog Data Channels Collected Source Channels EngCntrl 5v, +12v, -12v power monitors Primary Current monitor 250 ohm and 750 ohm temp cal resistors 5v pressure voltage ref XFS 7 pressure sensors 15 temperature sensors Referenced Test Script Requirement 3.5.1.1.1-1 through 3.5.1.1.1-7: 3.5.1.1.1-1 Analog Data Channels Collected 3.5.1.1.1-2 Source EngCntrl 5v +12v -12v power monitors 3.5.1.1.1-3 Source EngCntrl Primary Current monitor 3.5.1.1.1-4 Source EngCntrl 250 ohm and 750 ohm temp cal resistors 3.5.1.1.1-5 Source EngCntrl 5v pressure voltage ref 3.5.1.1.1-6 Source XFS 7 pressure sensors 3.5.1.1.1-7 Source XFS 18 temperature sensors Referenced RVM Requirement 3.5.1.1.1-1 through 3.5.1.1.1-7: 3.5.1.1.1-1 Analog Data Channels Collected 3.5.1.1.1-2 Source EngCntrl 5v +12v -12v power monitors 3.5.1.1.1-3 Source EngCntrl Primary Current monitor 3.5.1.1.1-4 Source EngCntrl 250 ohm and 750 ohm temp cal resistors 3.5.1.1.1-5 Source EngCntrl 5v pressure voltage ref 3.5.1.1.1-6 Source XFS 7 pressure sensors 3.5.1.1.1-7 Source XFS 15 temperature sensors",6/30/05ProjectA - TIM - 1833,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.8.9.2 inconsistent with RVM and fsw_test_34,3,"The EngCntrl SRS does not agree with the RVM and fsw_test_34 requirement text. The RVM and test script text for the ""Command Execution"" is different than the SRS in that the RVM and test script text also include part of the requirement text from requirement 3.4.7.10. Also, the EngCntrl SRS requirement for the ""Command Execution"" is numbered 3.4.8.9.2 and the RVM and test script requirement for ""Command Execution"" is numbered 3.4.7.9.2. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.8.9.2: Command Execution The Operational software shall change the selected throttle table entry upon reception of this command and successful command validation. Referenced Test Script Requirement 3.4.7.9.2: Command Execution The Operational software shall change the selected throttle table entry upon reception of this command and successful command validation. 3.4.7.10 XBEAMCTL The XBEAMCTL command is used to enable or disable the beam control algorithm. This command is inte Referenced RVM Requirement 3.4.7.9.2: Command Execution The Operational software shall change the selected throttle table entry upon reception of this command and successful command validation. 3.4.7.10 XBEAMCTL The XBEAMCTL command is used to enable or disable the beam control algorithm. This command is inte",6/30/05ProjectA - TIM - 1832,EngCntrl Test Scripts: RVM and fsw_test_03 contain a requirement (3.4.7.8.1) not found within the EngCntrl SRS.,2,The RVM and fsw_test_34 contain a requirement not found within the EngCntrl SRS. This leads to the question as to whether or not the SRS was the baselined set of requirements. Referenced Test Script Requirement 3.4.7.8.1: Pending Mode Transition Request Check The Operational software shall verify a pervious mode transition has not been requested during this iteration of the control loop. The Operation software shall indicate a MODE CHANGE error if a previous mode change request is pending and the pending mode change request shall be changed to transition to the SAFE mode. Referenced RVM Requirement 3.4.7.8.1: Pending Mode Transition Request Check The Operational software shall verify a pervious mode transition has not been requested during this iteration of the control loop. The Operation software shall indicate a MODE CHANGE error if a previous mode change request is pending and the pending mode change request shall be changed to transition to the SAFE mode.,6/30/05ProjectA - TIM - 1831,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.8.7 inconsistent with RVM and fsw_test_34,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_34 requirement text. The RVM and test script text for the ""XSPLYSET"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of an ""XPSLYCNT"" command, and the SRS discusses a ""XSPLYSET"" command. The command name is incorrect in the RVM and test script version of the requirement. Also, the EngCntrl SRS requirement for the ""XSPLYSET "" is numbered 3.4.8.7 and the RVM and test script requirement for ""XSPLYSET"" is numbered 3.4.7.7. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.8.7: XSPLYSET The XSPLYSET command is used to change the setpoint value of individual power supplies in the indicated PPU. This command is intended for ground testing. Referenced Test Script Requirement 3.4.7.7: XSPLYSET The XPSLYCNT command is used to change the setpoint value of individual power supplies in the indicated PPU. This command is intended for ground testing. Referenced RVM Requirement 3.4.7.7: XSPLYSET The XPSLYCNT command is used to change the setpoint value of individual power supplies in the indicated PPU. This command is intended for ground testing.",6/30/05ProjectA - TIM - 1830,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.8.6 inconsistent with RVM and fsw_test_34,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_34 requirement text. The RVM and test script text for the ""XSPLYCNT"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of an ""XPSLYCNT"" command in the text portion and ""XSPLYCTL"" in the Short Title. The SRS discusses an ""XSPLYCNT"" command. The command name is referenced inconsistently. Also, the EngCntrl SRS requirement for the ""XSPLYCNT "" is numbered 3.4.8.6 and the RVM and test script requirement for ""XPSLYCNT"" is numbered 3.4.7.6. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.8.6: XSPLYCNT The XSPLYCNT command is used to enable or disable individual power supplies in the indicated PPU. This command is intended for ground testing. Referenced Test Script Requirement 3.4.7.6: XSPLYCTL The XPSLYCNT command is used to enable or disable individual power supplies in the indicated PPU. This command is intended for ground testing. Referenced RVM Requirement 3.4.7.6: XSPLYCTL The XPSLYCNT command is used to enable or disable individual power supplies in the indicated PPU. This command is intended for ground testing.",6/30/05ProjectA - TIM - 1829,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.35.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.35.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.35.3: Command Execution The Operational software shall change the specified EngCntrl Telemetry Calibration Table entry upon reception of this command and successful command validation.,6/30/05ProjectA - TIM - 1828,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.35.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.35.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.35.2: Data Value Parameter Check The Operational software is not required to check the validity of the table data values.,6/30/05ProjectA - TIM - 1827,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.35.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.35.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.35.1: Telemetry Channel Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Telemetry Channel Number parameter is not valid and the command will be ignored.,6/30/05ProjectA - TIM - 1826,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.35 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.35 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.35: XDAQCALT The XDAQCALT command is used to update a EngCntrl Telemetry Calibration table entry.,6/30/05ProjectA - TIM - 1825,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.34.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.34.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.34.3: Command Execution The Operational software shall change the specified PPU Telemetry Calibration Table entry upon reception of this command and successful command validation.,6/30/05ProjectA - TIM - 1824,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.34.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.34.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.34.2: Data Value Parameter Check The Operational software is not required to check the validity of the table data values.,6/30/05ProjectA - TIM - 1823,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.34.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.34.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.34.1: Telemetry Channel Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Telemetry Channel Number parameter is not valid and the command will be ignored.,6/30/05ProjectA - TIM - 1822,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.34 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.34 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.34: XPATCALT The XPATCALT command is used to update a PPU Telemetry Calibration table entry.,6/29/05ProjectA - TIM - 1821,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.33.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.33.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.33.3: Command Execution The Operational software shall change the specified PPU Power Supply Calibration Table entry upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1820,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.33.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.33.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.33.2: Data Value Parameter Check The Operational software is not required to check the validity of the table data values.,6/29/05ProjectA - TIM - 1819,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.33.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.33.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.33.1: Supply Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Supply Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1818,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.33 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.33 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.33: XPASCALT The XPASCALT command is used to update a PPU Power Supply Calibration table entry.,6/29/05ProjectA - TIM - 1817,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.32.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.32.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.32.3: Command Execution The Operational software shall change the specified Pressure Transducer Calibration Table entry upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1816,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.32.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.32.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.32.2: Data Value Parameter Check The Operational software is not required to check the validity of the table data values.,6/29/05ProjectA - TIM - 1815,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.32.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.32.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.32.1: Pressure Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Pressure Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1814,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.32 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.32 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.32: XPACCLUT The XPACCLUT command is used to update a Pressure Transducer Calibration table entry.,6/29/05ProjectA - TIM - 1813,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.31.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.31.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.31.3: Memory Fault Protection Disable The Operational software shall disable the memory fault protection by disabling the interrupt source associated with the specified memory fault type.,6/29/05ProjectA - TIM - 1812,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.31.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.31.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.31.2: Memory Fault Protection Enable The Operational software shall enable the memory fault protection by enabling the interrupt source associated with the specified memory fault type.,6/29/05ProjectA - TIM - 1811,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.31.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.31.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.31.1: Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the command parameters are not valid.,6/29/05ProjectA - TIM - 1810,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.31 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.31 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.31: XFAULTPRT The XFAULTPRT command is used to enable and disable various fault protection function of the Operational Software.,6/29/05ProjectA - TIM - 1809,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.30.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.30.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.30.3: Enable Memory Scrub The Operational shall enable the Memory Scrub function of the Idle process when all checks have passed.,6/29/05ProjectA - TIM - 1808,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.30.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.30.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.30.2: Memory Scrub In Progress Check The Operational shall indicate a MEMORY SCRUB IN PROGRESS error if the Idle Process is currently scrubbing the CPU memory. The memory scrub operation will not be aborted or restarted.,6/29/05ProjectA - TIM - 1807,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.30.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.30.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.30.1: Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the memory address parameters are not valid.,6/29/05ProjectA - TIM - 1806,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.30 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.30 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.30: XSCRBMEM The XSCRBMEM command is used to enable the memory scrub function of the Idle Process task.,6/29/05ProjectA - TIM - 1805,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.29.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.29.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.29.2: Command Execution The Operational software shall change the specified run-time parameter entry upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1804,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.29.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.29.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.29.1: XRTDBASE The XRTDBASE command is used to update run-time parameters used by the Operational software.,6/29/05ProjectA - TIM - 1803,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.29 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.29 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.29: XRTDBASE The XRTDBASE command is used to update run-time parameters used by the Operational software.,6/29/05ProjectA - TIM - 1802,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.28.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.28.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.28.2: Command Execution The Operational software shall update the EngCntrl time value upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1801,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.28.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.28.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.28.1: Current Mode Check The Operational software shall indicate a COMMAND NOT VALID IN CURRENT MODE error if the current mode is not STANDBY or SAFE and the command will be ignored.,6/29/05ProjectA - TIM - 1800,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.28 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.28 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.28: XSSCTIME The XSSCTIME command is used to update the EngCntrl time counter with the time value received from the spacecraft time broadcast.,6/29/05ProjectA - TIM - 1799,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.27.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.27.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.27.2: Command Execution The Operational software shall adjust the EngCntrl time value upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1798,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.27.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.27.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.27.1: Current Mode Check The Operational software shall indicate a COMMAND NOT VALID IN CURRENT MODE error if the current mode is not STANDBY or SAFE and the command will be ignored.,6/29/05ProjectA - TIM - 1797,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.27 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.27 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.27: XADJTIME The XADJTIME command is used adjust the EngCntrl time counter by a signed value.,6/29/05ProjectA - TIM - 1796,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.26.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.26.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.26.2: Command Execution The Operational software shall update the EngCntrl time value upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1795,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.26.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.26.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.26.1: Current Mode Check The Operational software shall indicate a COMMAND NOT VALID IN CURRENT MODE error if the current mode is not STANDBY or SAFE and the command will be ignored.,6/29/05ProjectA - TIM - 1794,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.26 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.26 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.26: XSETTIME The XSETTIME command is used load a value into the EngCntrl time counter.,6/29/05ProjectA - TIM - 1793,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.25.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.25.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.25.1: Command Execution The Operational software shall start execution of the Bootloader software upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1792,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.25 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.25 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.25: XBOOTLDR The XBOOTLDR command is used terminate the Operational software and start the Bootloader software,6/29/05ProjectA - TIM - 1791,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.24.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.24.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.24.1: Command Execution The Operational software shall restart upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1790,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.24 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.24 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.24: XEngCntrlRST The XEngCntrlRST command is used reset the Operational software.,6/29/05ProjectA - TIM - 1789,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.23.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.23.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.23.1: Command Execution The Operational software shall update the memory peek address used by the Telemetry Update process.,6/29/05ProjectA - TIM - 1788,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.23 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.23 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.23: XPEEKMEM The XPEEKMEM command is used to specify the start address to be used when the Telemetry Update task report the memory peek data.,6/29/05ProjectA - TIM - 1787,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.22.2 is missing from RVM and test scripts,2,"The EngCntrl SRS requirement 3.4.8.22.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.22.2: Command Execution The Operational software shall write the value in the command if the command has passed all checks. When 32-bit data is specified, the Operational software shall write the lower 16-bit word first.",6/29/05ProjectA - TIM - 1786,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.22.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.22.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.22.1: Data Type Verification The Operational software shall verify the XPOKEMEM command specifies a valid data type. The Operational software shall indicate an INVALID COMMAND PARAMETER error if the data type is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1785,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.22 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.22 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.22: XPOKEMEM The XPOKEMEM command is used to write a data value into a specified memory location in the CPU address space.,6/29/05ProjectA - TIM - 1784,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.21.4 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.21.4 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.21.4: Command Execution The Operational software shall change the specified Pressure Setpoint Correction Table entry upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1783,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.21.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.21.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.21.3: Table Entry Parameter Check The Operational software is not required to check the validity of the table parameters.,6/29/05ProjectA - TIM - 1782,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.21.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.21.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.21.2: Row Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Row Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1781,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.21.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.21.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.21.1: Table Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Table Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1780,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.21 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.21 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.21: XPARCLUT The XPARCLUT command is used to update a Pressure Setpoint Correction table entry.,6/29/05ProjectA - TIM - 1779,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.20.4 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.20.4 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.20.4: Command Execution The Operational software shall change the specified Pressure Correction Table entry upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1778,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.20.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.20.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.20.3: Table Entry Parameter Check The Operational software is not required to check the validity of the table parameters.,6/29/05ProjectA - TIM - 1777,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.20.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.20.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.20.2: Row Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Row Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1776,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.20.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.20.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.20.1: Table Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Table Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1775,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.20 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.20 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.20: XPAMCLUT The XPAMCLUT command is used to update a Pressure Correction table entry.,6/29/05ProjectA - TIM - 1774,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.19.4 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.19.4 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.19.4: Command Execution The Operational software shall change the specified Throttle Table entry upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1773,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.19.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.19.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.19.3: Current Mode Check The Operational software shall indicate a COMMAND NOT VALID IN CURRENT MODE error if the current mode is not STANDBY or SAFE and the command will be ignored.,6/29/05ProjectA - TIM - 1772,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.19.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.19.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.19.2: Table Entry Parameter Check The Operational software is not required to check the validity of the table parameters.,6/29/05ProjectA - TIM - 1771,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.19.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.19.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.19.1: Power Level Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the power level is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1770,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.19 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.19 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.19: XTHROTAB The XTHROTAB command is used to used to upload new throttle table values for a specified power level.,6/29/05ProjectA - TIM - 1769,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.18.4 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.18.4 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.18.4: Command Execution The Operational software shall change the pulse width control parameter defined in the command upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1768,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.18.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.18.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.18.3: Pulse Width Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Pulse Width parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1767,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.18.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.18.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.18.2: Mode Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Mode parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1766,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.18.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.18.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.18.1: Pulse Width Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Pulse Width Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1765,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.18 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.18 is missing from RVM and the test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.18: XPLSWDTH The XPLSWDTH command is used to change the pulse width parameters used to control both solenoid valve and latch valves. This command is intended for ground testing.,6/29/05ProjectA - TIM - 1764,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.17.4 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.17.4 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.17.4: Command Execution The Operational software shall operate specified solenoid or regulator pairs defined in the command upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1763,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.17.3 is missing from test scripts,2,The EngCntrl SRS requirement 3.4.8.17.3 is missing from the test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.17.3: Pulse Width Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Pulse Width parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1762,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.17.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.17.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.17.2: Cycle Mode Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Cycle Mode parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1761,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.17.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.17.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.17.1: Valve Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Valve Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1760,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.17 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.17 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.17: XSOLVCTL The XSOLVCTL command is used to operate individual solenoid valves or regulator valve pairs in the XFS. This command is intended for ground testing.,6/29/05ProjectA - TIM - 1759,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.16.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.16.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.16.3: Command Execution The Operational software shall command the Latch valve specified to open or closed upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1758,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.16.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.16.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.16.2: Open/Close Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Open/Close parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1757,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.16.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.16.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.16.1: Valve Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Valve Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1756,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.16 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.16 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.16: XLATVCTL The XLATVCTL command is used to open or close individual latch valves in the XFS. This command is intended for ground testing.,6/29/05ProjectA - TIM - 1755,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.15.5 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.15.5 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.15.5: Command Execution The Operational software shall request a mode transition to INIT RUN mode upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1754,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.15.4 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.15.4 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.15.4: Pending Mode Transition Request Check The Operational software shall verify a pervious mode transition has not been requested during this iteration of the control loop. The Operation software shall indicate a MODE CHANGE error if a previous mode change request is pending and the command will be ignored.,6/29/05ProjectA - TIM - 1753,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.15.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.15.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.15.3: Current Mode Check The Operational software shall indicate a COMMAND NOT VALID IN CURRENT MODE error if the current mode is not STANDBY and the command will be ignored.,6/29/05ProjectA - TIM - 1752,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.15.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.15.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.15.2: Cathode Flow Regulator Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Cathode Flow Regulator Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1751,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.15.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.15.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.15.1: Main Flow Regulator Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Main Flow Regulator Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1750,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.15 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.15 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.15: XINITXFS The XINITXFS command is used to request the Operational software to transition to the INIT XFS mode.,6/29/05ProjectA - TIM - 1749,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.14.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.14.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.14.3: Command Execution The Operational software shall set the XFS control mode upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1748,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.14.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.14.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.14.2: Current Mode Check The Operational software shall indicate a COMMAND NOT VALID IN CURRENT MODE error if the current mode is not STANDBY and the command will be ignored.,6/29/05ProjectA - TIM - 1747,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.14.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.14.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.14.1: Single Plenum Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Single Plenum parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1746,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.14 is missing from RVM and test scripts,2,"The EngCntrl SRS requirement 3.4.8.14 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.14: XSGLPLNM The XSGLPLNM command is used to set the XFS mode to be used: normal, single plenum main or single plenum cathode.",6/29/05ProjectA - TIM - 1745,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.13.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.13.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.13.2: Command Execution The Operational software shall enable or disable the leak check fault protection upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1744,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.13.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.13.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.13.1: Leak Check Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Leak Check parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1743,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.13 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.13 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.13: XLEAKCHK The XLEAKCHK command is used to enable or disable the XFS leak check fault protection.,6/29/05ProjectA - TIM - 1742,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.12.6 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.12.6 is missing from RVM and the test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.12.6: Command Execution The Operational software shall request a mode transition to XFS RUN mode upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1741,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.12.5 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.12.5 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.12.5: Pending Mode Transition Request Check The Operational software shall verify a pervious mode transition has not been requested during this iteration of the control loop. The Operation software shall indicate a MODE CHANGE error if a previous mode change request is pending and the command will be ignored.,6/29/05ProjectA - TIM - 1740,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.12.4 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.12.4 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.12.4: Current Mode Check The Operational software shall indicate a COMMAND NOT VALID IN CURRENT MODE error if the current mode is not STANDBY and the command will be ignored.,6/29/05ProjectA - TIM - 1739,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.12.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.12.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.12.3: Engine Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Engine Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1738,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.12.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.12.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.12.2: Cathode Flow Regulator Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Cathode Flow Regulator Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1737,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.12.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.12.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.12.1: Main Flow Regulator Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Main Flow Regulator Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1736,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.12 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.12 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.12: XRUNXFS The XRUNXFS command is used to request the Operational software to transition to the RUN XFS mode.,6/29/05ProjectA - TIM - 1735,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.11.3 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.11.3 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.11.3: Command Execution The Operational software shall enable or disable the Diode Mode of Operation upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1734,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.11.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.11.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.11.2: Diode Mode Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Diode Mode parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1733,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.11.1 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.11.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.11.1: Thruster Number Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Thruster Number parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1732,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.11 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.11 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.11: XDIODMOD The XDIODMOD command is used to enable/disable the Diode Mode of operation to be used during the THRUST mode operations.,6/29/05ProjectA - TIM - 1731,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.10.2 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.10.2 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.10.2: Command Execution The Operational software shall enable or disable the beam control algorithm upon reception of this command and successful command validation.,6/29/05ProjectA - TIM - 1730,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.10.1 is missing from the RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.10.1 is missing from the RVM and test scripts. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.10.1: Beam Control Parameter Check The Operational software shall indicate an INVALID COMMAND PARAMETER error if the Beam Control parameter is not valid and the command will be ignored.,6/29/05ProjectA - TIM - 1729,EngCntrl Test Scripts: EngCntrl SRS requirement 3.4.8.10 is missing from RVM and test scripts,2,The EngCntrl SRS requirement 3.4.8.10 is missing from RVM and test scripts; however part of the requirement text is found within the 3.4.7.9.2 requirement description within the RVM. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced EngCntrl SRS Requirement 3.4.8.10: XBEAMCTL The XBEAMCTL command is used to enable or disable the beam control algorithm. This command is intended for ground testing. Referenced EngCntrl SRS Requirement 3.4.7.9.2: Command Execution The Operational software shall change the selected throttle table entry upon reception of this command and successful command validation. 3.4.7.10 XBEAMCTL The XBEAMCTL command is used to enable or disable the beam control algorithm. This command is inte,6/29/05ProjectA - TIM - 1728,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.8.1.2 inconsistent with RVM and fsw_test_34,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_34 requirement text. The RVM and test script text for the ""Pending Mode Transition Request Check"" is different than the SRS in that the RVM and test script contain an additional requirement. Also, the EngCntrl SRS requirement for the ""Pending Mode Transition Request Check"" is numbered 3.4.8.1.2 and the RVM and test script requirement for ""Pending Mode Transition Request Check"" is numbered 3.4.7.1.2. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.8.1.2: Pending Mode Transition Request Check The Operational software shall verify a previous mode transition has not been requested during this iteration of the control loop. The Operation software shall indicate a MODE CHANGE error if a previous mode change request is pending. Referenced Test Script Requirement 3.4.7.1.2: Pending Mode Transition Request Check The Operational software shall verify a previous mode transition has not been requested during this iteration of the control loop. The Operation software shall indicate a MODE CHANGE error if a previous mode change request is pending. The Operation software shall ignore the command if the pending mode transition request is for SAFE mode. Referenced RVM Requirement 3.4.7.1.2: Pending Mode Transition Request Check The Operational software shall verify a previous mode transition has not been requested during this iteration of the control loop. The Operation software shall indicate a MODE CHANGE error if a previous mode change request is pending. The Operation software shall ignore the command if the pending mode transition request is for SAFE mode.",6/29/05ProjectA - TIM - 1727,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.6.3 inconsistent with RVM and fsw_test_03,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_03 requirement text. The RVM and test script text for the ""Parameter Check"" is different than the SRS in that they discuss different conditionals for the ""INVALID COMMAND PARAMETER error"". Also, the EngCntrl SRS requirement for the ""Parameter Check"" is numbered 3.4.7.6.3 and the RVM and test script requirement for ""Parameter Check"" is numbered 3.4.6.6.3. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.6.3: Parameter Check The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the memory address parameters are not valid. Referenced Test Script Requirement 3.4.6.6.3: Parameter Check The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the memory segment and memory offset command parameters are not valid. Referenced RVM Requirement 3.4.6.6.3: Parameter Check The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the memory segment and memory offset command parameters are not valid.",6/29/05ProjectA - TIM - 1726,"EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.6.1, fsw_test_03, and RVM inconsistent with each other",2,"The EngCntrl SRS, fsw_test_03, and RVM requirement text do not agree with each other. The test script text for the ""Checksum Calculation In Progress Check"" is different than the SRS and the RVM in that the test script text discusses the requirement in terms of a ""BSRBMEM"" command, the SRS discusses a ""BSCRBMEM"" command, and the RVM discusses the requirement in terms of a ""XSRBMEM"" command. The command name is inconsistent in all three sources. Also, the EngCntrl SRS requirement for the ""Checksum Calculation In Progress Check"" is numbered 3.4.7.6.1 and the RVM and test script requirement for ""Checksum Calculation In Progress Check"" is numbered 3.4.6.6.1. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.6.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a BSCRBMEM command is received and the command will be ignored. Referenced Test Script Requirement 3.4.6.6.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a BSRBMEM command is received and the command will be ignored. Referenced RVM Requirement 3.4.6.6.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XSRBMEM command is received and the command will be ignored.",6/29/05ProjectA - TIM - 1725,"EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.6, fsw_test_03, and RVM inconsistent with each other",2,"The EngCntrl SRS, fsw_test_03 requirement, and RVM text do not agree with each other. The test script text for the ""BSCRBMEM"" is different than the SRS in that the test script text discusses the requirement in terms of a ""BSRBMEM"" command, the SRS discusses a ""BSCRBMEM"" command, and the RVM discusses an ""XSRBMEM"" command. The command name is inconsistent in all three sources. Also, the EngCntrl SRS requirement for the ""BSCRBMEM"" is numbered 3.4.7.6, the test script requirement for ""BSRBMEM"" is numbered 3.4.6.6, and the RVM requirement for ""XSRBMEM"" is numbered 3.4.6.6. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.6: BSCRBMEM The BSCRBMEM command is used to enable the memory scrub function of the Idle Process task. Referenced Test Script Requirement 3.4.6.6: BSRBMEM The BSRBMEM command is used to enable the memory scrub function of the Idle Process task. Referenced Test Script Requirement 3.4.6.6: XSRBMEM The XSRBMEM command is used to enable the memory scrub function of the Idle Process task.",6/28/05ProjectA - TIM - 1724,EngCntrl Test Scripts: fsw_test_03 and RVM contain a requirement (3.4.6.5.1) not found within the EngCntrl SRS,2,fsw_test_03 and RVM contain a requirement not found within the EngCntrl SRS. This leads to the question as to whether or not the SRS is the baselined set of requirements. Referenced Test Script Requirement 3.4.6.5.1: Address Range Check The Bootloader software shall check if the specified address will result in a illegal access error. The Bootloader shall indicate a BAD PEEK ADDRESS error if the specified address will cause an illegal access and will adjust the peek address prior to changing the Telemetry Update memory peek address to prevent the problem. Referenced RVM Requirement 3.4.6.5.1: Address Range Check The Bootloader software shall check if the specified address will result in a illegal access error. The Bootloader shall indicate a BAD PEEK ADDRESS error if the specified address will cause an illegal access and will adjust the peek address prior to changing the Telemetry Update memory peek address to prevent the problem.,6/28/05ProjectA - TIM - 1723,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.3.3 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""Enable Checksum Calculation"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of an XSTARTSW command, and the SRS discusses a BSTARTSW command. The command name is different in the versions of the requirement text. No reference to the XSTARTSW command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""Enable Checksum Calculation"" is numbered 3.4.7.3.3 and the RVM and test script requirement for ""Enable Checksum Calculation"" is numbered 3.4.6.3.3. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.3.3: Enable Checksum Calculation The Bootloader software shall enable the Idle Process task to calculate the Operational software checksum when the BSTARTSW is received and the Idle Process task is not currently calculating the checksum. Referenced Test Script Requirement 3.4.6.3.3: Enable Checksum Calculation The Bootloader software shall enable the Idle Process task to calculate the Operational software checksum when the XSTARTSW is received and the Idle Process task is not currently calculating the checksum. Referenced RVM Requirement 3.4.6.3.3: Enable Checksum Calculation The Bootloader software shall enable the Idle Process task to calculate the Operational software checksum when the XSTARTSW is received and the Idle Process task is not currently calculating the checksum.",6/28/05ProjectA - TIM - 1722,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.3.1 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""Checksum Calculation In Progress Check"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of an XSTARTSW command, and the SRS discusses a BSTARTSW command. The command name is different in the two versions of the requirement text. No reference to the XSTARTSW command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""Checksum Calculation In Progress Check"" is numbered 3.4.7.3.1 and the RVM and test script requirement for ""Checksum Calculation In Progress Check"" is numbered 3.4.6.3.1. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.3.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a BSTARTSW command is received and the command will be ignored. Referenced Test Script Requirement 3.4.6.3.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XSTARTSW command is received and the command will be ignored. Referenced RVM Requirement 3.4.6.3.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XSTARTSW command is received and the command will be ignored.",6/28/05ProjectA - TIM - 1721,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.3 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""XSTARTSW"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of an XSTARTSW command, and the SRS discusses a BSTARTSW command. The command name is different in the two versions of the requirement text. No reference to the XSTARTSW command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""BSTARTSW"" is numbered 3.4.7.3 and the RVM and test script requirement for ""XSTARTSW"" is numbered 3.4.6.3. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.3: BSTARTSW The BSTARTSW command is used to start the process of terminating the Bootloader software and transiting to the Operational software. This process involves the calculation of the Operational code checksum, comparing the results with a value stored in the EEPROM and then transition if the checksum passes. Referenced Test Script Requirement 3.4.6.3: XSTARTSW The XSTARTSW command is used to start the process of terminating the Bootloader software and transiting to the Operational software. This process involves the calculation of the Operational code checksum comparing the results with a value stored in the EEPROM and then transition if the checksum passes. Referenced RVM Requirement 3.4.6.3: XSTARTSW The XSTARTSW command is used to start the process of terminating the Bootloader software and transiting to the Operational software. This process involves the calculation of the Operational code checksum, comparing the results with a value stored in the EEPROM and then transition if the checksum passes.",6/28/05ProjectA - TIM - 1720,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.2.2 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""Enable Checksum Calculation"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of an XCALCKSM command, and the SRS discusses a BCALCKSM command. The command name is different in the versions of the requirement text. No reference to the XCALCKSM command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""Enable Checksum Calculation"" is numbered 3.4.7.2.2 and the RVM and test script requirement for ""Enable Checksum Calculation"" is numbered 3.4.6.2.2. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.2.2: Enable Checksum Calculation The Bootloader software shall enable the Idle Process task to calculation the Operational software checksum when the BCALCKSM is received and the Idle Process task is not currently calculating the checksum. Referenced Test Script Requirement 3.4.6.2.2: Enable Checksum Calculation The Bootloader software shall enable the Idle Process task to calculation the Operational software checksum when the XCALCKSM is received and the Idle Process task is not currently calculating the checksum. Referenced RVM Requirement 3.4.6.2.2: Enable Checksum Calculation The Bootloader software shall enable the Idle Process task to calculation the Operational software checksum when the XCALCKSM is received and the Idle Process task is not currently calculating the checksum.",6/28/05ProjectA - TIM - 1719,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.2.1 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""Checksum Calculation In Progress Check"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of an XCALCKSM command, and the SRS discusses a BCALCKSM command. The command name is different in the versions of the requirement text. No reference to the XCALCKSM command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""Checksum Calculation In Progress Check"" is numbered 3.4.7.2.1 and the RVM and test script requirement for ""Checksum Calculation In Progress Check"" is numbered 3.4.6.2.1. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.2.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a BCALCKSM command is received and the command will be ignored. Referenced Test Script Requirement 3.4.6.2.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XCALCKSM command is received and the command will be ignored. Referenced RVM Requirement 3.4.6.2.1: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XCALCKSM command is received and the command will be ignored.",6/28/05ProjectA - TIM - 1718,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.2 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""XCALCKSM "" is different than the SRS in that the RVM and test script text discuss the XCALCKSM command and states: ""The XCALCKSM command does not contain any commands"", and the SRS discusses the BCALCKSM command and states: ""The BCALCKSM command does not contain any parameters"". The command name is different in the versions of the requirement text. No reference to the XCALCKSM command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""BCALCKSM "" is numbered 3.4.7.2 and the RVM and test script requirement for ""XCALCKSM "" is numbered 3.4.6.2. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.2: BCALCKSM The BCALCKSM command is used to initiate calculation of the checksum value of the Operation software. The checksum is calculated in a background process during the Idle Process task. The BCALCKSM command does not contain any parameters. Referenced Test Script Requirement 3.4.6.2: XCALCKSM The XCALCKSM command is used to initiate calculation of the checksum value of the Operation software. The checksum is calculated in a background process during the Idle Process task. The XCALCKSM command does not contain any commands. Referenced RVM Requirement 3.4.6.2: XCALCKSM The XCALCKSM command is used to initiate calculation of the checksum value of the Operation software. The checksum is calculated in a background process during the Idle Process task. The XCALCKSM command does not contain any commands.",6/28/05ProjectA - TIM - 1717,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.1.5 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""Memory Scrub In Progress Check"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of the operational software (XLOADCODE) and the SRS discusses the requirement in terms of the bootloader software (BLOADCODE). The command name is different in the versions of the requirement text. No reference to the XLOADCODE command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""Memory Scrub In Progress Check"" is numbered 3.4.7.1.5 and the RVM and test script requirement for ""Memory Scrub In Progress Check"" is numbered 3.4.6.1.5. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.1.5: Memory Scrub In Progress Check The Bootloader shall indicate a MEMORY SCRUB IN PROGRESS error if the Idle Process is currently scrubbing the CPU memory and will terminate the memory scrub operation. The Bootloader software shall write the data specified in the BLOADCODE command. Referenced Test Script Requirement 3.4.6.1.5: Memory Scrub In Progress Check The Bootloader shall indicate a MEMORY SCRUB IN PROGRESS error if the Idle Process is currently scrubbing the CPU memory and will terminate the memory scrub operation. The Bootloader software shall write the data specified in the XLOADCODE command. Referenced RVM Requirement 3.4.6.1.5: Memory Scrub In Progress Check The Bootloader shall indicate a MEMORY SCRUB IN PROGRESS error if the Idle Process is currently scrubbing the CPU memory and will terminate the memory scrub operation. The Bootloader software shall write the data specified in the XLOADCODE command.",6/28/05ProjectA - TIM - 1716,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.1.4 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""Checksum Calculation In Progress Check"" is different than the SRS in that the RVM and test script text discuss the requirement in terms of the operational software (XLOADCODE) and the SRS discusses the requirement in terms of the bootload software (BLOADCODE). The command name is different in the two versions of the requirement text. No reference to the XLOADCODE command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""Checksum Calculation In Progress Check"" is numbered 3.4.7.1.4 and the RVM and test script requirement for ""Checksum Calculation In Progress Check"" is numbered 3.4.6.1.4. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.1.4: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a BLOADCODE command is received and the command will be ignored. Referenced Test Script Requirement 3.4.6.1.4: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XLOADCODE command is received and the command will be ignored. Referenced RVM Requirement 3.4.6.1.4: Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XLOADCODE command is received and the command will be ignored.",6/28/05ProjectA - TIM - 1715,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.1.3 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""Data Write"" is different than the SRS in that the RVM and test script text discuss an exception to when to write data as 16-bit words and the SRS does not. Also, the EngCntrl SRS requirement for the ""Data Write"" is numbered 3.4.7.1.3 and the RVM and test script requirement for ""Data Write"" is numbered 3.4.6.1.3. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.1.3: Data Write The Bootloader software shall write data as 16-bit words. Referenced Test Script Requirement 3.4.6.1.3: Data Write The Bootloader software shall write data as 16-bit words when possible the exception is when the start address is odd or an odd number of bytes are specified. Referenced RVM Requirement 3.4.6.1.3: Data Write The Bootloader software shall write data as 16-bit words when possible, the exception is when the start address is odd or an odd number of bytes are specified.",6/28/05ProjectA - TIM - 1714,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.1.2 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text for the ""EEPROM Data Size Verification"" requirement. The command name specified in the RVM and requirement text is different: ""XLOADCODE"" vs ""BLOADCODE"". In addition, the requirements specify explictly different values for which the the Bootloader software is to verify: “more than 48 bytes are to be written” versus “more than 28 words are to be written”. Also, the EngCntrl SRS requirement for the ""EEPROM Data Size Verification"" is numbered 3.4.7.1.2 and the RVM and test script requirement for ""EEPROM Data Size Verification"" is numbered 3.4.6.1.2. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.1.2: EEPROM Data Size Verification The Bootloader software shall verify the BLOADCODE command does not specify more than 28 words are to be written. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the number of words is not valid and the command will be ignored. Referenced Test Script Requirement 3.4.6.1.2: EEPROM Data Size Verification The Bootloader software shall verify the XLOADCODE command does not specify more than 48 bytes are to be written. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the number of bytes is not valid and the command will be ignored. Referenced RVM Requirement 3.4.6.1.2: EEPROM Data Size Verification The Bootloader software shall verify the XLOADCODE command does not specify more than 48 bytes are to be written. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the number of bytes is not valid and the command will be ignored.",6/28/05ProjectA - TIM - 1713,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.1.1 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The RVM and test script text for the ""EEPROM Address Verification "" is different than the SRS in that the RVM and test script text discuss the requirement in terms of the operational software (XLOADCODE) and the SRS discusses the requirement in terms of the bootloader software (BLOADCODE). The command name is different in the three versions of the requirement text. No reference to the XLOADCODE command is found in the EngCntrl V1.2 SRS. Also, the EngCntrl SRS requirement for the ""EEPROM Address Verification"" is numbered 3.4.7.1.1 and the RVM and test script requirement for ""EEPROM Address Verification"" is numbered 3.4.6.1.1. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.1.1: EEPROM Address Verification The Bootloader software shall verify the BLOADCODE command does not specify an address within the write protected region of the EEPROM. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the address is not valid and the command will be ignored. Referenced Test Script Requirement 3.4.6.1.1: EEPROM Address Verification The Bootloader software shall verify the XLOADCODE command does not specify an address within the write protected region of the EEPROM. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the address is not valid and the command will be ignored. Referenced RVM Requirement 3.4.6.1.1: EEPROM Address Verification The Bootloader software shall verify the XLOADCODE command does not specify an address within the write protected region of the EEPROM. The Bootloader software shall indicate an INVALID COMMAND PARAMETER error if the address is not valid and the command will be ignored.",6/28/05ProjectA - TIM - 1712,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.7.1 inconsistent with RVM and fsw_test_04,2,"The EngCntrl SRS does not agree with the RVM and fsw_test_04 requirement text. The requirement text in the RVM and test script for the ""XLOADCODE"" is different than the SRS in that it states: ""the XLOADCODE command is used to load from 1 to 48 bytes of data..."" and the SRS states: ""The BLOADCODE command is used to load from 1 to 28 words of data."" Also, the EngCntrl SRS requirement for the ""BLOADCODE"" is numbered 3.4.7.1 and the test script requirement for ""XLOADCODE"" is numbered 3.4.6.1. The inconsistent requirements text and numbering leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.7.1: BLOADCODE The BLOADCODE command is used to load from 1 to 28 words of data into the non-write protected region of the EEPROM. The BLOADCODE command contains parameters for specifying the address within the EEPROM to start the data write, the number of words to write and the data values. Referenced Test Script Requirement 3.4.6.1: XLOADCODE The XLOADCODE command is used to load from 1 to 48 bytes of data into the non-write protected region of the EEPROM. The XLOADCODE command contains parameters for specifying the address within the EEPROM to start the data write the number of bytes to write and the data values. Referenced RVM Requirement 3.4.6.1: XLOADCODE The XLOADCODE command is used to load from 1 to 48 bytes of data into the non-write protected region of the EEPROM. The XLOADCODE command contains parameters for specifying the address within the EEPROM to start the data write, the number of bytes to write and the data values.",6/27/05ProjectA - TIM - 1711,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.6.1 inconsistent with RVM and fsw_test_32,3,"The EngCntrl SRS does not agree with the RVM and fsw_test_32 requirement text for the ""Command History List"" requirement. The RVM and test script text for the ""Command History List"" is different than the SRS in that it does not discuss that the list of the last four commands received shall exclude GDE specific commands. Also, the EngCntrl SRS requirement for the ""Command History List"" is numbered 3.4.6.1 and the RVM and test script requirement for ""Command History List"" is numbered 3.4.5.1. The intent of the requirement is consistent; however, the fact that the text is different supports the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.6.1: Command History List The EngCntrl Flight software shall maintain a list of the last four commands received. The list shall contain the OPCODE words only and shall exclude GDE specific commands. The EngCntrl Flight software is not required to maintain the command history knowledge when transitioning between software builds. Referenced Test Script Requirement 3.4.5.1: Command History List The EngCntrl Flight software shall maintain a list of the last four commands received. The list shall contain the OPCODE words only. The EngCntrl Flight software is not required to maintain the command history knowledge when transitioning between software builds. Referenced RVM Requirement 3.4.5.1: Command History List The EngCntrl Flight software shall maintain a list of the last four commands received. The list shall contain the OPCODE words only. The EngCntrl Flight software is not required to maintain the command history knowledge when transitioning between software builds.",6/24/05ProjectA - TIM - 1710,"EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.4.1, fsw_test_32, and RVM inconsistent with each other",2,"The EngCntrl SRS, RVM, and fsw_test_32 requirement text do not agree with each other for the ""Subaddress Check"" requirement. The test script text for the ""Subaddress Check"" is different than the SRS and the RVM in that it discusses Bootloader software and Operational software in four versus two separate ""shall"" statements. The RVM text for the ""Subaddress Check"" is different than the SRS and test script in that it discusses ""subaddress 2 and subaddress 9"". Also, the EngCntrl SRS requirement for the ""Subaddress Check"" is numbered 3.4.4.1 and the RVM and test script requirement for ""Subaddress Check"" is numbered 3.4.3.1. This leads to the question as to whether all aspects of the approved SRS requirement were verified. Referenced EngCntrl SRS Requirement 3.4.4.1: Subaddress Check The EngCntrl software shall only accept commands received via subaddress 2. The EngCntrl software shall indicate a COMMAND SUBADDRESS error if data is received in any subaddress other than subaddress 2 and the command will be ignored. Referenced Test Script Requirement 3.4.3.1: Subaddress Check The Bootloader software shall only accept commands received via subaddress 2. The Bootloader software shall indicate a COMMAND SUBADDRESS error if data is received in any subaddress other than subaddress 2 and the command will be ignored. The Operational software shall only accept commands received via subaddress 2. The Operational software shall indicate a COMMAND SUBADDRESS error if data is received in any subaddress other than subaddress 2 and the command will be ignored. Referenced RVM Requirement 3.4.3.1: Subaddress Check The Bootloader software shall only accept commands received via subaddress 2. The Bootloader software shall indicate a COMMAND SUBADDRESS error if data is received in any subaddress other than subaddress 2 and the command will be ignored. The Operational software shall only accept commands received via subaddress 2 and subaddress 9. The Operational software shall indicate a COMMAND SUBADDRESS error if data is received in any subaddress other than subaddress 2 or subaddress 9 and the command will be ignored.",6/22/05ProjectA - TIM - 1709,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.4.3 inconsistent with RVM and fsw_test_32,2,"The EngCntrl SRS and the RVM do not agree with the fsw_test_32 requirement text for the ""Command Execution Limit"" requirement. The RVM and test script text for the ""Command Execution Limit"" is different than the SRS in that it states: ""the EngCntrl Flight software shall attempt to execute up to 16 commands..."", where as the SRS states: ""the EngCntrl Flight software shall execute up to 16 commands..."". Also, the requirement number for the ""Command Execution Limit"" requirement is 3.4.3 in the EngCntrl SRS and 3.4.2 in the RVM and test script. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.4.3: Command Execution Limit The EngCntrl Flight software shall execute up to 16 commands received from the host spacecraft during each iteration of the 1 Hz control loop. Referenced Test Script Requirement 3.4.2: Command Execution Limit The EngCntrl Flight software shall attempt to execute up to 16 commands received from the host spacecraft during each iteration of the 1 Hz control loop. Referenced RVM Requirement 3.4.2: Command Execution Limit The EngCntrl Flight software shall attempt to execute up to 16 commands received from the host spacecraft during each iteration of the 1 Hz control loop.",6/22/05ProjectA - TIM - 1708,EngCntrl Test Scripts: RVM and Test Scripts missing EngCntrl SRS v1.2 requirement 3.4.2,2,"The RVM and test scripts do not include EngCntrl SRS requirement 3.4.2. There is no indication in the RVM or the Test Script that requirement 3.4.2 was verified. Review of the DD-310 sheet in the RVM resulted in the identification of a EngCntrl TRD requirement 4.9.3.2, which appears to be the parent to EngCntrl SRS 3.4.2. EngCntrl TRD requirement 4.9.3.2 is linked in the RVM to EngCntrl FSW tests ""Nominal Standby Mode Test"" (fsw_test_11) and ""Command Parameters Test"" (fsw_test_34). However, there is no Requirements Traceability Matrix that shows the relationshEngine between the EngCntrl TRD and EngCntrl SRS requirements. The EngCntrl TRD requirements are not referenced in any of the FSW test scripts. Referenced EngCntrl SRS Requirement 3.4.2: The EngCntrl Flight Software shall cause the Engine to go to safe mode if no valid 1553 transaction occurs for a period of time greater than 3 seconds. EngCntrl TRD referenced requirement: 4.9.3.2 Command Timeout The EngCntrl shall monitor the Command interface for traffic; if no valid commands or broadcast messages are received for 3 seconds the EngCntrl shall indicate a command lost fault. The fault response to command lost will depend on the mode of the EngCntrl. If the EngCntrl is in Bootload mode or Safe mode, no action will be taken. If the EngCntrl is in any other mode, the EngCntrl will enter Safe mode.",6/22/05ProjectA - TIM - 1707,Incorrect and Incomplete References from the L4 ACS SRS to the ACS Performance Specification,2,"The following sub-issues address incorrect and/or missing links in the ACS L4 Software Requirements Specification (SRS) to the ACS Performance Specification (ACSPS): Sub-Issue #1. L4-SROAC-77 states: AC software shall perform STR data FDIR defined in ACS Performance Specification section 3.2.4.1. The title of this section is: 3.2.4.1 Rate Commands in Acquisition / Coarse Sun Pointing Mode. The referenced ACSPS section has no bearing on ACS FDIR. The reference in the L4 should be to section 3.2.5.1 Star Tracker Fault Detection and Correction. Sub-Issue #2. L4-SROAC-102 states: AC software shall perform mode transition FDIR defined in ACS performance specification section 3.1.3.6 and 3.1.2.4. Section 3.1.2.4 does not exist in the ACSPS. Sub-Issue #3. L4-SROAC-53 states: AC software shall perform IRU data FDIR defined in ACS Performance Specification section 3.2.4.2. The title of this section is: 3.2.4.2 Inertial Target and Body Pointing Vectors in Target Pointing Mode. The referenced ACSPS section has no bearing on ACS FDIR. The reference in the L4 should be to 3.2.5.2 IRU Fault Detection and Correction. Sub-Issue #4. L4-SROAC-70 states: AC software shall perform RWA data FDIR defined in ACS Performance Specification section 3.2.4.4. The title of this section is: 3.2.4.4 Thrust Vector Pointing Trajectory and Engine Thruster Throttling in Delta-V Mode. The referenced ACSPS section has no bearing on ACS FDIR. The reference in the L4 should be to 3.2.5.4 RWA Fault Detection and Correction. Sub-Issue #5. The references in the ACS L4 SRS to the ACSPS address FDIR for only three of the seven ACS sensors and effectors identified in the ACSPS (e.g., there is no reference to FDIR for RCS). IV&V recommends that the Project link each of the requirements for the remaining four sensors and effectors to the appropriate sections in the ACSPS. Referenced specifications: (1) ProjectA Attitude Control Subsystem Performance Specification, S912-PF4610, REVISION C, revision date of October 29, 2004 (signed on November 15, 2004) and (2) ProjectA ACS L4 specification, extracted from the June 9, 2005 DOORS data base.",6/20/05ProjectA - TIM - 1704,ACS Traceability Analysis: Inadequate tracing from L3 Pointing Stability requirements to ACS SRS,3,"The ACS SRS requirements are inadequately traced to the L3 Pointing Stability requirements. The existing trace to L4-SROAC-157 does not adequately fulfill the functionality defined in the L3 requirements. ACS SRS requirement L4-SROAC-147 appears to be applicable to the functionality defined in the Pointing Stability requirements; however the requirements are not linked. L3 Pointing Stability requirements: L3-SFS-105, L3-SFS-2153, L3-SFS-108, and L3-SFS-2335. L3-SFS-105 - During science operations, the Spacecraft System shall be able to limit the Flight System's roll (X) and pitch (Y) rate errors to less than 60 microrad/sec (3 sigma) for a period of at least 30 seconds. L3-SFS-2153 - During science operations, the Spacecraft System shall be able to limit the Flight System's yaw (Z) rate error to less than 250 microrad/sec (3 sigma) for a period of at least 30 seconds. L3-SFS-108 - While it is acquiring opnav images, the Flight System shall be able to limit its roll (X), pitch (Y), and yaw (Z) rates to less than 250 microrad/sec (3 sigma) for a period of at least 30 seconds while under RWA control. Note: Optical navigation is the driver for this requirement. L3-SFS-2335 - When Gravity Science or Navigation measurements are being performed using the HGA, the ACS shall limits its attitude rate errors about the pitch (Y) and yaw (Z) axis to less than or equal to 44 microrad/sec, 3-sigma, provided that RWAs are being used for control and momentum is not being unloaded. These requirements are currently traced to L4-SROAC-157 which states ""The AD software shall propagate and validate the error covariance matrix."" This trace is insufficient as it refers only to attitude determination and not to attitude control. L4-SROAC-147 - The software shall use proportional-integral-derivative (PID) controller for Target Pointing, Delta-V except for Thrust Vector Control (TVC), and Science Mode, proportional-derivative (PD) controller for Acquisition/Coarse Sun Pointing Mode, with only the derivative (rate) term for the Rate Nulling submode. The TVC has a separate controller as described in ACS Performance Specification section 3.2.2.3.",6/17/05ProjectA - TIM - 1703,ACS Traceability Analysis: Incomplete tracing of L4-SROAC-120 – 123,4,"L4-SROAC-120 – 123 are insufficiently traced to the Level 3 requirements. L4-SROAC-120 – 123 state: The ACS mode shall transition from Target Pointing Mode by ground command or automatically to Acquisition/Coarse Sun Pointing, Rate Nulling Submode when one or more of the following occur: L4-SROAC-120 - Attitude errors or body rate errors exceed a specified value for a specified time. L4-SROAC-121 - Invalid ephemeris. L4-SROAC-122 - Kalman Filter divergence. L4-SROAC-123 - Loss of attitude reference. The following L3 requirements appear to describe the functionality described in these ACS requirements; however, currently there are no links between these requirements. L3-SFS-440 - The ACS shall provide autonomous control mode transition and fault detection and correction logic. L3-SFS-441 - The ACS shall provide for ground override of all autonomous function L3-SFS-932 - The Spacecraft ACS shall monitor performance in each mode/sub-mode against configurable thresholds and will notify FP monitors and/or regress to a safer control mode if a violation occurs.",6/17/05ProjectA - TIM - 1702,ACS Traceability Analysis: L3 ACS related requirements with no associated L3 or L4 traces,2,"The following L3 requirements do not have any associated L3 or L4 traces: L3-SFS-853, L3-SFS-855, and L3-SFS-857 through L3-SFS-860. L3-SFS-853 Spacecraft Flight Software shall provide a software element (Ephemeris Services, ES) to maintain geometric information of the spacecraft's location and orientation, specifically - Predicted Inertial position of Earth, Moon, Mars, Vesta, asteroids and other principal solar system bodies as specified by MDN. L3-SFS-855 Spacecraft Flight Software shall provide a software element (Ephemeris Services, ES) to maintain geometric information of the spacecraft's location and orientation, specifically - Desired Inertial pointing direction for science and opnav observations L3-SFS-857 ES ephemerides shall use the Earth-Mean-Equator 2000 reference frame. L3-SFS-858 ES ephemerides shall use 12:00, Jan 1, 2000, Ephemeris Time (ET), as the reference epoch. Time in the ephemerides will be measured in ET seconds from that epoch. L3-SFS-859 The ACS Software shall determine central-body (Sun, asteroid, etc.) relative Flight Software states (position and velocity vs. time) using a set of 30 Chebyshev polynomials provided by the Ground Segment. L3-SFS-860 ES ephemerides shall describe central-body (Sun, asteroid, etc.) relative spacecraft states (position vs. time) using sets of Chebyshev polynomials.",6/17/05ProjectA - TIM - 1701,ACS Traceability Analysis: No traces from the ACS SRS requirements to L3-SFS-695,3,"L3-SFS-695 contains no traces to the ACS SRS; however, it refers to implementing attitude determination and control functions in the Flight Software. L3-SFS-695 - The Flight Software shall implement major functions including: attitude determination and control (ACS), command & data handling (C&DH), thermal control (TCS), and interface support (XB, HSS, SCSA) on required processors.",6/17/05ProjectA - TIM - 1700,ACS Traceability Analysis: Inadequate tracing from ACS SRS requirements to L3-SFS-2478,3,"L3-SFS-2478 is inadequately traced to the ACS SRS. The existing traces do not adequately fulfill the functionality. ACS SRS requirements L4-SROAC-36 and L4-SROAC-95 appear to be applicable to the functionality defined in L3-SFS-2478; however, the requirements are not linked. L3-SFS-2478 - The RCS subsystem shall support telemetry including tank pressure and thruster on times to be able to detect an unexpected loss of propellant before loss of more than 5 kg of propellant. L4-SROAC-36 - The AC software shall maintain statistics on AC command processing status since the last power-on or re-boot and provide these statistics in telemetry. Command statistics include: ACS Jet Commands: • Set Jet Pulse Period, • Set DeltaV Jet Seconds, • Stationkeep Pulse Period L4-SROAC-95 - The AC software shall generate synchronous telemetry to support ground monitoring and analysis of both spacecraft performance and ACS software performance. This telemetry includes, at a minimum: Active AC control mode and submode, Control parameters, Attitude and body rates, Raw attitude sensor and actuator data, Actuator control commands, Sensor and actuator status data, Sensor and actuator temperature, Spacecraft position and velocity, Flags indicating that FDIR limits have or have not been exceeded, Enable/disable status of each FDIR check.",6/17/05ProjectA - TIM - 1699,ACS Traceability Analysis: L3-SFS-98 and L3-SFS-100 have no associated L3 or L4 Inlink traces,2,"L3-SFS-98 and L3-SFS-100 do not have any associated L3 or L4 Inlink traces. L3-SFS-98 states: ""When entering the Acquisition/Coarse Sun Pointing Mode, Sun Acquisition Submode, the ACS shall command the S/A drive position such that each S/A wing's cell side normal is parallel to the FS +X body axis."" L3-SFS-98 is missing traces to ACS SRS requirements to address the ACS funtionality to point the solar array. L3-SFS-100 states ""When in the Target Pointing, Science or Delta-V modes, the ACS shall keep the cell side normal of each S/A parallel to the spacecraft to Sun line through a combination of S/A drive position commands and steering commands about the pointing vector in the body frame."" L3-SFS-100 is missing traces to ACS SRS requirements to address the ACS funtionality to point the solar array. ACS SRS requirements L4-SROAC-91 and L4-SROAC-92 appear to be applicable to the functionality defined in L3-SFS-98 and L3-SFS-100; however, the requirements are not linked. L4-SROAC-91 - ACS FSW shall generate Solar Array Commands to maintain proper orientation of the solar arrays for power generation at 1 Hz. L4-SROAC-92 - SAD commands shall be output to the ACE in all ACS modes.",6/17/05ProjectA - TIM - 1696,ACS Traceability Analysis: Incorrect tracing from ACS SRS requirements to L3-SFS-933,3,The existing trace from ACS requirement L4-SROAC-74 to L3-SFS-933 is incorrect. L3-SFS-933 - The Spacecraft shall provide health status on all ACS components when active L4-SROAC-74 - The spacecraft rate from each STR shall be converted to the body frame,6/17/05ProjectA - TIM - 1695,ACS Traceability Analysis: Incorrect and Inadequate tracing from ACS SRS requirements to L3-SFS-932,3,"L3-SFS-932 is inadequately traced to the ACS SRS. The links from L3-SFS-932 to L4-SROAC-32, L4-SROAC-95, and L4-SROAC-105 are incorrect. Furthermore the ACS SRS requirements L4-SROAC-117, L4-SROAC-118, L4-SROAC-125, L4-SROAC-129, L4-SROAC-130, L4-SROAC-132, L4-SROAC-150, and L4-SROAC-161 appear to be applicable to the functionality defined in L3-SFS-932; however, the requirements are not linked. L3-SFS-932 - The Spacecraft ACS shall monitor performance in each mode/sub-mode against configurable thresholds and will notify FP monitors and/or regress to a safer control mode if a violation occurs. Links recommended for deletion: L4-SROAC-95 - The AC software shall generate synchronous telemetry to support ground monitoring and analysis of both spacecraft performance and ACS software performance. This telemetry includes, at a minimum: Active AC control mode and submode, Control parameters, Attitude and body rates, Raw attitude sensor and actuator data, Actuator control commands, Sensor and actuator status data, Sensor and actuator temperature, Spacecraft position and velocity, Flags indicating that FDIR limits have or have not been exceeded, Enable/disable status of each FDIR check. L4-SROAC-105 - The software shall reject any valid command of an invalid mode, or mode transition, and remain in the current mode. L4-SROAC-32 - Set AC control mode: • Launch Mode, • Acquisition/Coarse Sun Pointing Mode - Rate Nulling Submode, • Acquisition/Coarse Sun Pointing Mode - Sun Acquisition Submode, • Acquisition/Coarse Sun Pointing Mode - Sun Pointing Submode, • Target Pointing Mode • Delta-V Mode - Engine Submode, • Delta-V Mode - RCS Submode, • Science Mode - Asteroid Nadir Pointing Submode, • Science Mode - Asteroid Target Tracking Submode. Links recommended for addition: L4-SROAC-117 - The ACS mode shall transition from Acquisition/Coarse Sun Pointing, Sun Pointing Submode to Sun Acquisition Submode when the Y and Z axis attitude errors exceed specified (table) values for a specified time or there is no Sun presence detected from any CSS 'eyes' for a specified time that exceeds the maximum expected eclEnginee period. L4-SROAC-118 - The ACS mode shall transition from Acquisition/Coarse Sun Pointing, Sun Pointing Submode to Rate Nulling Submode when any axis of the body rate errors exceeds a specified value for a specified time. L4-SROAC-125 - The ACS mode shall transition from Delta-V or Science mode to Target Pointing Inertial Target Submode when the body rate errors or attitude error exceed a specified (table) value for a specified time. L4-SROAC-129 - Transition to Target Pointing Mode shall be rejected if spacecraft loss of attitude reference is detected. L4-SROAC-130 - Transition to Target Pointing Mode shall be rejected if Kalman Filter diverges. L4-SROAC-132 - Transition to Science or Delta-V Mode shall be rejected if spacecraft loss of attitude reference is detected. L4-SROAC-150 - Momentum management performance failures shall be detected. L4-SROAC-161 - If Kalman Filter divergence detected while in Target Pointing, Delta-V, or Science Mode for a specified time, Kalman Filter shall be re-initialized after ACS automatically transitions to Acquisition/Coarse Sun Pointing Mode.",6/17/05ProjectA - TIM - 1694,ACS Traceability Analysis: L3-SFS-899 has no associated L3 or L4 traces,2,"L3-SFS-899 does not have any associated L3 or L4 traces. L3-SFS-899 states: ""The Spacecraft FP design will include transition to Safe Mode for a minimum of the following failure modes: • ACS performance degradation (attitude solution, pointing ability, rate/momentum) • EPS performance degradation (array current, bus voltage, battery charge) • CDH functional degradation (OBC software, critical unit hardware, 1553 data bus) • Telecom functional loss (command timeout)"" L3-SFS-899 is missing traces to ACS SRS requirements to address the ACS funtionality to transition to Safe Mode upon ACS performance degradation. Furthermore the ACS SRS requirements L4-SROAC-119 – 123 appear to be applicable to the functionality described above in L3-SFS-899; however, the requirements are not linked. L4-SROAC-119 – 123 state: The ACS mode shall transition from Target Pointing Mode by ground command or automatically to Acquisition/Coarse Sun Pointing, Rate Nulling Submode when one or more of the following occur: Attitude errors or body rate errors exceed a specified value for a specified time. Invalid ephemeris. Kalman Filter divergence. Loss of attitude reference.",6/17/05ProjectA - TIM - 1693,ACS Traceability Analysis: Inadequate tracing from ACS SRS requirements to L3-SFS-891,3,"L3-SFS-891 is not satisfied by the existing traced ACS SRS requirements. ACS SRS requirements L4-SROAC-03, L4-SROAC-50, L4-SROAC-70, L4-SROAC-75, and L4-SROAC-77 appear to be applicable to the functionality defined in L3-SFS-891; however, the requirements are not linked. L3-SFS-891 - The Flight System FP design shall include hardware and low level flight software monitors such as watchdog timers, fault indicators (e.g., self diagnostics, error logging), error detection and correction systems, etc. for critical component processors. L4-SROAC-03 - During each 5 Hz cycle, the ACS software shall generate a FDIR status packet to identify which faults failed their FDIR checks and which did not. L4-SROAC-50 - In the event that an ACE error packet is received, the AC software shall execute its control cycle and increment the error packet receiving counter. L4-SROAC-70 - AC software shall perform RWA data FDIR defined in ACS Performance Specification section 3.2.4.4. L4-SROAC-75 - The AC software shall provide an indication to FDIR if the star tracker packet was not received for that 5 Hz cycle. L4-SROAC-77 - AC software shall perform STR data FDIR defined in ACS Performance Specification section 3.2.4.1.",6/17/05ProjectA - TIM - 1692,ACS Traceability Analysis: Incorrect tracing from ACS SRS requirements to L3-SFS-890,3,"The existing traces from ACS requirements L4-SROAC-160 and L4-SROAC-161 to L3-SFS-890 are incorrect. L3-SFS-890 - Spacecraft FP FSW shall be capable of monitoring all types of engineering telemetry; including analogs, BI-levels thermistors/thermocouples/PRTs, component BIT, and software-generated parameters, not including data generated by instrument processors. L4-SROAC-160 - The AD software shall monitor the performance of the Kalman Filter and report the convergence/divergence state status of the Kalman Filter. L4-SROAC-161 - If Kalman Filter divergence detected while in Target Pointing, Delta-V, or Science Mode for a specified time, Kalman Filter shall be re-initialized after ACS automatically transitions to Acquisition/Coarse Sun Pointing Mode.",6/17/05ProjectA - TIM - 1690,ACS Traceability Analysis: Inadequate tracing from L4 requirements to L3-SFS-866 and L3-SFS-2336,2,"The existing trace from ACS requirement L4-SROAC-149 to L3-SFS-866 and L3-SFS-2336 is inadequate. L4-SROAC-149 does not address all of the described functionality in the two L3 requirements. Furthermore the ACS SRS requirement L4-SROAC-37 appears to be applicable to the functionality defined in L3-SFS-866 and L3-SFS-2336; however, the requirements are not linked. L3-SFS-866 - The Ground Segment shall be capable of commanding, via either stored sequence or immediate commands a momentum dump that commands the spacecraft momentum about each axis to be reduced below a minimum threshold for that axis. L3-SFS-2336 - The minimum momentum threshold for each axis shall be stored in the spacecraft flight software and changeable by the Ground Segment. L4-SROAC-149 - ACS FSW shall manage and unload accumulated reaction wheel momentum when reaction wheels are used. L4-SROAC-37 - The AC software shall accept AC task commands which initialize, activate, inhibit, or otherwise control the individual AC task software processes. These commands are: ACS Momentum Control Commands: • Enable/Disable autonomous momentum control • Enable/Disable momentum adjust • Momentum command • Set momentum error limit threshold commands • Momentum torque magnitude command",6/17/05ProjectA - TIM - 1688,ACS Traceability Analysis: L3-SFS-859 and L3-SFS-860 have no associated L3 or L4 traces,2,"L3-SFS-859 and L3-SFS-860 do not have any associated L3 or L4 traces. L3-SFS-859 states: ""The ACS Software shall determine central-body (Sun, asteroid, etc.) relative Flight Software states (position and velocity vs. time) using a set of 30 Chebyshev polynomials provided by the Ground Segment."" L3-SFS-859 is missing traces to ACS SRS requirements to address the ACS funtionality to determine central-body relative Flight Software states. L3-SFS-860 states ""ES ephemerides shall describe central-body (Sun, asteroid, etc.) relative spacecraft states (position vs. time) using sets of Chebyshev polynomials."" L3-SFS-860 is missing traces to ACS SRS requirements to address the ACS funtionality to determine central-body relative spacecraft states. Furthermore the ACS SRS requirement L4-SROAC-167 appears to be applicable to some of the functionality defined in L3-SFS-859 and L3-SFS-860; however, the requirements are not linked. L4-SROAC-167 - AC software shall propagate the spacecraft ephemeris every ACS control cycle (5 Hz).",6/17/05ProjectA - TIM - 1687,ACS Traceability Analysis: Incorrect tracing from ACS SRS requirements to L3-SFS-856,3,"The traces from ACS requirements L4-SROAC-152 and L4-SROAC-153 to L3-SFS-856 are incorrect and do not flow from L3-SFS-856. L3-SFS-856 - The Ground Segment shall uplink input files as required to enable the ES to maintain the desired spacecraft pointing to accuracies specified in the Mission Requirements Document. L4-SROAC-152 - The AD software for six-state Kalman Filter shall receive as input: Estimated IRU Rates, Corrected Inertial-to-Tracker Quaternions from STR1 and/or STR2, and Propagated Quaternion. L4-SROAC-153 - The AD software for three-state Kalman Filter shall receive as input: Measured Rates derived from Corrected Inertial-to-Tracker Quaternions from STR1 and/or STR2 at 1 Hz, and Estimated Rates.",6/17/05ProjectA - TIM - 1679,ACS Traceability Analysis: Incorrect traces from ACS SRS requirements to L3-SFS-694,3,"The traces from the following ACS SRS requirements to L3-SFS-694 are incorrect: L4-SROAC-64, L4-SROAC-65, L4-SROAC-66, and L4-SROAC-67. L3-SFS-694 - The Flight Software shall support flight software subsystem requirements, including processing commands and telemetry, storing and transmitting data, and maintaining flight software health. L4-SROAC-64 - The RWA data shall be used to calculate the speed and direction of each wheel. L4-SROAC-65 - Wheel torque, in the body frame, shall be calculated. L4-SROAC-66 - The wheel momentum shall be calculated from the RWA tachometer data. L4-SROAC-67 - The last valid RWA data shall be used for that processing cycle when RWA data is declared invalid.",6/16/05ProjectA - TIM - 1676,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.3.9 inconsistent with fsw_test_01,2,"The EngCntrl SRS and the requirement text included in the RVM and fsw_test_01 for EngCntrl SRS Requirement 3.3.9 do not agree. The RVM and test script text for the ""PPU Address"" is different than the SRS in the way the PPU is set. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.3.9: PPU Address The EngCntrl Flight Software shall set the initial PPU address from the value stored in the nonvolatile Configuration Data Table. This initial PPU address is used by the Telemetry collection sequence step for the reading of the PPU telemetry data. Referenced Test Script Requirement 3.3.9: PPU Address The EngCntrl Flight Software shall set the initial PPU based on the state of the EngCntrl ID indication located in the EngCntrl ID register of the CPU FPGA. This initial PPU address is used by the Telemetry collection sequence step for the reading of the PPU telemetry data. For EngCntrl ID bit equal to 0 the Bootloader software shall set the PPU address to 0 the value is 0x01. For EngCntrl ID bit equal to 1 the Bootloader software shall set the PPU address to 0 the value is 0x01. Referenced RVM Requirement 3.3.9: PPU Address The EngCntrl Flight Software shall set the initial PPU based on the state of the EngCntrl ID indication located in the EngCntrl ID register of the CPU FPGA. This initial PPU address is used by the Telemetry collection sequence step for the reading of the PPU telemetry data. For EngCntrl ID bit equal to 0, the Bootloader software shall set the PPU address to 0,the value is 0x01. For EngCntrl ID bit equal to 1, the Bootloader software shall set the PPU address to 0,the value is 0x01.",6/16/05ProjectA - TIM - 1674,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.3.6 inconsistent with RVM and fsw_test_01,2,"The EngCntrl SRS and the requirement text included in the RVM and fsw_test_01 for EngCntrl SRS Requirement 3.3.6 do not agree. The RVM and test script text for the ""XVD"" is different than the SRS in that it discusses not initializing the XVD board during the Initialization states. The RVM and test script also discuss that the Bootloader software initializing the XVD during the Thruster shutdown state versus the Engine Safe state. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.3.6: XVD The EngCntrl Flight Software is not required initialize the XVD board during the Initialization states. The Bootloader software shall effectively initialize the XVD during the Engine Safe state. Referenced Test Script Requirement 3.3.6: XVD The EngCntrl Flight Software shall not initialize the XVD board during the Initialization states. The Bootloader software shall effectively initialize the XVD during the Thruster shutdown state. Referenced RVM Requirement 3.3.6: XVD The EngCntrl Flight Software shall not initialize the XVD board during the Initialization states. The Bootloader software shall effectively initialize the XVD during the Thruster shutdown state.",6/16/05ProjectA - TIM - 1672,EngCntrl Test Scripts: EngCntrl SRS v1.2 and RVM requirement 3.3.5.7 inconsistent with fsw_test_01,2,"The EngCntrl SRS and the RVM do not agree with the requirement text included in fsw_test_01 for EngCntrl SRS Requirement 3.3.5.7; however the SRS text does agree with the RVM. The test script text for the ""Telemetry Buffer Initialization "" is different than the SRS and the RVM in that it discusses that ""no other changes shall be made to the buffer content to enable extraction of data if a reboot has occurred."" Also, the EngCntrl SRS and the RVM requirement for the ""Telemetry Buffer Initialization"" is numbered 3.3.5.7 and the test script requirement for ""Telemetry Buffers"" (note: different requirement headings exist too is numbered 3.3.5.6. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.3.5.7: Telemetry Buffer Initialization The Bootloader software shall initialize the Telemetry buffers in the 1553 interface by writing the packet ID into each buffer and setting the Engine mode value. Referenced Test Script Requirement 3.3.5.6: Telemetry Buffers The Bootloader software shall initialize the Telemetry buffers in the 1553 interface by writing the packet ID into each buffer and setting the Engine mode value. No other changes shall be made to the buffer content to enable extraction of data if a reboot has occurred. Referenced EngCntrl SRS Requirement 3.3.5.7: Telemetry Buffer Initialization The Bootloader software shall initialize the Telemetry buffers in the 1553 interface by writing the packet ID into each buffer and setting the Engine mode value.",6/16/05ProjectA - TIM - 1671,ACS Traceability Analysis: L3-SFS-453 has no associated L3 or L4 traces,3,"L3-SFS-453 does not have any associated L3 or L4 traces. L3-SFS-453 states: ""The ACS shall be capable of determining the spacecraft position relative to the Earth, the Sun, Vesta and Ceres provided valid ephemeredes are uplinked and loaded into the ACS software."" L3-SFS-453 is missing traces to ACS SRS requirements to address the ACS functionality of ""determining the spacecraft position relative to the Earth, the Sun, Vesta and Ceres.""",6/16/05ProjectA - TIM - 1670,EngCntrl Test Scripts: Test Scripts missing EngCntrl SRS v1.2 requirement 3.3.5.6 and RVM inconsistent with SRS,2,"The test scripts do not include EngCntrl SRS requirement 3.3.5.6, and the RVM requirement text does not agree with the SRS. There is no indication in the RVM or the Test Script that this requirement was verified. Referenced EngCntrl SRS Requirement 3.3.5.6: 1553 Telemetry Sub-Address Double-Buffering The EngCntrl Bootloader Software shall provide for double-buffering of telemetry sub-addresses to ensure consistency of telemetry data. Referenced EngCntrl RVM Requirement 3.3.5.6: Telemetry Buffers The Bootloader software shall initialize the Telemetry buffers in the 1553 interface by writing the packet ID into each buffer and setting the Engine mode value. No other changes shall be made to the buffer content to enable extraction of data if a reboot has occurred.",6/16/05ProjectA - TIM - 1669,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.3.2 inconsistent with RVM and fsw_test_01,2,"The EngCntrl SRS and the requirement text included in the RVM and fsw_test_01 for EngCntrl SRS Requirement 3.3.2 do not agree. The RVM and test script text for the ""Interrupts"" is different than the SRS in that it discusses all other interrupt source vector registers and associated interrupt vector table entries being initialized with an Illegal Interrupt ISR. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.3.2: Interrupts The EngCntrl Flight software shall initialize the interrupt source vector registers and associated interrupt vector table entries for the following interrupts: Timer Interrupts, VME Bus Error Interrupts, Illegal Access Interrupts and EDAC Error Interrupts. All unused interrupt vector table entries shall be initialized with an Illegal Interrupt ISR. The EngCntrl Flight software shall enable the following interrupt sources: Timer Interrupts, Illegal Access Interrupts, VME Bus Error Interrupts and EDAC Error Interrupts. All other interrupt sources shall be disabled. Referenced Test Script Requirement 3.3.2: Interrupts The EngCntrl Flight software shall initialize the interrupt source vector registers and associated interrupt vector table entries for the following interrupts: Timer Interrupts, VME Bus Error Interrupts, Illegal Access Interrupts and EDAC Error Interrupts. All other interrupt source vector registers and associated interrupt vector table entries shall be initialized with an Illegal Interrupt ISR. All unused interrupt vector table entries shall be initialized with an Illegal Interrupt ISR. The EngCntrl Flight software shall enable the following interrupt sources: Timer Interrupts Illegal Access Interrupts VME Bus Error Interrupts and EDAC Error Interrupts. All other interrupt sources shall be disabled. Referenced RVM Requirement 3.3.2: Interrupts The EngCntrl Flight software shall initialize the interrupt source vector registers and associated interrupt vector table entries for the following interrupts: Timer Interrupts, VME Bus Error Interrupts, Illegal Access Interrupts and EDAC Error Interrupts. All other interrupt source vector registers and associated interrupt vector table entries shall be initialized with an Illegal Interrupt ISR. All unused interrupt vector table entries shall be initialized with an Illegal Interrupt ISR. The EngCntrl Flight software shall enable the following interrupt sources: Timer Interrupts, Illegal Access Interrupts, VME Bus Error Interrupts and EDAC Error Interrupts. All other interrupt sources shall be disabled.",6/16/05ProjectA - TIM - 1666,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.3.1 inconsistent with RVM and fsw_test_01,2,"The EngCntrl SRS and the requirement text included in the RVM and fsw_test_01 for EngCntrl SRS Requirement 3.3.1 do not agree . The RVM and the test script text for the ""SRAM Initialization"" is different than the SRS in that it discusses initializing the SRAM with a known pattern on boot up. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.3.1: SRAM Initialization The Bootloader software shall initialize the SRAM on boot up. This is to set the EDAC code word to a known state to prevent EDAC errors from being generated by SRAM reads to un-initialized memory. Note: SRAM reads to un-initialized memory is expected due to the continuous memory dump telemetry function. The Operational Software is not required to initialize the SRAM given that the Bootloader software will have already performed this operation. Referenced Test Script Requirement 3.3.1: SRAM Initialization The Bootloader software shall initialize the SRAM with a known pattern on boot up. This is to set the EDAC code word to a known state to prevent EDAC errors from being generated by SRAM reads to un-initialized memory. Note: SRAM reads to un-initialized memory is expected due to the continuous memory dump telemetry function. The Operational Software is not required to initialize the SRAM given that the Bootloader software will have already performed this operation. Referenced RVM Requirement 3.3.1: SRAM Initialization The Bootloader software shall initialize the SRAM with a known pattern on boot up. This is to set the EDAC code word to a known state to prevent EDAC errors from being generated by SRAM reads to un-initialized memory. Note: SRAM reads to un-initialized memory is expected due to the continuous memory dump telemetry function. The Operational Software is not required to initialize the SRAM given that the Bootloader software will have already performed this operation.",6/16/05ProjectA - TIM - 1662,ACS Traceability Analysis: Incorrect traces from L3-SFS-434 to ACS SRS,3,"The following traces from L3-SFS-434 to ACS SRS requirements are incorrect: L4-SROAC-28, L4-SROAC-35 , L4-SROAC-71, L4-SROAC-97 , L4-SROAC-122, L4-SROAC-123, L4-SROAC-124, L4-SROAC-156, and L4-SROAC-168. The remaining trace to L3-SFS-435 appears to be correct. Deleting the above listed L4 requirements leaves no links to the L4 software requirements. Being that L3-SFS-434 is a General Requirement, it may be appropriate to link it to only L3 requirements, which are then linked to the L4 software requirements. L3-SFS-434 - The ACS shall control the spacecraft attitude during all phases of the mission from launch vehicle separation to the end of the mission , excluding Rate Nulling submode during which only the rates are controlled. The ACS SRS requirements incorrectly traced to L3-SFS-434 are: L4-SROAC-28 - The AC software shall accept AC task commands which initialize, activate, inhibit, or otherwise control the individual AC task software processes. These commands are: L4-SROAC-35 - Enable or Disable Component usage: RWA, CSS, IRU, STR, IRU in Attitude Determination. L4-SROAC-71 - If more than one wheel fails the FDIR test, actuator selection shall be selected to thrusters. L4-SROAC-97 - ACS FSW shall maintain attitude knowledge within the main flight computer, downlinking this data as part of the wideband data stream. L4-SROAC-122 - The ACS mode shall transition from Target Pointing Mode by ground command or automatically to Acquisition/Coarse Sun Pointing, Rate Nulling Submode when one or more of the following occur: Kalman Filter divergence. L4-SROAC-123 - The ACS mode shall transition from Target Pointing Mode by ground command or automatically to Acquisition/Coarse Sun Pointing, Rate Nulling Submode when one or more of the following occur: Loss of attitude reference L4-SROAC-124 - Transition from Science or Delta-V Mode to Acquisition/Coarse Sun Pointing Rate Nulling Submode shall be: (1) autonomous, via detection of Kalman Filter divergence or loss of attitude reference for a specified time, or (2) explicit, via ground-command. L4-SROAC-156 - The AD software shall accept a command to initialize the Kalman Filter. L4-SROAC-168 - AN software shall accept AN task commands which initialize, activate, inhibit, or otherwise control the individual AN task software processes. These commands are: • Initialize, • Enable/Disable telemetry packet generation, • DRAM table management commands, • Reset Telemetry Statistics.",6/16/05ProjectA - TIM - 1661,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.2.4.2.2 inconsistent with RVM and fsw_test_08,2,"The EngCntrl SRS and requirement text included in the RVM and fsw_test_08 for EngCntrl SRS Requirement 3.2.4.2.2 do not agree . The test script and the RVM text for the ""Operation State"" is different than the SRS in that it discusses remaining in the Operation State until both a command is received to transition into the Bootloader Software and the start of a 1Hz control loop versus just receipt of the command. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.2.4.2.2: Operation State The Operational Software shall enter the Operation State upon completion of the Initialization State. The Operational Software shall remain in the Operation State until a command is received to transition into the Bootloader Software. Referenced Test Script Requirement 3.2.4.2.2: Operation State The Operational Software shall enter the Operation State upon completion of the Initialization State. The Operational Software shall remain in the Operation State until a command is received to transition into the Bootloader Software and the start of a 1Hz control loop. Referenced RVM Requirement 3.2.4.2.2: Operation State The Operational Software shall enter the Operation State upon completion of the Initialization State. The Operational Software shall remain in the Operation State until a command is received to transition into the Bootloader Software and the start of a 1Hz control loop.",6/16/05ProjectA - TIM - 1660,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.2.3.2.3 inconsistent with RVM and fsw_test_01,2,"The EngCntrl SRS and the requirement text included in the RVM and fsw_test_01 for EngCntrl SRS Requirement 3.2.3.2.3 do not agree . The RVM and test script text for the ""Idle State"" is different than the SRS in that it discusses the Bootloader Software entering the Idle State upon completion of the ""Thruster Shutdown State"" versus the ""Engine Safe State"", and there are 3 criteria for remaining in the Idle State versus 2 criteria. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.2.3.2.3: Idle State The Bootloader Software shall enter the Idle State upon completion of the Engine Safe State. The Bootloader software shall remain in the Idle State until all of the following are satisfied: a) a command is received to transition into the Operational Software and b) the check sum of the Operational Software is validated. Referenced Test Script Requirement 3.2.3.2.3: Idle State The Bootloader Software shall enter the Idle State upon completion of the Thruster Shutdown State. The Bootloader software shall remain in the Idle State until all three of the following are satisfied: a a command is received to transition into the Operational Software b the check sum of the Operational Software is validated and c the start of a 1Hz control loop. Referenced RVM Requirement 3.2.3.2.3: Idle State The Bootloader Software shall enter the Idle State upon completion of the Thruster Shutdown State. The Bootloader software shall remain in the Idle State until all three of the following are satisfied: a) a command is received to transition into the Operational Software, b) the check sum of the Operational Software is validated and c) the start of a 1Hz control loop.",6/15/05ProjectA - TIM - 1659,EngCntrl Test Scripts: RVM and Test Scripts missing EngCntrl SRS v1.2 requirement 3.2.13,2,The RVM and test scripts do not include requirement 3.2.13 of the EngCntrl SRS. There is no indication in the RVM or the Test Script that this requirement was verified. Referenced EngCntrl SRS Requirement 3.2.13: Operational Software Function The function of the Operational software shall be to control the operation of the Engine based on commands from the spacecraft.,6/15/05ProjectA - TIM - 1658,EngCntrl Test Scripts: RVM and Test Scripts missing EngCntrl SRS v1.2 requirement 3.2.11,2,"The RVM and test scripts do not include requirement 3.2.11 of the EngCntrl SRS. There is no indication in the RVM or the Test Script that this requirement was verified. Referenced EngCntrl SRS Requirement 3.2.11: Bootloader Software Function The function of the Bootloader software shall be to initialize the EngCntrl Hardware from power on or from hardware reset, to safe the system and to allow for upload of a new version of the Operational Software.",6/15/05ProjectA - TIM - 1657,EngCntrl Test Scripts: RVM and Test Scripts missing EngCntrl SRS v1.2 requirement 3.2.1,2,The RVM and the test scripts do not include requirement 3.2.1 of the EngCntrl SRS. Inspection and test may be required to fully verify the requirement. There is no indication in the RVM or the Test Script that this requirement was verified. Referenced EngCntrl SRS Requirement 3.2.1: Architecture Design The EngCntrl Flight Software shall consist of two separate software builds: Bootloader Software and Operational Software. Each software build shall be independent with the exception of shared configuration data.,6/15/05ProjectA - TIM - 1656,EngCntrl Test Scripts: RVM and fsw_test_36 missing 11 parameters from EngCntrl SRS v1.2 requirement 3.10.5,2,"The RVM and fsw_test_36 do not include the following 11 parameters associated with requirement 3.10.5 of the EngCntrl SRS: 1.) Beam Current 2.) Accel Voltage 3.) Accel Current 4.) Discharge Voltage 5.) Discharge Current 6.) Neutralizer Voltage 7.) Neutralizer Current 8.) Main Plenum Tank Pressure 9.) Cathode Plenum Tank Pressure 10.) Single Plenum Mode Pressure 11.) Checksum There is no indication in the RVM or the Test Script that these 11 parameters were verified. Referenced EngCntrl SRS Requirement 3.10.5: Throttle Table The Operation software shall utilize a 112 record table to define the valid throttle levels for a thruster. Each throttle table record (entry) shall consist of twelve words to define the following: Beam Voltage, Beam Current, Accel Voltage, Accel Current, Discharge Voltage, Discharge Current, Neutralizer Voltage, Neutralizer Current, Main Plenum Tank Pressure, Cathode Plenum Tank Pressure, Single Plenum Mode Pressure and a Checksum of the record. Referenced Test Script Requirement 3.10.5: Throttle Table The Operation software shall utilize a 112 record table to define the valid throttle levels for a thruster. Each throttle table record (entry) shall consist of twelve words to define the following: Beam Voltage Referenced RVM Requirement 3.10.5: Throttle Table The Operation software shall utilize a 112 record table to define the valid throttle levels for a thruster. Each throttle table record (entry) shall consist of twelve words to define the following: Beam Voltage",6/14/05ProjectA - TIM - 1655,EngCntrl Test Scripts: EngCntrl SRS v1.2 requirement 3.10.4.3 inconsistent with RVM and fsw_test_36,2,"The EngCntrl SRS requirement text does not agree with the requirement text in the RVM and fsw_test_36. The RVM and the test script text for the ""Pressure Setpoint Correction Lookup Tables"" requirement is different than the SRS in that it specifies utilization of ""two sets of three lookup tables"" versus ""two sets of lookup tables"". Also, the Requirement numbers do not agree. This leads to the question as to whether the approved SRS requirement was verified. Referenced EngCntrl SRS Requirement 3.10.4.3: Pressure Setpoint Correction Lookup Tables The Operational Software shall utilize two sets of lookup tables to adjust the raw setpoint pressure value for the two plenum tanks. Each lookup table shall be a 16 x 16 matrix used to correct the setpoint value based on the temperature of the associated FCD being utilized to control Xenon flow to a thruster. Referenced Test Script Requirement 3.10.4.4: Pressure Setpoint Correction Lookup Tables The Operational Software shall utilize two sets of three lookup tables to adjust the raw setpoint pressure value for the two plenum tanks. Each lookup table shall be a 16 x 16 matrix used to correct the setpoint value based on the temperature of the associated FCD being utilized to control Xenon flow to a thruster. Referenced RVM Requirement 3.10.4.4: Pressure Setpoint Correction Lookup Tables The Operational Software shall utilize two sets of three lookup tables to adjust the raw setpoint pressure value for the two plenum tanks. Each lookup table shall be a 16 x 16 matrix used to correct the setpoint value based on the temperature of the associated FCD being utilized to control Xenon flow to a thruster.",6/14/05ProjectA - TIM - 1654,EngCntrl Test Scripts: RVM and fsw_test_35 missing 6 parameters from EngCntrl SRS v1.2 requirement 3.10.1,2,"The RVM and fsw_test_35, do not include the following 6 parameters associated with requirement 3.10.1 of the EngCntrl SRS v1.2: 1.) XFS Valve Mapping to XVD Valve Channel 2.) XFS Temperature Sensor Mapping to CPU Analog channel 3.) XFS Pressure Sensor Mapping to CPU Analog Channel 4.) PPU Supply Command Correction Values 5.) PPU Supply TLM Correction Values 6.) Default PPU Address There is no indication in the RVM or the Test Script that these 6 parameters were verified. Referenced EngCntrl SRS Requirement 3.10.1: Run-time Configuration Data The Operational software shall utilize a database of run-time parameters for the control of the various Engine Mode procedures. This database shall define the following: Grid Clear Duration Cathode Conditioning Heat 1 Duration Cathode Conditioning Heat 2 Duration Cathode Conditioning Cool 1 Duration Cathode Conditioning Cool 2 Duration Maximum number of Thruster Startup retries Thruster Startup Cathode Preheat Duration Neutralizer Stability Duration Discharge Stability Duration Maximum Thruster Startup Cathode Preheat Duration Minimum Thruster Startup Cathode Cool Duration XFS Single Plenum Trip Point (High) XFS Single Plenum Trip Point (Low) Time before going into Single Plenum Mode Maximum XFS Throttle Up Time Maximum XFS Throttle Down Time Software Error Counter Cathode Heater Open Current Cathode Heater Open Voltage Maximum Latch Valve Pulse Width Multiple Recycle Event Time Continuous Recycle Event Time Plenum Error Enable / Disable Main Plenum Initialization Time Cathode Plenum Initialization Time Number of PPU Samples to Average Number of XFS Samples to Average Clear Error History XFS Valve Mapping to XVD Valve Channel XFS Temperature Sensor Mapping to CPU Analog channel XFS Pressure Sensor Mapping to CPU Analog Channel PPU Supply Command Correction Values PPU Supply TLM Correction Values Default PPU Address",6/14/05ProjectA - TIM - 1653,EngCntrl Test Scripts: RVM and Test Scripts missing EngCntrl SRS v1.2 requirements,3,"The RVM and test scripts do not include the following EngCntrl SRS requirements. Testing does not appear to be a viable verification method for these requirements; however these requirements need to be verified by some other means (e.g., inspection or analysis). 3.1.1: Inherited DS1 Software The EngCntrl Flight Software shall be constructed by re-engineering the DS1 EngCntrl Flight Software version 1.12. The DS1 Flight Software has been archived in the ProjectA Project library at the following located: https://partners-lib.jpl.nasa.gov/partners-lib/dscgi/ds.py/View/Collection-5481 3.1.2: ProjectA Engine Architecture The DS1 EngCntrl Flight software shall be re-engineered to enable control of the enhanced Engine used for the ProjectA Mission. 3.1.3: ProjectA EngCntrl Architecture The DS1 EngCntrl Flight software shall be re-engineered to enable control of the enhanced EngCntrl used for the ProjectA Mission. The memory map of the ProjectA EngCntrl is defined in the EngCntrl Hardware Software ICD (JPL D-27114). 3.1.4.1: Architecture The EngCntrl Flight Software shall be designed to run on the EngCntrl Flight Computer. The ProjectA EngCntrl Flight computer is based on the 80C86 processor, manufactured by Intersil. The operating frequency of the processor is 4Mhz. The flight computer contains 128k bytes of EEPROM and 256k bytes of SRAM. 3.1.4.2.1: Processor Utilization The EngCntrl software control loop design for non-background tasks shall comply with the processor utilization margins defined in the ProjectA Project Technical Margin Management Plan (JPL D-25863). The margin requirements are: 40% at PDR, 33% at CDR, 25% at ARR and 20% for launch and flight. The background tasks are those tasks that are performed in the Idle State of the Flight Software. 3.1.4.2.2: Memory Utilization The EngCntrl software memory utilization shall comply with the memory utilization margins defined in the ProjectA Project Technical Margin Management Plan (JPL D-25863). The margin requirements are: 40% at PDR, 30% at CDR, 20% at ARR and 10% for launch and flight. These margins apply both to EEPROM and SRAM. 3.1.5.1: Language The EngCntrl Flight Software shall be implemented in the ANSI-C programming language. 3.1.5.2: Compiler The EngCntrl Flight Software shall be compiled with a C compiler capable of producing native 80C86 executable binaries. 3.1.5.3: Implementation Constraints The EngCntrl Flight software shall not be implemented with dynamic memory allocation. All memory storage shall be fixed and initialized.",6/14/05ProjectA - TIM - 1650,C&DH Traceability Analysis: L3-SFS-383 has no associated L3 or L4 traces,3,"L3-SFS-383 does not have any associated L3 or L4 traces. L3-SFS-383 states: ""The CDH shall support commanding of EPS functions and collection of telemetry from the PDU, HVEA, Battery and Solar Array Drive Electronics (SADE)."" L3-SFS-383 is missing traces to C&DH SRS requirements to address the C&DH functionality to ""support commanding of EPS functions and collection of telemetry from the PDU, HVEA, Battery and Solar Array Drive Electronics (SADE)"". L3-SFS-383: The CDH shall support commanding of EPS functions and collection of telemetry from the PDU, HVEA, Battery and Solar Array Drive Electronics (SADE).",5/27/05ProjectA - TIM - 1648,C&DH Traceability Analysis: L3-SFS-682 not satisfied by the existing L3 and L4 traces,3,"[L3-SFS-682] is a high level requirement indicating C&DH will conform with the ProjectA State and Subsystem Mode Definition Design Note. [L3-SFS-681] is the only direct link to [L3-SFS-682]. [L3-SFS-681] has incoming links from from [L4-SROBC-32] and [L4-SROSU-32]. Therefore, these links were assessed towards the satisfaction of [L3-SFS-682] as well. Although [L4-SROBC-32], [L4-SROSU-32], [L3-SFS-681] constitute valid traces to [L3-SFS-682], these requirements only address boot, SuROM Diagnostic (Monitor), and Normal Modes. Therefore, [L3-SFS-682] is not satisfied by the linked requirements. Referenced Requirements Artifact: DOORS database dated 6/9/05 [L3-SFS-682] The C&DH subsystem shall support all modes, states and functions specified in the ProjectA State and Subsystem Mode Definition Design Note DN-ProjectA-SE-001. Requirement Linked to [L3-SFS-682] [L3-SFS-681] The C&DH modes shall be referred to as boot (initializing) and normal (initialized/functioning). Requirements linked to [L3-SFS-681]: [L4-SROBC-32] If sufficient RAD-6000 and LIO processing resources are operable, restart operations shall progress to completion in SuROM Diagnostic (Monitor) Mode or Normal Mode. [L4-SROSU-32] If sufficient RAD6000 and LIO processing resources are operable, restart operations shall progress to completion in SuROM Diagnostic (Monitor) Mode or Normal Mode.",5/27/05ProjectA - TIM - 1647,C&DH Traceability Analysis: L3-SFS-2263 has no associated L3 or L4 traces,3,"L3-SFS-2263 does not have any associated L3 or L4 traces. L3-SFS-2263 states: ""The C&DH shall reject a CLTU if an error is detected during receipt."" L3-SFS-2263 is missing traces to C&DH SRS requirements to address the C&DH functionality to ""reject a CLTU if an error is detected during receipt."" L3-SFS-2263: The C&DH shall reject a CLTU if an error is detected during receipt.",5/27/05ProjectA - TIM - 1645,C&DH Traceability Analysis: L3-SFS-679 has no associated L3 or L4 traces,3,"L3-SFS-679 does not have any associated L3 or L4 traces. L3-SFS-679 states: ""The C&DH shall accept Command Link Transfer Unit (CLTU) data from the ground per the format described in the FGICD."" L3-SFS-679 is missing traces to C&DH SRS requirements to address the C&DH functionality to accept Command Link Transfer Unit (CLTU) data from the ground per the format described in the FGICD. L3-SFS-679: The C&DH shall accept Command Link Transfer Unit (CLTU) data from the ground per the format described in the FGICD.",5/27/05ProjectA - TIM - 1640,C&DH Traceability Analysis: L3-SFS-666 has no associated L3 or L4 traces,3,"L3-SFS-666 does not have any associated L3 or L4 traces. L3-SFS-666 states: ""The C&DH subsystem shall provide a dedicated RS-422 interface and be able to receive data from the GRaND at a rate of 19.2 kbps."" L3-SFS-666 is missing traces to C&DH SRS requirements to address the C&DH systems functionality to ""provide a dedicated RS-422 interface and be able to receive data from the GRaND at a rate of 19.2 kbps"" L3-SFS-666: The C&DH subsystem shall provide a dedicated RS-422 interface and be able to receive data from the GRaND at a rate of 19.2 kbps.",5/27/05ProjectA - TIM - 1639,C&DH Traceability Analysis: L3-SFS-664 not satisfied by the existing L3 and L4 requirements trace,3,"[L3-SFS-664] deals mainly with C&DH RS-422 and MIL-STD-1553 B serial interfaces. Several L4 UPL FSW SRS requirements and [L3-SFS-508] are linked to [L3-SFS-664]; however, [L3-SFS-664] appears to be limited to hardware. If [L3-SFS-664] was intended to flow down to the L4 FSW requirements, then it seems unsatisfied, since UPL is not the only FSW element associated with RS-422 and MIL-STD-1553 B serial interfaces. Referenced Requirements Artifact: DOORS database dated 6/9/05 [L3-SFS-664] The C&DH subsystem shall provide hardware interfaces for the collection, storage and transmission of all Flight System telemetry and data using either RS-422 serial interfaces or MIL-STD-1553 B serial interfaces to pass data from the components to the C&DH. Requirements Linked to [L3-SFS-664]: [L4-SRUP-211] The serial data protocol shall minimize the loss of data during transfer. [L4-SRUP-210] The serial interface shall be full duplex with parity check. [L4-SRUP-324] The Uplink FSW shall maintain a status message containing the following parameters [L4-SRUP-325] Timestamp. [L4-SRUP-326] Status RT ID. [L4-SRUP-327] Active Select State. [L4-SRUP-328] Uplink Command Count. [L4-SRUP-329] Uplink Transmitter Select. [L4-SRUP-330] Uplink CCW Boot Control. [L4-SRUP-331] FP Log Entry Count. [L4-SRUP-332] OBC Monitor Status. [L4-SRUP-333] OBC WDT Status. [L4-SRUP-334] Uplink Reset Count. [L4-SRUP-335] Command Timeout. [L4-SRUP-336] 1553 Status. [L3-SFS-508] The Engine shall collect and provide operating telemetry to the spacecraft. Requirements Linked to [L3-SFS-508]: NONE",5/27/05ProjectA - TIM - 1638,C&DH Traceability Analysis: L3-SFS-2552 has no associated L3 or L4 traces,3,"L3-SFS-2552 does not have any associated L3 or L4 traces. L3-SFS-2552 states: ""The C&DH subsystem shall provide the MOS profiles of clock oscillator frequency versus temperature for both the CEU A and CEU B spacecraft clocks."" L3-SFS-2552 is missing traces to C&DH SRS requirements to address the C&DH systems functionality to ""provide the MOS profiles of clock oscillator frequency versus temperature for both the CEU A and CEU B spacecraft clocks."" L3-SFS-2552: The C&DH subsystem shall provide the MOS profiles of clock oscillator frequency versus temperature for both the CEU A and CEU B spacecraft clocks.",5/27/05ProjectA - TIM - 1637,C&DH Traceability Analysis: L3-SFS-2549 has no associated L3 or L4 traces,3,"L3-SFS-2549 does not have any associated L3 or L4 traces. L3-SFS-2549 states: ""The C&DH subsystem shall provide the capability to measure the temperature of the spacecraft clock oscillator and downlink it to the ground at a rate of at least one time per minute."" L3-SFS-2549 is missing traces to C&DH SRS requirements to address the C&DH systems ""capability to measure the temperature of the spacecraft clock oscillator and downlink it to the ground at a rate of at least one time per minute"". L3-SFS-2549: The C&DH subsystem shall provide the capability to measure the temperature of the spacecraft clock oscillator and downlink it to the ground at a rate of at least one time per minute.",5/27/05ProjectA - TIM - 1636,C&DH Traceability Analysis: L3-SFS-659 has no associated L3 or L4 traces,3,"L3-SFS-659 does not have any associated L3 or L4 traces. L3-SFS-659 states: ""The C&DH shall be configured to receive uplink data at any time."" L3-SFS-659 is missing traces to C&DH SRS requirements to address the C&DH configuration ""to receive uplink data at any time"". L3-SFS-659: The C&DH shall be configured to receive uplink data at any time.",5/27/05ProjectA - TIM - 1635,C&DH L3 - L4 Traceability Analysis: L3-SFS-658 not satisfied by the existing L3 requirements trace,3,"The L3 requirement, [L3-SFS-344], is the only requirement linked to [L3-SFS-658]; however, [L3-SFS-344] does not appear to be a valid trace to [L3-SFS-658]. In addition, [L3-SFS-658] seems to be a negative requirement. As such, it is unclear which subsystem is responsible for requiring more than one command before allowing both OBCs to be turned off. This functionality may be part of the OBC C&DH FSW design, or possibly, this is part of the system-level fault protection handled by the UPL FSW. Referenced Requirements: Artifact: DOORS database dated 6/9/05 [L3-SFS-658] No single hardware or software command to the C&DH shall result in both OBCs being turned off. Requirements Linked to [L3-SFS-658]: [L3-SFS-344] The EPS shall provide fused, unswitched, unregulated bus power to the CEU critical inputs, and ACE critical inputs. Requirements Linked to [L3-SFS-344]: NONE",5/27/05ProjectA - TIM - 1634,C&DH Traceability Analysis: L3-SFS-657 has no associated L3 or L4 traces,3,"L3-SFS-657 does not have any associated L3 or L4 traces. L3-SFS-657 states: ""Every critical configuration command shall have two ways to verify configuration based on hardware or software telemetry."" L3-SFS-657 is missing traces to C&DH SRS requirements to address the C&DH functionality in verifying configuration command based on hardware or software telemetry. L3-SFS-657: Every critical configuration command shall have two ways to verify configuration based on hardware or software telemetry.",5/27/05ProjectA - TIM - 1633,C&DH Traceability Analysis: L3-SFS-2255 has no associated L3 or L4 traces,3,"L3-SFS-2255 does not have any associated L3 or L4 traces. L3-SFS-2255 states: ""The C&DH shall support patching/loading via normal command paths (i.e. not limited to test ports). "" L3-SFS-2255 is missing traces to C&DH SRS requirements to address the C&DH support of ""patching/loading via normal command paths (i.e. not limited to test ports)"". L3-SFS-2255: The C&DH shall support patching/loading via normal command paths (i.e. not limited to test ports).",5/27/05ProjectA - TIM - 1632,C&DH Traceability Analysis: L3-SFS-2254 not satisfied by the existing L4 requirements trace,3,"[L3-SFS-2254] requires the C&DH to ""support patching/loading multiple flight software images."" Although, there are several ACE and Uplink Boot PROM SRS requirements linked to [L3-SFS-2254], there are no requirements linked from the OBC C&DH SRS. Referenced Requirements Artifact: DOORS database dated 6/9/05 [L3-SFS-2254] The C&DH shall support patching/loading multiple flight software images in the key engineering processors (UL, OBC, ACE). Requirements Linked to [L3-SFS-2254]: [L4-SRAUB-30] The Boot/Monitor shall support a Copy function which copies from Instruction space or Data space to EEPROM. [L4-SRAUB-29] The Boot/Monitor shall support a Compute CRC function that computes a 16-bit truncated CCITT16] CRC for the specified memory range with the result sent to the UART. [L4-SRAUB-28] The Boot/Monitor shall support an Initialize function to load areas of Instruction and Data memory with specific values. [L4-SRAUB-27] The Boot/Monitor shall provide the capability to begin execution at a specified address. [L4-SRAUB-26] The Boot/Monitor shall provide the capability to Continue execution at the point from which the Monitor program was called. [L4-SRAUB-25] The Boot/Monitor shall provide the capability to modify the contents of locations in input/output (I/O) space as defined in the UT69R000] RadHard Microcontroller Data sheet. [L4-SRAUB-24] The Boot/Monitor shall provide the capability to modify the contents of all UT69R000] registers as defined in the UT69R000] RadHard Microcontroller Data sheet. [L4-SRAUB-23] The Boot/Monitor shall provide the capability to modify the contents of memory locations in SRAM and EEPROM as defined in the UT69R000] RadHard Microcontroller Data sheet. [L4-SRAUB-22] The Boot/Monitor shall provide the capability to examine and report the contents of locations in input/output (I/O) space as defined in the UT69R000] RadHard Microcontroller Data sheet. [L4-SRAUB-21] The Boot/Monitor shall provide the capability to examine and report the contents of all UT69R000] registers as defined in the UT69R000] RadHard Microcontroller Data sheet. [L4-SRAUB-20] The Boot/Monitor shall provide the capability to examine and report the contents of memory locations in PROM, SRAM, and EEPROM as defined in the UT69R000] RadHard Microcontroller Data sheet. [L4-SRAUB-5] Multiple copies of the Boot Function table shall exist at different pre-determined locations in EEPROM. [L4-SRAUB-10] The Boot software shall provide the capability to copy data from Data Memory to Instruction Memory. [L4-SRAUB-11] The Boot software shall provide the capability to copy data from Data Memory to Data Memory. [L4-SRAUB-12] The Boot software shall provide the capability to initialize specified ranges of Data Memory to a specified value. [L4-SRAUB-13] The Boot software shall provide the capability to initialize specified ranges of Instruction Memory to a specified value. [L4-SRAUB-14] The Boot software shall provide the capability to set the execution start address of the Application Software to a specified value. [L4-SRAUB-15] The Boot software shall provide the capability to compute, record and validate a CRC for specified ranges of Data Memory. [L4-SRAUB-16] The Boot software shall provide the capability to compute, record and validate a CRC for specified ranges of Instruction Memory.",5/27/05ProjectA - TIM - 1631,C&DH Traceability Analysis: L3-SFS-2253 has no associated L3 or L4 traces,3,"L3-SFS-2253 does not have any associated L3 or L4 traces. L3-SFS-2253 states: ""The C&DH shall support the reprogramming of any reprogrammable hardware and have the patches survive a computer reset (with the exception of OBC, ACE, Uplink Card or other components SUROM) either by loading a non executing FSW image (e.g. EEPROM) on a controlling computer or by loading a powered but non-controlling computer. Specifically for the spacecraft: OBC, ACE, Uplink Card, EngCntrl, STKR. For the payload: FC, VIR, and GRaND."" L3-SFS-2253 is missing traces to C&DH SRS requirements to address the C&DH support of the reprogramming of any reprogrammable hardware and having the patches survive a computer reset. L3-SFS-2253: The C&DH shall support the reprogramming of any reprogrammable hardware and have the patches survive a computer reset (with the exception of OBC, ACE, Uplink Card or other components SUROM) either by loading a non executing FSW image (e.g. EEPROM) on a controlling computer or by loading a powered but non-controlling computer. Specifically for the spacecraft: OBC, ACE, Uplink Card, EngCntrl, STKR. For the payload: FC, VIR, and GRaND.",5/27/05ProjectA - TIM - 1630,C&DH Traceability Analysis: L3-SFS-1014 not satisfied by the existing L4 requirements trace,3,"L3-SFS-1014 does not appear to be satisfied by the 8 traced C&DH requirements (L4-SROBC-203, L4-SROBC-204, L4-SROBC-208 ,L4-SROBC-210, L4-SROBC-212, L4-SROBC-213, L4-SROBC-214, and L4-SROBC-216). L3-SFS-1014 states: ""The Spacecraft Engine processor shall provide the following FP features as a minimum: watchdog time-out (processor reset), memory verification/checksums of select memory locations, and communication link outages (no Comm with Spacecraft C&DH)."" All of the 8 traced requirements address FP Features; However none of the traced C&DH requirements address a watchdog time-out (processor reset), or communication link outages (no Comm with Spacecraft C&DH). L3-SFS-1014: The Spacecraft Engine processor shall provide the following FP features as a minimum: watchdog time-out (processor reset), memory verification/checksums of select memory locations, and communication link outages (no Comm with Spacecraft C&DH). All Traced Requirements: L4-SROBC-203: Flight Software shall maintain running calculations of essential variables (i.e., checksum) to be used for verification of a good table load prior to table use. L4-SROBC-204: Flight Software shall initialize and maintain an 8-bit EXCLUSIVE-OR checksum for the currently selected table. L4-SROBC-208: Flight Software shall accept and execute a COMMIT_TABLE_WITH_CHECKSUM command that compares the on-board Checksum with the expected Checksum specified in the command and performs the following based on the comparison results: L4-SROBC-210: If the specified Checksum and the on-board Checksum are not equal, the Flight Software shall reject the new or edited table loads, increment an error counter, generate a significant event message, calculate a CRC for each 4K-bytes of the load (or for the complete table if it is less that 4K-bytes), and transmit the CRCs in telemetry for ground analysis. L4-SROBC-212: Flight Software shall maintain a ground-definable checksum flag for each table. When true, the Flight Software calculates and stores the table checksum upon commitment of any uploaded change to the table. The Software Manager task indicates to the Checksum task to disable checksum checking a table undergoing commitment. L4-SROBC-213: Flight Software shall maintain a ground-definable jam-loadable flag for each table. When true (that is, jammable), the Flight Software immediately commits table changes to memory. When false (that is, non-jammable), the Flight Software ""handshakes"" with the table's assigned application task indicating that a table is ready to commit. The application task indicates back to Software Manager when commitment may take place. L4-SROBC-214: The execution of a table commit operation shall disable subsequent commit operation to that table until the table is again selected. L4-SROBC-216: Flight Software shall accept and execute an RESET_TABLE_OPERATIONS command that terminates the current table load/edit session without affecting the onboard versions of the currently selected table, regardless of whether a table has been selected.",5/26/05ProjectA - TIM - 1629,C&DH Traceability Analysis: L3-SFS-972 not satisfied by the existing L4 requirements trace,3,"There appears to be several L4 OBC C&DH requirements linked incorrectly to [L3-SFS-972]. [L4-SROBC-301], [L4-SROBC-297], and [L4-SROBC-296] are specific to DRAM; whereas, [L3-SFS-972] is limited to ""static"" memory. Referenced Requirements Artifact: DOORS database dated 6/9/05 [L3-SFS-972] The Spacecraft shall perform memory scrub of static memory at a ground selectable rate, to detect and correct single bit flEngine. Requirements Linked to [L3-SFS-972]: [L4-SROBC-295] Flight Software shall provide background memory scrubbing of the SRAM in the Flight Computer [L4-SROBC-296] Flight Software shall provide background memory scrubbing of the triply redundant Error Detection and Correction (EDAC) DRAM on the memory card. [L4-SROBC-297] The DRAM memory checks shall be capable of detecting multiple errors in the DRAM. [L4-SROBC-299] Flight Software shall provide a command to enable scrubbing of SRAM and DRAM with a parameter specifying scrub rate. [L4-SROBC-300] Flight Software shall provide a command to disable the scrubbing of SRAM and DRAM. [L4-SROBC-301] Flight Software shall provide a command to restart the scrubbing of DRAM which will cause MS to start scrubbing from the first DRAM segment, and reset its housekeeping telemetry associated with DRAM scrubbing. [L4-SROBC-305] The OBC flight software shall provide a mechanism to verify the contents of key static memory areas to support single event upset detection in EEPROM and SRAM (code and static table data). [L4-SROBC-317] The OBC flight software shall provide a handshake mechanism with the software manager task for loading static tables without generating false checksum errors. [L3-SFS-943] The Spacecraft shall provide memory protection for the prescribed operating environments (radiation hardening/mitigation). Requirements Linked to [L3-SFS-943]: [L4-SROBC-305] The OBC flight software shall provide a mechanism to verify the contents of key static memory areas to support single event upset detection in EEPROM and SRAM (code and static table data). [L4-SROBC-308] The OBC flight software shall provide a command to re-compute checj ksums for each of the following memory types: [L4-SROBC-309] EEPROM [L4-SROBC-310] Code segments in RAM [L4-SROBC-311] All static tables in RAM [L4-SROBC-312] The OBC flight software shall provide a command to enable or disable the checksumming of the following memory types: [L4-SROBC-313] All memory areas [L4-SROBC-314] EEPROM [L4-SROBC-315] Code segments in SRAM [L4-SROBC-316] Static tables in SRAM.",5/26/05ProjectA - TIM - 1628,C&DH Traceability Analysis: L3-SFS-971 not satisfied by the existing L4 requirements trace,3,"[L3-SFS-971], does not appear to be satisfied by the linked OBC C&DH SRS requirements, [L4-SROBC-291] and [L4-SROBC-292], and the ACS SRS requirement, [L4-SROAC-4]. The two linked C&DH SRS requirements address monitoring the status of critical software tasks; while, the linked ACS SRS requirement is specific to ""latched FDIR status telemetry."" However, none of the linked requirements address responding to anomalies with predefined corrective actions. Referenced Requirements: Artifact: DOORS database dated 6/9/05 [L3-SFS-971] The Spacecraft shall monitor the status of critical software tasks and on anomaly, respond with predefined corrective actions. Requirements Linked to [L3-SFS-971]: [L4-SROBC-291] Flight Software shall generate an OBC health status telemetry packet consisting of an OBC state (healthy, reset, fault), the status of telemetry monitoring (enabled/disabled), and shall be timestamped. [L4-SROBC-292] The Flight Software shall send an OBC health status telemetry packet to the Uplink Card at 1 Hz. [L4-SROAC-4] ACS software shall provide a latched FDIR status telemetry that reflects the FDIR status since last reset or until cleared by ground command.",5/26/05ProjectA - TIM - 1627,C&DH Traceability Analysis: L3-SFS-909 not satisfied by the existing L4 requirements trace,3,"There are several links from the OBC C&DH, OBC SuROM, and OBC ACS SRSs to [L3-SFS-909]; however, these requirements do not seem to satisfy [L3-SFS-909]. This may be partly due to the wording of [L3-SFS-909]. Presumably, ""component reset"" conveys ""OBC re-boot,"" and ""switch"" conveys ""OBC swap."" No references to the term ""Phoenix Mode"" were found in any of the L4 SRSs. If [L3-SFS-909] is applicable to an OBC swap, then it would seem that UPL would support this functionality as well. However, there are no L4 UPL SRS requirements linked to L3-SFS-909. Referenced Requirements: Artifact: DOORS database dated 6/9/05 [L3-SFS-909] The Flight System shall initialize to a safe state following initial powerup, component reset or switch or recovery from Phoenix mode. Safe State: prevent powering previously failed unit, use of actuators while mated, monitor separation and initiate separation sequence and transition to Safe Mode when appropriate. Requirements Linked to [L3-SFS-909]: [L4-SROAC-16] After initialization is complete, the ACS software shall respond to ACS Commands. [L4-SROAC-15] When the C&DH software indicates that a power-on or re-boot has occurred, selected ACS FDIR processing shall be initialized as disabled. [L4-SROAC-14] When the C&DH software indicates that a power-on or re-boot has occurred, all AC statistics shall be reset to zero. [L4-SROSU-4] Flight Software shall accept an initialization parameter block via ground command, including Spacecraft ID (Default=0x75), VCDU RS Code(Default=0x4D47), VCDU Size (Default=1084), Downlink Card VCDU Rate (Default=1 per second), Uplink Card VCDU Rate (Default= 1 per 4 seconds), Time (Default=0), with no Insert Zone, and RT-Primary, where the Spacecraft ID and RT-Primary values are stored in EEPROM memory. [L4-SROBC-3] Flight Computer startup applications shall place the spacecraft into a safe system configuration without any ground intervention following power-up or a temporary power bus fault (cold-boot). [L4-SROBC-4] Flight Software shall reset/restart and initialize all Flight Computer hardware components on the processor board to a known state. [L4-SROBC-272] Flight Software shall collect the following statistics data associated with each monitor point: [L4-SROBC-278] time_of_last_reset (Note: [L4-SROBC-272] not linked to [L3-SFS-909] directly)",5/26/05ProjectA - TIM - 1626,C&DH Traceability Analysis: L3-SFS-878 not satisfied by the existing L4 requirements trace,3,"L3-SFS-878 does not appear to be satisfied by the 5 traced C&DH requirements (L4-SROBC-210, L4-SROBC-218, L4-SROBC-219, L4-SROBC-227, and L4-SROBC-228). L3-SFS-878 states: ""The Flight Software, on command from MOS, shall provide a directory listing entry consisting of the name, CRC, and data size of the file."" All of the mapped C&DH requirement address the CRC; however, none of the C&DH SRS mapped requirements address the obtaining a directory listing with the name, CRC, and data size of the file. L3-SFS-878: The Flight Software, on command from MOS, shall provide a directory listing entry consisting of the name, CRC, and data size of the file. All Traced Requirements: L4-SROBC-210: If the specified Checksum and the on-board Checksum are not equal, the Flight Software shall reject the new or edited table loads, increment an error counter, generate a significant event message, calculate a CRC for each 4K-bytes of the load (or for the complete table if it is less that 4K-bytes), and transmit the CRCs in telemetry for ground analysis. L4-SROBC-218: Flight Software shall accept and execute a COMPUTE_CRC command that computes a CRC for a specified memory range and returns the value in housekeeping telemetry. L4-SROBC-219: Flight Software shall accept and execute a START_MEMORY_DWELL command that continuously captures and telemeters the contents of specified processor address locations. L4-SROBC-227: Flight Software shall accept and execute a COMPUTE_CRC_RANGE command that computes a CRC for a specified memory range and returns the value in event with the maximum number of events not exceeds 20. L4-SROBC-228: Flight Software shall accept and execute a COMPUTE_CHECKSUM command that computes a CHECKSUM for a specified memory range and returns the value in an event message with the maximum number of events not to exceed 20.",5/26/05ProjectA - TIM - 1625,C&DH Traceability Analysis: L3-SFS-877 not satisfied by the existing L4 requirements traces,3,"L3-SFS-877 does not appear to be satisfied by the 3 traced C&DH requirements (L4-SROBC-218, L4-SROBC-222, and L4-SROBC-223) and the 1 VML requirement (L4-SRVML-19). L3-SFS-877 states: ""The Flight Software shall provide the capability to read out a list of the stored sequence and their sizes. ""None of the C&DH SRS mapped requirements address ""a list of the stored sequence and their sizes""; However the mapped VML SRS requirement (L4-SRVML-19) does discuss a file buffer sequence. Also, the 3 traced C&DH requirements (L4-SROBC-218, L4-SROBC-222, and L4-SROBC-223) do not appear to be related to L3-SFS-877. L3-SFS-877: The Flight Software shall provide the capability to read out a list of the stored sequence and their sizes. All Traced Requirements: L4-SROBC-218: Flight Software shall accept and execute a COMPUTE_CRC command that computes a CRC for a specified memory range and returns the value in housekeeping telemetry. L4-SROBC-222: Flight Software shall telemeter, in a single CCSDS packet, the combined MEMORY_DWELL data contents at a rate of no faster than one packet per second. L4-SROBC-223: The time stamp associated with each MEMORY_DWELL packet shall be the sample time associated with the first data sample of the packet. L4-SRVML-19: VM Sequence Memory VM Task shall provide capability for VMLFC to read a sequence from a file buffer and to notify Ground System on anomalies on that read.",5/26/05ProjectA - TIM - 1624,C&DH Traceability Analysis: L3-SFS-872 not satisfied by the existing L4 requirements trace,3,"L3-SFS-872 does not appear to be satisfied by the 1 traced C&DH requirement (L4-SROBC-224)and the 1 traced VML requirement. L3-SFS-872 states: ""The spacecraft shall provide 4 Mbytes of sequence and data storage capacity in DRAM for MOS use and 200 Kbytes in SRAM for the VMLFC application code."" Neither of the L4 requirements address data storage capacity in DRAM for MOS or SRAM for the VMLFC application code. L3-SFS-872: The spacecraft shall provide 4 Mbytes of sequence and data storage capacity in DRAM for MOS use and 200 Kbytes in SRAM for the VMLFC application code. All Traced Requirements: L4-SROBC-224: Flight Software shall support up to 64 distinct MEMORY_DWELL addresses. L4-SRVML-20: VM Memory Buffer VM Task shall provide capability of dumping information regarding the file buffers residing in DRAM request.",5/26/05ProjectA - TIM - 1623,C&DH Traceability Analysis: L3-SFS-837 not satisfied by the existing L4 requirement trace,3,"L3-SFS-837 does not appear to be satisfied by the 1 traced C&DH requirement (L4-SROBC-152). L3-SFS-837 states: ""The Flight Software shall support use of the spacecraft's Virtual Channel Frame Count (VCFC) for retransmitted frames shall be the same as the VCFC used for playback of the same frame."" Requirement L4-SROBC-152 addresses retransmitting frames; however, L4-SROBC-152 does not address use of the Virtual Channel Frame Count (VCFC) for retransmitted frames to be the same as the VCFC used for playback of the same frame. L3-SFS-837: The Flight Software shall support use of the spacecraft's Virtual Channel Frame Count (VCFC) for retransmitted frames shall be the same as the VCFC used for playback of the same frame. All Traced Requirements: L4-SROBC-152: The OBC-C&DH software shall accept and execute a RETRANSMIT_DATASETS command, which begins retransmission of the specified DATASET for specified Virtual Recorders.",5/26/05ProjectA - TIM - 1622,C&DH Traceability Analysis: L3-SFS-754 not satisfied by the existing L4 requirements trace,3,"L3-SFS-754 does not appear to be satisfied by the existing C&DH, Uplink, ACS, and VML requirements that are linked in the June 9, 2005 DOORS DB. L3-SFS-754 states: ""General Flight Software telemetry packets shall be timed tagged to a minimum resolution of 1.0 seconds with respect to spacecraft time."" All of the linked requirements deal with telemetry; however none of the traced requirements specifically address the time tagging of telemetry packets to a minimum resolution of 1.0 seconds with respect to spacecraft time. Note: L4 requirements links to L3-SFS-754 changed significantly after receipt of the DOORS DB on April 21, 2005. L3-SFS-754: General Flight Software telemetry packets shall be timed tagged to a minimum resolution of 1.0 seconds with respect to spacecraft time. All Traced Requirements from the June 9, 2005 DOORS DB: L4-SROAC-49 The AC software shall maintain statistics on ACS telemetry received, including the total number of packets received. L4-SRVML-12 VM Global Variable Telemetry VM Task shall provide interface storage and transmission of the VMLFC global variables in sequences/blocks being executed. L4-SRVML-11 VML Channeled Telemetry VM Task shall provide interface for VML internal Telemetry storage and transmission via Software Bus. L4-SRUP-325 Timestamp. L4-SROAC-94 All AC telemetry shall be time-tagged with the on-board system time. L4-SROBC-250 Thermal Control Software shall provide sensor sampling and control response rates at 1 Hz for all applicable heater units. L4-SROBC-251 Thermal Control Software shall be capable of performing the temperature reading processing for all thermal data points at 1 Hz.",5/26/05ProjectA - TIM - 1621,C&DH Traceability Analysis: L3-SFS-753 not satisfied by the existing L4 requirements trace,3,"L3-SFS-753 does not appear to be satisfied by the 9 linked C&DH requirements (L4-SROBC-99, L4-SROBC-100 - L4-SROBC-105, L4-SROBC-107, and L4-SROBC-223). L3-SFS-753 states: ""The Flight Software shall maintain time and distribute to tasks for time stamping telemetry, managing stored command sequences, and in support of attitude and navigation."" The mapped requirements only address the capability of maintaining time and distributing to tasks for managing stored commands, but do not address maintaining time and distributing to tasks for time stamping telemetry, or in support of attitude and navigation. However the requirements in support of attitude and navigation should be found within the ACS SRS and not with the C&DH SRS. Maintaining time and distributing to tasks for time stamping telemetry should be found within the C&DH SRS. L3-SFS-753: The Flight Software shall maintain time and distribute to tasks for time stamping telemetry, managing stored command sequences, and in support of attitude and navigation. All Traced Requirements: L4-SROBC-99: Flight Software shall accept and execute a JAM_SECONDS command to jam the seconds field of the spacecraft clock. The JAM_SECONDS command, received from the ground, sets the seconds field of the spacecraft clock to the value in the command. L4-SROAC-163: The AN software shall send ephemeris data to AC task every commandable seconds between 30 to 300 seconds (default is 300 seconds) after enabled by AC task. L4-SROBC-223: The time stamp associated with each MEMORY_DWELL packet shall be the sample time associated with the first data sample of the packet. L4-SRUP-197: The Uplink FSW shall evenly space the longer ""seconds"" over the entire one hundred second period. L4-SRUP-196: The Uplink FSW shall modify the integer value with a fractional component that specifies the number of ticks to add over a 100 second period. L4-SRUP-195: The Uplink FSW shall calculate an integer 1 Hz signal timing count, segmenting the count into evenly spaced integer values and applying these to every one of the 2 KHz intervals within one second. L4-SRUP-194: The Uplink FSW shall accept an Open Loop Command that specifies the number of Master Clock ticks that equal one second. L4-SRUP-192: The Uplink FSW shall accept open loop commands using commanded intervals. L4-SRUP-191: The Uplink FSW shall support an open loop mode of operation by loading a specified hardware divider with the number of Master Clock ticks specified to equal one second. L4-SROBC-100: Flight Software shall send the time of the next 1 Hz pulse to the Framing Camera/VIR instrument via the 1553 bus, prior to the 1553 slot allocated to this function (currently at 0 milliseconds). L4-SROBC-101: Flight Software shall maintain sub-seconds in spacecraft time to 5 milliseconds updated by the 1553 device driver. L4-SROBC-102: Flight Software shall make available, on demand, the current spacecraft time via library functions to all flight software applications. L4-SROBC-103: Flight Software shall provide 1 Hz and 10 Hz Interrupt Service Routines (ISRs) (generated from the uplink card 1 Hz and 10 Hz pulses) that are used to schedule software operations. L4-SROBC-104: In the event that the 1 Hz pulse from the uplink card is unavailable, the Flight Software shall provide a backup interrupt to schedule software operations. L4-SROBC-105: In the event that the 10 Hz pulse from the uplink card is unavailable, the Flight Software shall provide a backup interrupt to schedule software operations. L4-SROBC-107: Flight Software shall set its seconds to the value passed by the Uplink FSW at boot. L4-SROAC-94 All AC telemetry shall be time-tagged with the on-board system time.",5/26/05ProjectA - TIM - 1620,C&DH Traceability Analysis: L3-SFS-744 not satisfied by the existing L4 requirements trace,3,"L3-SFS-744 does not appear to be satisfied by the one C&DH requirement (L4-SROBC-139). L3-SFS-744 states: ""The Flight Software shall report the amount of remaining unallocated telemetry capacity upon command."" L4-SROBC-139 only discusses the capability of providing ground commands to modify the memory quota of an individual Virtual Recorder, but does not discuss reporting ""the amount of remaining unallocated telemetry capacity"". L3-SFS-744: The Flight Software shall report the amount of remaining unallocated telemetry capacity upon command. All Traced Requirements: L4-SROBC-139: The OBC-C&DH software shall provide ground commands to modify the memory quota of an individual Virtual Recorder during run-time operation without disabling the storage into the Virtual Recorder and without disrupting the normal flow of data to the Virtual Recorder.",5/26/05ProjectA - TIM - 1619,C&DH Traceability Analysis: L3-SFS-743 not satisfied by the existing L4 requirements trace,3,"L3-SFS-743 does not appear to be satisfied by the one C&DH requirement (L4-SROBC-139). L3-SFS-743 states: ""The Flight Software shall report the amount of memory allocated to a specified telemetry buffer via telemetry."" L4-SROBC-139 only discusses the capability of providing ground commands to modify the memory quota of an individual Virtual Recorder, but does not discuss reporting ""the amount of memory allocated to a specified telemetry buffer"". L3-SFS-743: The Flight Software shall report the amount of memory allocated to a specified telemetry buffer via telemetry. All Traced Requirements: L4-SROBC-139: The OBC-C&DH software shall provide ground commands to modify the memory quota of an individual Virtual Recorder during run-time operation without disabling the storage into the Virtual Recorder and without disrupting the normal flow of data to the Virtual Recorder.",5/26/05ProjectA - TIM - 1618,Incomplete tracing of L4-SRUP-294 to the L3 requirements,3,"L4-SRUP-294 defines functionality that appears to be directly applicable to the functionality defined in requirements: L3-SFS-789, L3-SFS-790, and L3-SFS-987. However, links to these L3 requirements do not exist. L4-SRUP-294 states: The Uplink FSW shall verify a Table Load command packet checksum and word length prior to execution. If the calculated checksum does not match the checksum within the command packet or the word length is not as expected, the command is rejected. Suggested links: L3-SFS-789: The Flight Software shall support verification of each uplink segment and packet parameters received from the ground. L3-SFS-790: The Flight Software shall reject the uplink command if an error is detected. L3-SFS-987 The Spacecraft shall reject all invalid commands, and shall terminate any sequence that issues an invalid command. Definition: An invalid command is defined as being a command checksum failure, other aspects will be covered by the ground system",5/19/05ProjectA - TIM - 1617,"Incomplete tracing of L4 Uplink requirements to L3-SFS-808, L3-SFS-830, L3-SFS-831 and L3-SFS-988",3,"L3-SFS-808, L3-SFS-830, and L3-SFS-831 currently have no traces to the Uplink SRS. L4-SRUP-289 and L4-SRUP-290 define functionality that is directly applicable to these requirements as well as L3-SFS-988. L3-SFS-808: The Flight Software shall terminate a specified thread of execution upon command. L3-SFS-830 The Flight Software shall provide the capability to terminate a sequence regardless of its present state. L3-SFS-831 The Flight Software shall be able to terminate a sequence with either a single command or single sequence instruction. L3-SFS-988: Spacecraft FP responses shall suspend execution of programmed, onboard stored command sequences when this becomes necessary, where the termination event will be recorded in telemetry. L4-SRUP-289 : Flight Software shall stop execution of the requested RTS upon receipt of the real-time command STOP_RTS from either the ground or another on-board software application. L4-SRUP-290: Flight Software shall enable or disable the execution of the requested RTS upon receipt of the real-time commands ENABLE_RTS or DISABLE_RTS from either the ground or another on-board software application.",5/19/05ProjectA - TIM - 1616,Incomplete tracing of L4-SRUP-288 to the L3 requirements,3,"L4-SRUP-288 defines functionality that appears to be directly applicable to the functionality defined in requirements: L3-SFS-804, L3-SFS-806, and L3-SFS-807. However, links to these L3 requirements do not exist. L4-SRUP-288: Uplink RTS' shall dispatch up to 10 commands per second. L3-SFS-804: The Flight Software shall execute relative-time sequence instructions within 0.1 second, inclusive of the indicated time relative to the preceding instruction. L3-SFS-806 : The Flight Software shall provide the capability to execute consecutive sequence instructions with relative time tags of 0.1 second apart. L3-SFS-807: The Flight Software shall be capable of executing 16 or more relative time sequence instructions per second. The existing traces: L3-SFS-694: The Flight Software shall support flight software subsystem requirements, including processing commands and telemetry, storing and transmitting data, and maintaining flight software health. L3-SFS-746: The Flight Software shall provide command handling in the form of real-time command processing (distribution to subsystem functions and instruments), and stored capability (relative and absolute).",5/19/05ProjectA - TIM - 1615,Incomplete tracing of Uplink SRS Requirements to L3-SFS-987,3,"L4-SRUP-280, L4-SRUP-281, and L4-SRUP-285 are directly applicable to the functionality defined in L3-SFS-987; however, no links to these requirements exist. L3-SFS-987: The Spacecraft shall reject all invalid commands, and shall terminate any sequence that issues an invalid command. Definition: An invalid command is defined as being a command checksum failure, other aspects will be covered by the ground system. L4-SRUP-280: Prior to the execution of each individual RTS command, the Flight Software shall verify the validity of the following command parameters: RTS command length, and Embedded command checksum. L4-SRUP-281: In the event an RTS command fails the validation check: L4-SRUP-285: Flight Software shall ABORT the execution of that specific RTS buffer.",5/19/05ProjectA - TIM - 1614,Insufficient tracing to L4-SRUP-266,4,"L4-SRUP-266 is insufficiently traced. Suggest that a missing link be added to L3-SFS-916. The existing trace to L3-SFS-694 lacks specificity. L4-SRUP-266 states: The Uplink FSW fault protection software shall execute any pending commands prior to telemetry evaluation, to ensure command responses have priority over fault detection. L3-SFS-916: The Flight System FP design shall have capability to: • Respond to minor anomalies without interrupting normal operations • Autonomously switch/reset components w/temporary interruption of normal operations • Autonomously abort normal operations and transition to safe state awaiting ground recovery L3-SFS-694: The Flight Software shall support flight software subsystem requirements, including processing commands and telemetry, storing and transmitting data, and maintaining flight software health",5/19/05ProjectA - TIM - 1613,Incomplete tracing of L4 Uplink SRS requirements to L3-SFS-751,3,"Linking of L4-SRUP-224 through L4-SRUP-227 is incomplete. L4-SRUP-221 specifically defines functionality related to the system functionality defined in L3-SFS-751. L3-SFS-751: The Flight Software shall log major events as reported by subsystem tasks for later retransmit The following Uplink requirements relate to the retransmission of the event log: L4-SRUP-224: The Uplink FSW shall transfer a specified range of event messages on command. L4-SRUP-225 On command, the Uplink FSW shall dump fault log entries for either log. L4-SRUP-226 Log entries shall replace spare telemetry in the Uplink Critical VCDU. L4-SRUP-227 The Uplink FSW shall dump the specified range of event messages in telemetry on command.",5/19/05ProjectA - TIM - 1612,Incomplete linking of L4-SRUP-221,3,Linking of L4-SRUP-221 is incomplete. L4-SRUP-221 specifically defines functionality related to the system functionality defined in L3-SFS-905. L4-SRUP-221: The mate fault log shall function in the same way as the self fault log. L3-SFS-905 The Spacecraft shall maintain a FP log in both UL cards and shall be kept in sync within 10 messages. The number of messages shall be modifiable by table load.,5/19/05ProjectA - TIM - 1611,L4-SRUP-206 contains incorrect L3 traces,4,"L4-SRUP-206 contains two incorrect traces. L4-SRUP-206 states: The protocol shall facilitate the transfer of commands, status messages, and fault log entries between the uplink cards. The incorrect traces are as follows: L3-SFS-911: Spacecraft design or FP shall prevent or respond to the scenario where both OBCs are powered and configured as 1553 bus controllers. L3-SFS-694: The Flight Software shall support flight software subsystem requirements, including processing commands and telemetry, storing and transmitting data, and maintaining flight software health. The remaining traces to L4-SRUP-206 are adequate.",5/19/05ProjectA - TIM - 1610,L4-SRUP-205 incorrectly traced to L3-SFS-911,4,L4-SRUP-205 contains an incorrect trace. L4-SRUP-205 states: The Uplink FSW shall support a 19.2 Kbps serial interface used for communication with the redundant Uplink Card. This refers to the uplink to uplink interface. The incorrect traces are as follows: L3-SFS-911: Spacecraft design or FP shall prevent or respond to the scenario where both OBCs are powered and configured as 1553 bus controllers. The remaining traces to L3-SFS-941 and L3-SFS-891 are adequate.,5/19/05ProjectA - TIM - 1609,Incorrect and Incomplete traces to L3-SFS-847,3,"The functionality in L4-SRUP-196 is unrelated to L3-SFS-847. According to the June 9, 2005 DOORS DB there are no other L4 requirements linked to L3-SFS-847. L3-SFS-753 is linked as a child to L3-SFS-847; however, it is not clear that the functionality defined in L3-SFS-847 is specifically addressed. L3-SFS-847: The Flight Software shall provide a 64-bit time field (32 bit seconds, 32 bit sub-seconds) in the Packet Secondary Header. All traced requirements: L4-SRUP-196: The Uplink FSW shall modify the integer value with a fractional component that specifies the number of ticks to add over a 100 second period. L3-SFS-753: The Flight Software shall maintain time and distribute to tasks for time stamping telemetry, managing stored command sequences, and in support of attitude and navigation.",5/19/05ProjectA - TIM - 1608,L3-SFS-874 not fully addressed by the linked L4 requirements,2,"L3-SFS-874 is not fully satisfied by the linked L4 requirements. There are currently no traces to the Uplink SRS. The following Uplink SRS requirements were identified as being applicable to the functionality defined in L3-SFS-874: L4-SRUP-170, L4-SRUP-172, L4-SRUP-182, L4-SRUP-183, L4-SRUP-298, and L4-SRUP-301. However, the specific functionality for loading and deleting sequences, and requesting directory listings via memory dump is not specifically addressed by the linked requirements. L3-SFS-874 states: The Flight Software shall provide capabilities to allow the MOS to load and delete sequences and request directory listings, all via memory dump. L4-SRUP-170: The Uplink FSW shall generate Uplink Card Telemetry VCDUs using one or more of the following packets with the following APIDs: L4-SRUP-172: 0x0FF2 Memory Dump Packet L4-SRUP-182: Upon receipt of a memory dump command from the ground, the Uplink FSW shall insert a Memory Dump Telemetry Packet into each Uplink Card VCDU until the memory dump is complete. L4-SRUP-183: The first word in the data section of the Memory Dump Telemetry Packet shall contain the starting address of the memory dump for the packet. L4-SRUP-298: Flight Software shall accept and execute a SELECT_TABLE command, which initializes a table load/edit ""session"" to load or dump data for a specified table. L4-SRUP-301: Flight Software shall accept and execute a DUMP_TABLE command, specifying an offset into the table to start dumping, the number of words to dump from the offset, and the number of copies to dump.",5/19/05ProjectA - TIM - 1607,Incorrect tracing of L4-SRUP-158 and L4-SRUP-159 to L3-SRS-942,3,"The following traces from L3-SFS-942 to Uplink requirements are incorrect: L4-SRUP-158 and L4-SRUP-159. The remaining traces from L3-SFS-942 to the Uplink requirements are correct. L3-SFS-942 states: The Spacecraft shall provide health monitors for all C&DH processors and interfaces. L4-SRUP-158 states :The Uplink FSW shall send Critical VCDUs to the Downlink Card via SCSA interface at a programmable rate associated with downlink telemetry rate, once per 360 seconds by default. L4-SRUP-159 states : The Uplink FSW shall collect, format and transmit Uplink Card Telemetry to the Downlink Card.",5/19/05ProjectA - TIM - 1606,Insufficient tracing of L4-SRUP-157,3,"Uplink SRS requirement L4-SRUP-157 appears to be applicable to the functionality defined in L3-SFS-891 and L3-SFS-981 for fault/error logging; however the requirement is not linked to either of the L3 SCFSRD requirements. L4-SRUP-157: The Uplink FSW shall report instances of aborting SCSA transactions in critical telemetry. L3-SFS-891 The Flight System FP design shall include hardware and low level flight software monitors such as watchdog timers, fault indicators (e.g., self diagnostics, error logging), error detection and correction systems, etc. for critical component processors. L3-SFS-981: The Spacecraft shall store all FP event messages in the FP log.",5/19/05ProjectA - TIM - 1605,Incorrect L4 Uplink requirements traced to L3-SFS-843,4,"The following traces to L3-SFS-843 are incorrect: L4-SRUP-152, L4-SRUP-154, L4-SRUP-156, L4-SRUP-157, and L4-SRUP-285. The remaining trace to L4-SRUP-303 is valid. (Note there are L4 requirements from the OBC C&DH SRS also linked to L3-SFS-843.) L3-SFS-843 states: The Flight Software shall allow the transmission of stored data to be paused or aborted by command while in progress. L4-SRUP-152 states: The Uplink FSW shall abort and log as an SCSA error any VCDU transmission that has not completed within 100 milliseconds (ms). L4-SRUP-154 states: The Uplink FSW shall abort and log as an SCSA error any Downlink command transmission that has not completed within 100 microseconds. L4-SRUP-156 states The Uplink FSW shall retry each transaction once then abort the transaction. L4-SRUP-157 states The Uplink FSW shall report instances of aborting SCSA transactions in critical telemetry L4-SRUP-285 states: Flight Software shall ABORT the execution of that specific RTS buffer. L4-SRUP-303 states: Flight Software shall accept and execute an Abort Table Dump command.",5/19/05ProjectA - TIM - 1604,Incorrect and incomplete tracing of L4-SRUP-287,3,"It is not clear that L4-SRUP-287 is correctly traced to L3-SFS-761. The functionality defined in L4-SRUP-287 does not appear to be necessary to address the software functionality defined in L3-SFS-761. However, it does appear that the functionality defined in L4-SRUP-287 is necessary to address requirement L3-SFS-746. L4-SRUP-287: An RTS shall be DISABLED immediately after it has been loaded. L3-SFS-746 : The Flight Software shall provide command handling in the form of real-time command processing (distribution to subsystem functions and instruments), and stored capability (relative and absolute). L3-SFS-761: The Flight Software shall include system startup procedures that contain default control capabilities sufficient to place the flight software into a safe and deterministic system configuration without any ground intervention following power-up or reset.",5/19/05ProjectA - TIM - 1603,Incomplete and Incorrect tracing of L4-SRUP-137,3,"The existing trace from L4-SRUP-137 to L3-SFS-767 is erroneous and should be deleted. In addition, L4-SRUP-137 appears to partially address the functionality defined in L3-SFS-833. L4-SRUP-137: The Uplink FSW shall transmit the most recently generated Uplink VCDU to the OBC when a request is received across the HSS1 interface. L3-SFS-767: The Flight Software shall support Hardware Logic Pulse commands implemented in C&DH L3-SFS-833: The Flight Software shall support use of the spacecraft downlink frames and shall uniquely identify onboard frame location by virtual channel (VC) id and VCDU counter.",5/19/05ProjectA - TIM - 1601,Insufficient tracing to L3-SFS-891,3,"Uplink SRS requirement L4-SRUP-333 appears to be applicable to the functionality defined in L3-SFS-891; however the requirement is not linked. L4-SRUP-333 maintains the WDT status in support of the FP functionality defined in L3-SFS-891. L3-SFS-891: The Flight System FP design shall include hardware and low level flight software monitors such as watchdog timers, fault indicators (e.g., self diagnostics, error logging), error detection and correction systems, etc. for critical component processors. L4-SRUP-324: The Uplink FSW shall maintain a status message containing the following parameters: L4-SRUP-333: OBC WDT Status.",5/19/05ProjectA - TIM - 1596,Insufficient tracing to L3-SFS-789,4,"L4-SRUP-305, L4-SRUP-306, and L4-SRUP-308 appear to address functionality defined in L3-SFS-789; however links between these 3 L4 requirements and L3-SFS-789 do not exist. L3-SFS-789: The Flight Software shall support verification of each uplink segment and packet parameters received from the ground. L4-SRUP-305: Flight Software shall initialize and maintain an 8-bit EXCLUSIVE-OR checksum for the currently selected table. L4-SRUP-306 : Flight Software shall initialize and maintain a SESSION_WORD_COUNT for the total number of words loaded for the currently selected table. L4-SRUP-308: Flight Software shall accept and execute a COMMIT_TABLE_WITH_CHECKSUM command that compares the on-board Checksum with the expected Checksum specified in the command and performs the following based on the comparison results:",5/19/05ProjectA - TIM - 1595,Insufficient tracing to L4-SRUP-296,4,"L4-SRUP-296 is insufficiently traced. Suggest that missing links be added to L3-SFS-789, L3-SFS-790, and L3-SFS-987. These links would relate to the verification of a load packet. L4-SRUP-296 states: Flight Software shall maintain counters for Table operations commands that were not processed due to error conditions, and generate event messages for error conditions. L3-SFS-789: The Flight Software shall support verification of each uplink segment and packet parameters received from the ground. L3-SFS-790: The Flight Software shall reject the uplink command if an error is detected. L3-SFS-987 The Spacecraft shall reject all invalid commands, and shall terminate any sequence that issues an invalid command. Definition: An invalid command is defined as being a command checksum failure, other aspects will be covered by the ground system",5/19/05ProjectA - TIM - 1594,Incorrect tracing of L4-SRUP-295,3,"L4-SRUP-295 incorrectly traced to L3-SFS-985, L3-SFS-977, and L3-SFS-976. The functionality defined in L4-SRUP-295 is not applicable to teh Spacecraft functionality defined in L3-SFS-985, L3-SFS-977, and L3-SFS-976. L4-SRUP-295: Flight Software shall maintain counters for error-free Table operations commands received and processed. L3-SFS-985: The Spacecraft FP log shall be downlinked during every pass, shall have priority in the operational selection of downlink data, and shall have the ability to be re-transmitted. L3-SFS-977: Spacecraft FP software response enable defaults and sequence contents shall be in-flight modifiable via commands, table, or parameter loads. L3-SFS-976: Spacecraft FSW FP monitor enable defaults, threshold trigger values, persistence and responses shall be run-time modifiable by in-flight commands, table or parameter uploads.",5/19/05ProjectA - TIM - 1593,Incorrect and Incomplete tracing of L4-SRUP-141 - L4-SRUP-144,3,"The existing traces to L4-SRUP-141 - L4-SRUP-144 are incorrect. The existing traces are: L3-SFS-780, L3-SFS-788, and L3-SFS-790 L4-SRUP-141 states: The Uplink FSW shall reset the Uplink side of the HSS1 interface when signaled by the OBC through a discrete line that a hang condition exists by performing the following actions: L4-SRUP-142: Drop all GSC commands held by the Uplink L4-SRUP-143: Abort any HSS1 transmissions in progress L4-SRUP-144: Clear the GSC command interrupt line. L3-SFS-780: The Flight Software shall be able to process any command in the Command and Telemetry Dictionary L3-SFS-788: The Flight Software shall accept and process uplink command segment data from the ground per the format described in the FGICD and Command & Telemetry Dictionary. L3-SFS-790: The Flight Software shall reject the uplink command if an error is detected. Deletion of these links will leave no links to a L3 parent requirement.",5/19/05ProjectA - TIM - 1592,"Incomplete tracing of L4-SRUP-145, L4-SRUP-146, and L4-SRUP-149 to the L3 SCFSRD requirements",3,"Tracing of the requirements L4-SRUP-145, L4-SRUP-146, and L4-SRUP-149 to the L3 SCFSRD requirements is incomplete. The 3 L4 requirements are directly applicable to the functionality defined in L3-SFS-891 and L3-SFS-981 for error logging. L4-SRUP-145: The Uplink FSW shall log the HSS1 interface hang condition as an HSS1 error. L4-SRUP-146: The Uplink FSW shall log each dropped GSC command as a GSC command error. L4-SRUP-149: The Uplink FSW shall log any SCSA message experiencing a hardware error as an SCSA error. L3-SFS-891 The Flight System FP design shall include hardware and low level flight software monitors such as watchdog timers, fault indicators (e.g., self diagnostics, error logging), error detection and correction systems, etc. for critical component processors. L3-SFS-981: The Spacecraft shall store all FP event messages in the FP log.",5/19/05ProjectA - TIM - 1591,Incorrect and Incomplete tracing of L4-SRUP-247,3,"L4-SRUP-247 is incorrectly traced to L3-SFS-978. Suggest that a better trace is to L3-SFS-2580. L4-SRUP-247: The Uplink FSW monitors shall call a fault response based on the RT ID (if A then response 1, ir B then response 2). This correlates to the 2 fault responses in the monitor table, where the responses can be identical or CEU unique (CEU_AonBoff or CEU_AoffBon). Existing Link: L3-SFS-978: Spacecraft FSW FP monitors and responses shall be individually enabled and disabled via command. Suggested traces L3-SFS-887: The Flight System shall have Fault Containment Regions (FCR) around each of the following flight system sections: [HW] CEU, ACE, ACE peripherals (reaction wheel, gyro, thruster, sun sensor, SADE/SADA) , SDST, PDU/HVEA, EngCntrl, EngCntrl peripherals (PPU, thruster, gimbal assembly, XFA), and Instruments (FC, VIR, GRaND) - [SW] flight system processors L3-SFS-2580: A FCR is a region (component or specific zone) of the Flight System defined for the purpose of fault analysis to ensure redundancy and cross strapping are applied in a way that allow the SFT requirements to be met.",5/19/05ProjectA - TIM - 1590,Incorrect and Incomplete tracing of L4-SRUP-243,3,"L4-SRUP-243 is incorrectly linked to L3-SFS-698. L4-SRUP-243 states "" Fault monitor evaluation - shall have up to 6 fault detection flag identifiers (numeric or variable name), logic condition (and/or), and 2 fault response identifiers (numeric) per monitor which are table parameters."" L3-SFS-698 : The Flight Software shall have the ability to detect and report invalid opcodes and out of range errors for commands. The following L3 requirements appear to trace to this requirement: L3-SFS-889, L3-SFS-891, L3-SFS-977",5/19/05ProjectA - TIM - 1589,Incorrect and Incomplete tracing of L4-SRUP-242,3,"L4-SRUP-242 is incorrectly linked to L3-SFS-749. The remaining trace to L3-SFS-694 is valid. L4-SRUP-242: Telemetry monitor evaluation - shall have up to 4 telemetry identifiers (numeric or variable name), 4 conditional values (0/1), 1 persistence value (cycles), per check which are table parameters. L3-SFS-749 : The Flight Software shall support data collection and/or storage and transmission of all subsystem and science instrument telemetry. Additional traces have been identified: L3-SFS-889, L3-SFS-890, and L3-SFS-979.",5/19/05ProjectA - TIM - 1588,Incorrect tracing of L4-SRUP-240,3,"Requirement L4-SRUP-240 is incorrectly traced to L3-SFS-698. This L3 trace does not relate to this L4 requirement and should be deleted. L4-SRUP-240: The Uplink FSW shall include telemetry monitor evaluation, fault monitor evaluation, and fault response functions. L3-SFS-698: The Flight Software shall have the ability to detect and report invalid opcodes and out of range errors for commands.",5/19/05ProjectA - TIM - 1587,Incorrect and incomplete tracing of L4-SRUP-131,3,"Existing links to L4-SRUP-131 are incorrect. The requirement states:""The Uplink FSW shall disable the processing of HLP commands from the OBC by default (on bootup.)"" The existing links are as follows: L3-SFS-767: The Flight Software shall support Hardware Logic Pulse commands implemented in C&DH. L3-SFS-768: The Flight Software shall conform to the Command and Telemetry formats and protocols documented in the command and Telemetry Dictionary (CTD). L3-SFS-780: The Flight Software shall be able to process any command in the Command and Telemetry Dictionary. Suggest that traces to L3-SFS-761, L3-SFS-909, and L3-SFS-944 are more applicable traces for L4-SRUP-131.",5/19/05ProjectA - TIM - 1586,Incorrect tracing of L4-SRUP-263 and 264 to L3-SFS-974,3,"L3-SFS-974 is incorrectly traced to the Uplink SRS requirements L4-SRUP-263 and L4-SRUP-264. The cited Uplink requirements are sufficiently traced to other L3 requirements. L3-SFS-974: The Spacecraft FSW shall be designed to accommodate processor resets during mission-critical events, such as launch and solar array deployments. L4-SRUP-263: The Uplink FSW telemetry monitors (individual or all) shall be reset to their default states by command (enabled, persistence reset, flag cleared). L4-SRUP-264: The Uplink FSW fault monitors (individual or all) shall be reset to their default states by command (enabled, tier status reset).",5/19/05ProjectA - TIM - 1585,L3-SFS-976 not fully satisfied by existing L4 Requirement Links,3,"L3-SFS-976 is not fully satified by the existing L4 requirements links. Additional links to the Uplink SRS requirements are needed to satisfy L3-SFS-976. The following Uplink requirements appear to trace to L3-SFS-976: L4-SRUP-251, L4-SRUP-252, L4-SRUP-253, and L4-SRUP-254. L3-SFS-976: Spacecraft FSW FP monitor enable defaults, threshold trigger values, persistence and responses shall be run-time modifiable by in-flight commands, table or parameter uploads. L4-SRUP-251 : Persistence counter - number of contiguous cycles at current evaluation state. L4-SRUP-252 : Highest number of contiguous out-of-limit cycles. L4-SRUP-253 : Total limit out-of-limit cycles. L4-SRUP-254: Fail flag status - set if check fails for persistnece, clear by command.",5/19/05ProjectA - TIM - 1584,L3-SFS-889 not fully satisfied by existing L4 Requirement Links,3,"L3-SFS-889 is missing traces to several Uplink SRS requirements. Additional links to the Uplink SRS requirements are needed to satisfy L3-SFS-889. The following Uplink requirements appear to trace to L3-SFS-889: L4-SRUP-265, L4-SRUP-267, L4-SRUP-268, and L4-SRUP-269 L3-SFS-889: Spacecraft FP shall detect system-level anomalies, based on predetermined performance thresholds, and take autonomous corrective action when necessary to keep the Spacecraft in a power-positive, thermally safe, commandable state. L4-SRUP-265 : The Uplink FSW shall check for faults and evaluate monitors in a repeatable, time synchronous manner. L4-SRUP-267 : Evaluation at 1 Hz (if evaluation is enabled). L4-SRUP-268 All (enabled) telemetry monitors evaluated. L4-SRUP-269 : All (enabled) fault monitors evaluated until a fault is detected and a response is initiated.",5/19/05ProjectA - TIM - 1583,"L4-SRUP-129 incorrectly traced to L3-SFS-767, L3-SFS-768, and L3-SFS-780",3,L4-SRUP-129 contains extraneous traces. L4-SVUP-129 does not appear to be applicable to the three L3 SCFSRD requirements for which it is linked. L4-SVUP-129 states: The Uplink FSW shall maintain a count of rejected HSS1 messages. Existing traces are to: L3-SFS-767: The Flight Software shall support Hardware Logic Pulse commands implemented in C&DH L3-SFS-768: The Flight Software shall conform to the Command and Telemetry formats and protocols documented in the command and Telemetry Dictionary (CTD). L3-SFS-780: The Flight Software shall be able to process any command in the Command and Telemetry Dictionary,5/18/05ProjectA - TIM - 1582,"L4-SRUP-126 incorrectly traced to L3-SFS-761, L3-SFS-777, L3-SFS-891, and L3-SFS-892",4,"L4-SRUP-126 contains extraneous traces. L4-SRUP-126 : The Uplink FSW HSS1 messages shall consist of HLP commands, PCC commands, VCDU requests, GSC command requests and Loopback requests. The links to L3-SFS-761, 777, 891, and 892 are invalid and should be deleted. L3-SFS-761: The Flight Software shall include system startup procedures that contain default control capabilities sufficient to place the flight software into a safe and deterministic system configuration without any ground intervention following power-up or reset. L3-SFS-777: The Flight Software shall have the capability to receive and install configuration files and tables to respond to changes in spacecraft and instrument hardware and operations. L3-SFS-891: The Flight System FP design shall include hardware and low level flight software monitors such as watchdog timers, fault indicators (e.g., self diagnostics, error logging), error detection and correction systems, etc. for critical component processors. L3-SFS-892: The Spacecraft FP design shall implement autonomous fail over of CEU control in the event of a non-recoverable fault signature.",5/18/05ProjectA - TIM - 1581,Incorrect tracing of L4-SRUP-121 and L4-SRUP-122,3,Existing traces from L4-SRUP-121 and L4-SRUP-122 to L3-SFS-790 and L3-SFS-789 are not valid. L4-SRUP-121: The Uplink FSW shall maintain a count of all received GSC commands. L4-SRUP-122: The Uplink FSW shall maintain a count of all rejected GSC commands. Current incorrect traces are: L3-SFS-790: The Flight Software shall reject the uplink command if an error is detected. and L3-SFS-789: The Flight Software shall support verification of each uplink segment and packet parameters received from the ground. REmaining adequate trace: L3-SFS-747: The Flight Software shall provide command accept and reject counters for subsystem tasks and interfaces.,5/18/05ProjectA - TIM - 1579,Incomplete tracing of L3-SFS-662,3,"L3-SFS-662 currently contains no links, however it can and should be traced to other L3 FSW requirements, which are in turn linked to the L4 software requirements. For starters, L3-SFS-845 can be traced to L3-SFS-662. L3-SFS-845 is linked to L4 software requirements. L3-SFS-662 The C&DH subsystem shall provide a 1 pps synchronization signal to subsystems and components that need to be synchronized with the spacecraft, otherwise the spacecraft shall provide the spacecraft clock with an uncertaintly of 5 msec or less (3-sigma). L3-SFS-845: The Flight Software shall support time synchronization of software events used for time-tagging telemetry data. The spacecraft clock shall be the Flight System time reference.",5/18/05ProjectA - TIM - 1578,Incomplete tracing to/from L3-SFS-2311,3,"L3-SFS-2311 currently contains no links, however it can and should be traced to other L3 subsystem requirements, which are in turn linked to the L4 software requirements. For starters, L3-SFS-768, L3-SFS-780, and L3-SFS-788 can be traced to L3-SFS-2311. L3-SFS-2311: The Spacecraft shall recognize all commands defined in the Command and Telemetry Dictionary L3-SFS-768: The Flight Software shall conform to the Command and Telemetry formats and protocols documented in the command and Telemetry Dictionary (CTD). L3-SFS-780: The Flight Software shall be able to process any command in the Command and Telemetry Dictionary L3-SFS-788: The Flight Software shall accept and process uplink command segment data from the ground per the format described in the FGICD and Command & Telemetry Dictionary.",5/18/05ProjectA - TIM - 1577,Extraneous traces to L3-SFS-2258,4,"L3-SFS-2258 is a spacecraft level requirement and contains extraneous traces to the Uplink SRS requirements. Links to Uplink L4-SRUP-150 and L4-SRUP-151 are redundant because L3-SFS-790 is traced to L3-SFS-2258, which also has links to those requirements plus many more. L3-SFS-2258 is sufficiently covered by the traced requirements, L3-SFS-2263 and L3-SFS-790. L3-SFS-2258: The Spacecraft shall reject a uplinked command if an error is detected. Existing traced requirements: L4-SRUP-150 : The Uplink FSW shall maintain a count of rejected SCSA messages. L4-SRUP-151 : The Uplink FSW shall maintain an error status describing the reason for the rejection of the last rejected SCSA message. L3-SFS-790 The Flight Software shall reject the uplink command if an error is detected. L3-SFS-2263 The C&DH shall reject a CLTU if an error is detected during receipt.",5/18/05ProjectA - TIM - 1576,Incorrect traces to L3-SFS-770,3,"L3-SFS-770 is an introduction or modifier to the subsequent 5 requirements (L3-SFS-771 through L3-SFS 775). L3-SFS-770 states: ""The Flight Software shall allow ground operators to disable the following autonomous capabilities:"". The L4 requirement traces cited for L3-SFS-770 do not appear to be applicable to the the functionality described in L3-SFS-770. The existing traces: L4-SRUP-206 The protocol shall facilitate the transfer of commands, status messages, and fault log entries between the uplink cards. L4-SRUP-208 The Uplink FSW shall send and receive the Uplink status message at a rate of 1 Hz. L4-SRUP-209 The Uplink FSW shall be able to send and receive fault log entries are a maximum rate of 1 Hz. L4-SRUP-240 The Uplink FSW shall include telemetry monitor evaluation, fault monitor evaluation, and fault response functions. L4-SRUP-242 Telemetry monitor evaluation - shall have up to 4 telemetry identifiers (numeric or variable name), 4 conditional values (0/1), 1 persistence value (cycles), per check which are table parameters. L4-SRUP-243 Fault monitor evaluation - shall have up to 6 fault detection flag identifiers (numeric or variable name), logic condition (and/or), and 2 fault response identifiers (numeric) per monitor which are table parameters. L4-SRUP-244 Fault responses - shall be modifiable via table load (re-load an entire response) and be a fixed size of 600d bytes, 300d 16-bit words.",5/18/05ProjectA - TIM - 1575,"EngCntrl v1.0: DEBUG Variable ""uart_tx"" No Longer Used",5,"The variable ""uart_tx"" was previously used in SH_DEFINE.H to support debugging. Usage of this variable in version 1.0 of the EngCntrl code has been commented out; however, the variable is still defined by line #34 of the file, ""SH_EngCntrl.H"". FlexeLint Message: Message #768: global struct member 'uart_tx' (line 34, file SH_EngCntrl.H) not referenced Message ID #768 Description: A member (name provided as symbol) of A struct or union appeared in a non-library header file but was not used in any module comprising the program. This message is suppressed for unit checkout. Since struct's may be replicated in storage, finding an unused member can pay handsome storage dividends. However, many structures merely reflect an agreed upon convention for accessing storage and for any one program many members are unused. In this case, receiving this message can be a nuisance. One convenient way to avoid unwanted messages (other than the usual -e and -esym) is to always place such structures in library header files. Alternatively, you can place the struct within a ++flb ... --flb sandwich to force it to be considered library. Referenced Source Code: File - SH_DEFINE.H: 23: * Temporary debug macros for writing to UART TX. 24: * 25: * #define DEBUG_TX1(b) { while (processor_regs->uart_tx & 0x300); processor_regs->uart_tx = (b); } File - SH_EngCntrl.H: 34: WORD uart_tx; // 60010",5/16/05ProjectA - TIM - 1574,EngCntrl v1.0: Switch Statement with Missing Default in OP_PROCMODE.C,4,"OP_PROCMODE.C lines 667-676 contains a switch statement with no 'default'. FlexeLint Message: Message #744: switch statement has no default Message ID #744 Description: A switch statement has no section labeled default:. Was this an oversight? It is standard practice in many programming groups to always have a default: case. This can lead to better (and earlier) error detection. One way to suppress this message is by introducing a vacuous default: break; statement. If you think this adds too much overhead to your program, think again. In all cases tested so far, the introduction of this statement added absolutely nothing to the overall length of code. If you accompany the vacuous statement with a suitable comment, your code will at least be more readable. This message is not given if the control expression is an enumerated type. In this case, all enumerated constants are expected to be represented by case statements, else 787 will be issued. Referenced Source code: File - OP_PROCMODE.C: 667: switch (process_thruster()) 668: { 669: case THRUST_IDLE: 670: mode_change = STANDBY_MODE; 671: break; 672: case THRUST_SAFE: 673: safe_mode = SAFE_START; 674: mode_change = SAFE_MODE; 675: break; 676: }",5/16/05ProjectA - TIM - 1573,"EngCntrl v1.0: Possible Range Checking Missing for Structure Elements ""xfs_control.max_plenum_high"" and ""xfs_control.max_plenum_low""",4,"The structure elements ""xfs_control.max_plenum_high"" and ""xfs_control.max_plenum_low"" are initialized to 55 by lines 217-218 of the file, ""SH_DATABASE.H"". The comments on these lines incorrectly refer to these variables as type ""WORD"" or 'unsigned int', since SH_SYSTEM.H defines the variables as type ""INTEGER"" or 'int'. According to the EngCntrl/Spacecraft ICD, these variables are updateable parameters of the command, XRTDBASE. After the command is read from the 1553 buffer, the parameters are passed to the function, ""set_run_time_parameters"", as an unsigned integer pointer (array) named ""parameter"". If the parameters being updated correspond to the max plenum high or max plenum low, then they are assigned the value of ""parameter[2]"". The sign mismatch is most likely not a problem, since the values assigned to these variables are unlikely to exceed 15 bits. However, there appears to be no range checking performed by the EngCntrl FSW to ensure that when these parameters are passed by the XRTDBASE command that they are within an acceptable range. Referenced Source Code: File - OP_RT_DBASE.C 36: INTEGER set_run_time_parameters( WORD * parameter ) …. 116: case 11: // RT-DBASE: VOL W set-max-plenum-high 117: { 118: xfs_control.max_plenum_high = parameter[2]; 119: } 120: break; 121: 122: case 12: // RT-DBASE: VOL W set-max-plenum-low 123: { 124: xfs_control.max_plenum_low = parameter[2]; 125: } 126: break; File - OP_RUN_XFS.C: 415: plenum_error_1 = (INTEGER) xfs_control.main_pa_measured 416: - (INTEGER) xfs_control.main_pa_required; 417: 418: plenum_error_2 = (INTEGER) xfs_control.main_pa_required 419: - (INTEGER) xfs_control.main_pa_measured; 420: 421: /*********************************/ 422: /* Check for plenum errors */ 423: /*********************************/ 424: 425: if ( (plenum_error_1 >= xfs_control.max_plenum_high) 426: || (plenum_error_2 >= xfs_control.max_plenum_low) ) 427: { 428: xfs_control.main_leak_counter++; 429: } 430: else 431: { 432: xfs_control.main_leak_counter = 0; 433: } File - OP_XFS_DATA.C: 90: /***************************************************/ 91: /* Compute the average plenum pressures */ 92: /***************************************************/ 93: 94: xfs_control.main_pa_measured = vote_transducers( pa1, pa2, pa3 ); 95: if ((INTEGER)xfs_control.main_pa_measured < 0 ) xfs_control.main_pa_measured = 0; 96: if ((INTEGER)xfs_control.main_pa_measured > 4095) xfs_control.main_pa_measured = 4095; File - SH_PROC_CMD.C: 1125: // XRTDBASE 1126: // 1127: // w0 = opcode 1128: // w1 = param # 1129: // w2 = data (MSW) 1130: // w3 = data (LSW) 1131: // w4 = checksum 1132: 1133: case OPCODE_XRTDBASE: 1134: { 1135: BRK_IF_BAD_CMD_LEN_OR_CKSM( 4 ); 1136: command_OK = set_run_time_parameters( command ); 1137: } 1138: break; File – SH_SYSTEM.H: 262: typedef struct 263: { …. 266: WORD main_pa_measured; 267: WORD main_pa_required; 268: WORD main_pa_desired; …. 290: INTEGER max_plenum_high; 291: INTEGER max_plenum_low; 292: WORD max_plenum_errors; … 297: } 298: XFS_CONTROL_TYPE; File - SH_DATABASE.H: 189: XFS_CONTROL_TYPE xfs_control = 190: { …. 193: 0, /* WORD main_pa_measured; */ 194: 0, /* WORD main_pa_required; */ 195: 0, /* WORD main_pa_desired; */ …. 217: 55, /* WORD max_plenum_high; */ 218: 55, /* WORD max_plenum_low; */ 219: 10, /* WORD max_plenum_errors; */ …. 224: }; Referenced Document: From EngCntrl/Spacecraft ICD: Section 5.3.1.4.8.1 Command Description - The XRTDBASE command shall modify run-time parameters in the EngCntrl Operational Software database. Table 5-51 - XRTDBASE Parameters: ------------------------------------------------------------------- Parameter Code Size Volatile Units ------------------------------------------------------------------- XFS Single Plenum Trip Point (High) 11 Word Yes PSI XFS Single Plenum Trip Point (Low) 12 Word Yes PSI -------------------------------------------------------------------",5/16/05ProjectA - TIM - 1571,C&DH Traceability Analysis: Incomplete tracing of L4-SROBC-118,3,"Per ProjectA-TIM-1558 IV&V recommended deleting the existing traces from L3-SFS-697 to L4-SROBC-114 through L4-SROBC-119. As a result of removing the traces, L4-SROBC-118 will have no associated L3 parent requirement. L3-SFS-697: The Flight Software shall allow on-orbit modifications to operational heater set points by table commands. L4-SROBC-118: Flight Software shall reflect the violation in housekeeping telemetry.",5/12/05ProjectA - TIM - 1570,"EngCntrl Software Test 20, Grid Clear Mode Fault Test, Does Not Fully Verify the Linked DD-310 and EngCntrl SRS Requirements",3,"The EngCntrl test script fsw_test_20 incorporates numerous other test files using the “start” command. The result is a test script that is dozens of pages in length. Other than linking the DD-310 and EngCntrl SRS requirements to fsw_test_20, there is no further assignment of requirements to “test points” within the script. Together, these characteristics make it difficult to determine where in the script a particular linked requirement is verified. The results of IV&V analysis indicates that not all the linked EngCntrl SRS requirements are verified by fsw_test_20. IV&V notes that the SRS requirements are linked to only this test, while many of the DD-310 requirements are also linked to other EngCntrl tests. Given this, it may be the case that the other linked tests completely verify a DD-310 requirement where there is an assessment (in this TIM) that Test 20 has not adequately addressed it. The attachment to this TIM identifies those requirements that IV&V considers to be: (1) Not verified by the script as indicated by a “Sub-Issue number” and (2) Potentially not verified by the script as indicated by a “Comment”. As for item 2, IV&V does not have sufficient resources or time to fully determine if the requirement in question has/has not been fully verified by the script (due to the script characteristics mentioned above).",5/11/05ProjectA - TIM - 1569,"EngCntrl Software Test 23, Cathode Conditioning Mode Fault Test, Does Not Fully Verify the Linked DD-310 and EngCntrl SRS Requirements",3,"The EngCntrl test script fsw_test_23 incorporates numerous other test files using the “start” command. The result is a test script that is dozens of pages in length. Other than linking the DD-310 and EngCntrl SRS requirements to fsw_test_23, there is no further assignment of requirements to “test points” within the script. Together, these characteristics make it difficult to determine where in the script a particular linked requirement is verified. The results of IV&V analysis indicates that not all the linked EngCntrl SRS requirements are verified by fsw_test_23. IV&V notes that the SRS requirements are linked to only this test, while many of the DD-310 requirements are also linked to other EngCntrl tests. Given this, it may be the case that the other linked tests completely verify a DD-310 requirement where there is an assessment (in this TIM) that Test 23 has not adequately addressed it. The attachment to this TIM identifies those requirements that IV&V considers to be: (1) Not verified by the script as indicated by a “Sub-Issue number” and (2) Potentially not verified by the script as indicated by a “Comment”. As for item 2, IV&V does not have sufficient resources or time to fully determine if the requirement in question has/has not been fully verified by the script (due to the script characteristics mentioned above).",5/10/05ProjectA - TIM - 1568,Incomplete tracing of Uplink Reprogramming Related Requirements to the SC&FSRD,3,"The following Uplink SRS L4 requirements appear to support the S/C capability to reprogram and / or upload of FSW changes or patches. L4-SRUP-39 which specifies sending the command ""Sub-Function: Modify Computer Control Word (CCW) - non-zero mask and value."" L4-SRUP-40 specifies sending the command ""Sub-Function: Load Operand Memory - non-zero address and data."" L4-SRUP-63 specifies sending the command ""PCC HLP Function: Set ACE EEPROM Write Control Bit"" L4-SRUP-64 specifies sending the command ""PCC HLP Function: Reset ACE EEPROM Write Control Bit"" L4-SRUP-70 states ""PCC HLP Function: UL Operand EEPROM Write Enable"" L4-SRUP-74 states ""PCC HLP Function: OBC Memory EEPROM Write Enable"" L4-SRUP-93 states ""PCC HLP Function: UL Operand EEPROM Write Disable"" L4-SRUP-97 states "" PCC HLP Function: OBC Memory EEPROM Write Disable"" L4-SRUP-101 states "" The Uplink FSW shall process the ""Memory Load"" fields in a Standard PCC command if the ""load address"" falls within the ranges of 0x101-0xFFF and 0xA000-0xFFFF."" L4-SRUP-116 states "" Function Code 6B - Action: Load the specified dataset into the specified location in memory."" The following L3 requirements also define functionality for supporting the FSW Load and Patch; however there are no traceability links between the above mentioned L4 requirements and these 3 L3 SC&FSRD requirements: L3-SFS-756 - Flight Software shall support FSW Load and Patch on powered but non controlling components in a normal operational configuration. Specifically for the flight software: OBC, ACE, Uplink Card, and EngCntrl. L3-SFS-757 - The Flight Software shall support the reprogramming of the EEPROMS within the OBC, ACE, Uplink Card, EngCntrl, instruments and other flight systems components as required. L3-SFS-791 - The Flight Computer (OBC) Flight Software shall be designed to allow upload for flight software changes, sequence changes, and parameter changes.",5/10/05ProjectA - TIM - 1567,Incomplete tracing of L4-SRUP-19,3,"L4-SRUP-19 is insufficiently traced to the Level 3 requirements. L4-SRUP-19 states ""The Uplink FSW shall validate the checksum of commands received from the ground."" L3-SFS-987 states ""The Spacecraft shall reject all invalid commands, and shall terminate any sequence that issues an invalid command. Definition: An invalid command is defined as being a command checksum failure, other aspects will be covered by the ground system."" There is currently no link between these requirements.",5/10/05ProjectA - TIM - 1566,Incomplete tracing of L4-SRUP-17,3,"L4-SRUP-17 is insufficiently traced to the Level 3 requirements. L4-SRUP-17 states ""The Uplink FSW shall reject commands that are not CCSDS compliant."" L3-SFS-790 states ""The Flight Software shall reject the uplink command if an error is detected."" There is currently no link between these requirements.",5/10/05ProjectA - TIM - 1565,Incomplete tracing of L4-SRUP-16,3,"L4-SRUP-16 is insufficiently traced to the Level 3 requirements. L4-SRUP-16 states ""The Uplink FSW shall verify the primary header of all commands for CCSDS compliance."" L3-SFS-789 states ""The Flight Software shall support verification of each uplink segment and packet parameters received from the ground."" There is currently no link between these requirements.",5/10/05ProjectA - TIM - 1564,Extraneous trace between L4-SRUP-9 and L3-SFS-747,4,L4-SRUP-9 is extraneously traced to L3-SFS-747. L3-SFS-747 refers to an error counter whereas L4-SRUP-9 refers to the status/reason for the rejection. L4-SRUP-9: The Uplink FSW shall maintain an error status describing the reason for the rejection of the last rejected transfer frame. L3-SFS-747: The Flight Software shall provide command accept and reject counters for subsystem tasks and interfaces.,5/10/05ProjectA - TIM - 1563,L4-SRUP-8 incorrectly traced to L3-SFS-768 and L3-SFS-788,4,"L4-SRUP-8 contains extraneous traces. L4-SRUP-8 states ""The Uplink FSW shall maintain a count of rejected transfer frames."" The links to L3-SFS-768 and 788 should be deleted. L3-SFS-768 states ""The Flight Software shall conform to the Command and Telemetry formats and protocols documented in the command and Telemetry Dictionary (CTD)."" L3-SFS-788 states ""The Flight Software shall accept and process uplink command segment data from the ground per the format described in the FGICD and Command & Telemetry Dictionary.""",5/10/05ProjectA - TIM - 1561,L3-SFS-195 not satisfied by L4-SRUP-153,3,"L3-SFS-195 appears to define requirements for both hardware and software. The software aspects of L3-SFS-195 do not appear to be satisfied by the 1 trace to L4-SRUP-153. There appear to be other Uplink and OBC CDH requirements related to this L3 requirement. See the recommendations for examples of additional traces that should be created. L3-SFS-195 states ""The Spacecraft System shall be able to transmit data at a downlink rate of at least 41250.46 bps, at an Earth distance of at least 4.0 AU. "" L4-SRUP-153 states ""The Uplink FSW shall transmit Downlink commands to the Downlink card at the maximum rate of one command per second in the order that they are received from the ground.""",5/10/05ProjectA - TIM - 1560,L3-SFS-194 not satisfied by L4-SRUP-153,3,"L3-SFS-194 appears to define requirements for both hardware and software. The software aspects of L3-SFS-194 do not appear to be satisfied by the 1 trace to L4-SRUP-153. There appear to be other Uplink and OBC CDH requirements related to this L3 requirement. See the recommendations for examples of additional traces that should be created. L3-SFS-194 states ""The Spacecraft System shall be able to transmit data at a downlink rate of at least 61875.69kbps, at an Earth distance of at least 3.5 AU."" L4-SRUP-153 states ""The Uplink FSW shall transmit Downlink commands to the Downlink card at the maximum rate of one command per second in the order that they are received from the ground.""",5/10/05ProjectA - TIM - 1559,C&DH Traceability Analysis: L3-SFS-699 not satisfied by L4-SROBC-29,3,"L3-SFS-699 does not appear to be satisfied by the 1 C&DH requirement (L4-SROBC-29). L3-SFS-699 states: ""The Flight Software subsystem shall monitor, control and report on mode transition events."" L4-SROBC-29 deals with determining whether a processor mode transition was due to POWER_ON or External Hardware Reset command. There is no mention of controlling or reporting on mode transition events. L3-SFS-699: The Flight Software subsystem shall monitor, control and report on mode transition events. L4-SROBC-29: Flight Software shall determine whether a processor mode transition was due to POWER_ON or External Hardware Reset command.",5/9/05ProjectA - TIM - 1557,C&DH Traceability Analysis: L3-SFS-694 not satisfied by the existing L4 requirements traces,3,"L3-SFS-694 does not appear to be satisfied by the all of the traced C&DH requirements listed below. L3-SFS-694 states:""The Flight Software shall support flight software subsystem requirements, including processing commands and telemetry, storing and transmitting data, and maintaining flight software health."" None of the existing traced C&DH L4 requirements discuss maintaining the flight software health. L3-SFS-694: The Flight Software shall support flight software subsystem requirements, including processing commands and telemetry, storing and transmitting data, and maintaining flight software health. L4-SROBC-318: The OBC flight software shall provide a command to Reset Counters that resets telemetered command and error counters and data. L4-SROBC-301: Flight Software shall provide a command to restart the scrubbing of DRAM which will cause MS to start scrubbing from the first DRAM segment, and reset its housekeeping telemetry associated with DRAM scrubbing. L4-SROBC-298: Flight Software shall report DRAM and SRAM Memory errors through housekeeping telemetry. L4-SROBC-297: The DRAM memory checks shall be capable of detecting multiple errors in the DRAM. L4-SROBC-296: Flight Software shall provide background memory scrubbing of the triply redundant Error Detection and Correction (EDAC) DRAM on the memory card. L4-SROBC-295: Flight Software shall provide background memory scrubbing of the SRAM in the Flight Computer L4-SROBC-293: The Flight Software shall accept and execute commands to change the OBC state. L4-SROBC-262: Flight Software shall provide a mechanism to limit repetitive event messages generated. L4-SROBC-256: Flight Software shall support at least 256 telemetry monitor points. L4-SROBC-255: Valid spacecraft housekeeping and instrument housekeeping CCSDS telemetry packets acquired or constructed by the Flight Software telemetry acquisition function shall be made available to the telemetry monitoring function. L4-SROBC-125: Flight Software shall reset SC counters upon receipt of Reset Counters command. L4-SROBC-124: Flight Software shall enable or disable the execution of the requested RTS upon receipt of the real-time commands ENABLE_RTS or DISABLE_RTS from either the ground or another on-board software application. L4-SROBC-123: Flight Software shall stop execution of the requested RTS upon receipt of the real-time command STOP_RTS from either the ground or another on-board software application. L4-SROBC-122: Flight Software shall execute up to 12 commands per second. L4-SROBC-121: An RTS shall be DISABLED immediately after it has been loaded. L4-SROBC-110: Flight Software shall provide a Relative Time Sequence (RTS) stored command load and execution capability to support continuous spacecraft and instrument mission operations. L4-SROBC-106: TC task shall accept and execute a Reset Counters command, which resets its command and error counters. L4-SROBC-102: Flight Software shall make available, on demand, the current spacecraft time via library functions to all flight software applications. L4-SROBC-100: Flight Software shall send the time of the next 1 Hz pulse to the Framing Camera/VIR instrument via the 1553 bus, prior to the 1553 slot allocated to this function (currently at 0 milliseconds). L4-SROBC-89: S3 task shall process a GRAND message that passes a CRC check by removing the sync codes (2 bytes) and the length field (2 bytes), and sending the CCSDS telemetry packet to the Software Bus. L4-SROBC-88: S3 task shall calculate a CRC for each GRAND message and compare it against the CRC appended to the end of the message, discarding the message if the CRC does not match and updating a bad message counter. L4-SROBC-87: S3 task shall read Gamma Ray and Neutron Detector (GRAND) telemetry, MUC GRAND TLM FIFO, with a read frequency that avoids FIFO overflow. L4-SROBC-86: S3 task shall maintain counts of those MUC Instrument failure statuses that are cleared on read. L4-SROBC-85: S3 task shall maintain Housekeeping telemetry for the MUC Instrument Interface Status, updating the telemetry after each reading of the MUC Instrument Interface Status. L4-SROBC-84: S3 task shall read MUC Instrument Interface Status in a single HSS3 data block. L4-SROBC-83: S3 task shall forward the spacecraft Time Code message it received from the Software Bus to MUC, which in turn forwards it to GRAND, based on the op-code and slave address. L4-SROBC-82: S3 task shall be able to generate and send FIFO reset commands to the MUC to reset any one of the following Gamma Ray and Neutron Detector (GRAND) FIFOs: GRAND TLM, GRAND CMD, and TEST. L4-SROBC-81: S3 task shall be able to forward any commands destined to the MUC or to the MUC instruments (via MUC) that it receives from the Software Bus. L4-SROBC-79: S3 task shall accept and execute a RESET_TLM command, which resets its housekeeping telemetry. L4-SROBC-77: S2 task shall accept and execute a RESET_TLM command, which resets its housekeeping telemetry. L4-SROBC-76: S2 task shall send downlink telemetry data to the DownLink Card. L4-SROBC-75: S2 task shall receive telemetry data from the Downlink Card as specified in the ICD. L4-SROBC-74: S2 task shall send Downlink Card commands as specified in the ICD. L4-SROBC-73: S2 task shall be able to receive a Downlink Card Loopback Register Read command from the Software Bus and send the command via the S2 serial interface to the Downlink Card. Loopback results are sent to the Software Bus using the Software Bus stream id specified in the command. L4-SROBC-72: S2 task shall not initiate Downlink Card Loopback test by itself; the loopback test command must come from the Software Bus. L4-SROBC-71: S2 task shall be able to receive a Downlink Card Loopback Register Write command from the Software Bus and send the command via the S2 serial interface to the Downlink Card. L4-SROBC-325: An enable command shall be implemented requiring each Hardware Diagnostics test to be started within .5 second of the enable command. L4-SROBC-40: The results of the Hardware Diagnostics tests conducted during nominal operations shall be inserted into the designated portion of telemetry streams. L4-SROBC-39: The results of Hardware Diagnostics tests conducted during start-up shall be stored in fixed memory locations that will not be modified by processor resets. L4-SROBC-38: Flight Software hardware diagnostics shall accept commands to activate background or foreground hardware testing. L4-SROBC-37: Flight Software shall include commandable, background real-time hardware diagnostics for Flight Computer Input / Output Interfaces. L4-SROBC-35: All machine error interrupt services shall attempt to restore operations except in those cases where restoring operations can lead to fault conditions in which case the services will transition the task to a suspended state at a known location. L4-SROBC-34: All machine error interrupt services shall leave the processor in a known repeatable state. No service routine will be designed to skip command execution. L4-SROBC-33: Unless physically unavoidable, errors detected during startup processes shall not cause the restart processes to terminate before reaching their commanded termination location. L4-SROBC-32: If sufficient RAD-6000 and LIO processing resources are operable, restart operations shall progress to completion in SuROM Diagnostic (Monitor) Mode or Normal Mode. L4-SROBC-31: The Flight Software exception log shall fill each entry until it reaches the last entry (23); all subsequent entries overwrite the last location (23). L4-SROBC-30: Flight Software shall store RAD-6000 processor exception data in a log. L4-SROBC-29: Flight Software shall determine whether a processor mode transition was due to POWER_ON or External Hardware Reset command. L4-SROBC-28: Floating-Point Exception Intrpt Currently Masked? L4-SROBC-27: Supervisor Call Interrupt Restart as Cold Boot L4-SROBC-26: Floating-Point Unavailable Intrpt Suspend Offending Task L4-SROBC-25: Program Interrupt Suspend Offending Task L4-SROBC-24: Alignment Interrupt Suspend Offending Task L4-SROBC-23: External Interrupt INTERRUPT SERVICE L4-SROBC-22: Instruction Storage Interrupt Suspend Offending Task L4-SROBC-21: Data Storage Interrupt Suspend Offending Task L4-SROBC-20: Machine Check Interrupt Suspend Offending Task L4-SROBC-19: System Reset Interrupt COLD_RESTART L4-SROBC-18: Flight Software shall trap processor interrupts, make an Exception Log entry, and respond according to the following Exception/Required Action Tables: L4-SRUP-316: Upon initialization, the Uplink FSW shall read the RT address and set an identifier as 'A' if the address is 27 and 'B' if the address is 28. L4-SRUP-314: Flight Software shall accept and execute a RESET_TABLE_OPERATIONS command that terminates the current table load/edit session without affecting the onboard versions of the currently selected table, regardless of whether a table has been selected. L4-SRUP-313: Flight Software shall retain telemetry pertaining to a table commit command until another table select command or reset table operations command has been issued. L4-SRUP-312: The execution of a table commit operation shall disable subsequent commit operation to that table until the table is again selected. L4-SRUP-311: Flight Software shall reject a Table Commit command if a table load/edit session has not been initiated or dump-only is in effect. L4-SRUP-310: If the specified Checksum and the on-board Checksum are not equal, the Flight Software shall reject the new or edited table loads, increment an error counter, generate a significant event message, calculate a CRC for each 4K-bytes of the load, and transmit the CRCs in telemetry for ground analysis. L4-SRUP-309: If the specified Checksum and the on-board Checksum are equal, Flight Software shall immediately make the new or edited versions of the table available for use (COMMIT). L4-SRUP-307: Flight Software shall accept and execute a COMMIT_TABLE command that immediately makes the new or edited version of the table available for use. L4-SRUP-308: Flight Software shall accept and execute a COMMIT_TABLE_WITH_CHECKSUM command that compares the on-board Checksum with the expected Checksum specified in the command and performs the following based on the comparison results: L4-SRUP-306: Flight Software shall initialize and maintain a SESSION_WORD_COUNT for the total number of words loaded for the currently selected table. L4-SRUP-305: Flight Software shall initialize and maintain an 8-bit EXCLUSIVE-OR checksum for the currently selected table. L4-SRUP-304: Flight Software shall maintain running calculations of essential variables (i.e., checksum) to be used for verification of a good table load prior to table use. L4-SRUP-303: Flight Software shall accept and execute an Abort Table Dump command. L4-SRUP-302: Flight Software shall reject a Table Dump command if a table load/edit session has not been initiated, a dump is already active, or the specified dump range extends beyond the size of the table. L4-SRUP-301: Flight Software shall accept and execute a DUMP_TABLE command, specifying an offset into the table to start dumping, the number of words to dump from the offset, and the number of copies to dump. L4-SRUP-300: Flight Software shall reject any Table Load command that is issued when a table load/edit session has not been initiated or when a dump-only state has been specified, or that specifies loading data beyond the size of the table. L4-SRUP-299: Flight Software shall accept and execute a LOAD_TABLE command to load between 1 and 121 words of table data at a specified word offset from the beginning of the currently selected table. L4-SRUP-298: Flight Software shall accept and execute a SELECT_TABLE command, which initializes a table load/edit ""session"" to load or dump data for a specified table. L4-SRUP-297: Flight Software shall accept and execute a Reset Counters command that resets command and error counters. L4-SRUP-295: Flight Software shall maintain counters for error-free Table operations commands received and processed. L4-SRUP-296: Flight Software shall maintain counters for Table operations commands that were not processed due to error conditions, and generate event messages for error conditions. L4-SRUP-294: The Uplink FSW shall verify a Table Load command packet checksum and word length prior to execution. If the calculated checksum does not match the checksum within the command packet or the word length is not as expected, the command is rejected. L4-SRUP-288: Uplink RTS' shall dispatch up to 10 commands per second. L4-SRUP-287: An RTS shall be DISABLED immediately after it has been loaded. L4-SRUP-286: RTSs shall be DISABLED upon a COLD_RESTART with the exception of RTS #1 (the Start-Up RTS). L4-SRUP-285: Flight Software shall ABORT the execution of that specific RTS buffer. L4-SRUP-284: Flight Software shall reflect the violation in housekeeping telemetry L4-SRUP-283: Flight Software shall generate a significant event message that describes the violation. L4-SRUP-282: Flight Software shall discard the invalid RTS command. L4-SRUP-281: In the event an RTS command fails the validation check: L4-SRUP-280: Prior to the execution of each individual RTS command, the Flight Software shall verify the validity of the following command parameters: RTS command length, and Embedded command checksum. L4-SRUP-278: Flight Software shall execute commands within the RTS buffer (in position order) as the relative time-tag specified in the RTS command expires. L3-SFS-695: The Flight Software shall implement major functions including: attitude determination and control (ACS), command & data handling (C&DH), thermal control (TCS), and interface support (XB, HSS, SCSA) on required processors. L4-SRUP-324: The Uplink FSW shall maintain a status message containing the following parameters: L4-SRUP-325: Timestamp. L4-SRUP-326: Status RT ID. L4-SRUP-327: Active Select State. L4-SRUP-328: Uplink Command Count. L4-SRUP-329: Uplink Transmitter Select. L4-SRUP-330: Uplink CCW Boot Control. L4-SRUP-331: FP Log Entry Count. L4-SRUP-332: OBC Monitor Status. L4-SRUP-333: OBC WDT Status. L4-SRUP-334: Uplink Reset Count. L4-SRUP-335: Command Timeout. L4-SRUP-336: 1553 Status. L4-SRUP-205: The Uplink FSW shall support a 19.2 Kbps serial interface used for communication with the redundant Uplink Card. L4-SRUP-206: The protocol shall facilitate the transfer of commands, status messages, and fault log entries between the uplink cards. L4-SRUP-207: The Uplink FSW shall be able to send and receive commands at a maximum rate of 1 Hz. L4-SRUP-208: The Uplink FSW shall send and receive the Uplink status message at a rate of 1 Hz. L4-SRUP-209: The Uplink FSW shall be able to send and receive fault log entries are a maximum rate of 1 Hz. L4-SRUP-210: The serial interface shall be full duplex with parity check. L4-SRUP-211: The serial data protocol shall minimize the loss of data during transfer. L4-SRUP-218: Uplink fault protection events shall be compatible with those generated by the OBC. L4-SRUP-221: The mate fault log shall function in the same way as the self fault log. L4-SRUP-222: The Uplink FSW shall transfer every 10 new event messages to its mate via the UL-UL serial interface. L4-SRUP-223: The Uplink FSW shall transfer a specified number of events to its mate via the UL-UL serial interface, as follows: L4-SRUP-224: The Uplink FSW shall transfer a specified range of event messages on command. L4-SRUP-225: On command, the Uplink FSW shall dump fault log entries for either log. L4-SRUP-226: Log entries shall replace spare telemetry in the Uplink Critical VCDU. L4-SRUP-227: The Uplink FSW shall dump the specified range of event messages in telemetry on command. L4-SRUP-228: The Uplink FSW shall clear both fault logs during initialization or on command. L4-SRUP-229: The Uplink FSW shall maintain a count of entries for both fault logs in telemetry. L4-SRUP-240: The Uplink FSW shall include telemetry monitor evaluation, fault monitor evaluation, and fault response functions. L4-SRUP-242: Telemetry monitor evaluation - shall have up to 4 telemetry identifiers (numeric or variable name), 4 conditional values (0/1), 1 persistence value (cycles), per check which are table parameters. L4-SRUP-243: Fault monitor evaluation - shall have up to
6 fault detection flag identifiers (numeric or variable name), logic condition (and/or), and 2 fault response identifiers (numeric) per monitor which are table parameters. L4-SRUP-245: The Uplink FSW shall have a predetermined number of checks, monitors, and responses available for use. These are (at a minimum) 30 Telemetry Monitors, 20 Fault Monitors, and 20 Fault Responses (primary and redundant). L4-SRUP-247: The Uplink FSW monitors shall call a fault response based on the RT ID (if A then response 1, ir B then response 2). This correlates to the 2 fault responses in the monitor table, where the responses can be identical or CEU unique (CEU_AonBoff or CEU_AoffBon). L4-SRUP-248: The Uplink FSW telemetry monitor logic shall provide telemetry indicating current state and evaluation result for each monitor: L4-SRUP-249: State (enable/disable) - enabled default state, command enable/disable. L4-SRUP-250: Last check result (fail/pass) - updated every cycle based on telemetry. L4-SRUP-251: Persistence counter - number of contiguous cycles at current evaluation state. L4-SRUP-252: Highest number of contiguous out-of-limit cycles. L4-SRUP-253: Total limit out-of-limit cycles. L4-SRUP-254: ail flag status - set if check fails for persistnece, clear by command. L4-SRUP-255: The Uplink FSW fault monitor logic shall provide telemetry indicating current state and evaluation result for each monitor. L4-SRUP-256: State (enabled/disabled) - enabled default state, command enable/disable. L4-SRUP-257: Tier Status (0 to 4) - default to 0, increments when monitor fault detected and responded to up to 4, disables monitor when max tier reached (table value). L4-SRUP-258: The Uplink FSW fault response logic shall provide telemetry indicating current state and execution status for each response. L4-SRUP-259: State (enabled/disabled) - enabled default state by RT ID. L4-SRUP-260: Execution status (idle/active) - current status. L4-SRUP-265: The Uplink FSW shall check for faults and evaluate monitors in a repeatable, time synchronous manner. L4-SRUP-266 The Uplink FSW fault protection software shall execute any pending commands prior to telemetry evaluation, to ensure command responses have priority over fault detection. L4-SRUP-267: Evaluation at 1 Hz (if evaluation is enabled). L4-SRUP-268: All (enabled) telemetry monitors evaluated. L4-SRUP-269: All (enabled) fault monitors evaluated until a fault is detected and a response is initiated. L4-SRUP-270: The Uplink FSW shall evaluate its critical interfaces for faults and set flags for FP software. L4-SRUP-271: High Speed Serial 1 (HSS1) interface shall be valid while the OBC health status packet is received and the time stamp is incrementing (OBC_S1_State). L4-SRUP-272: Uplink Serial Interface shall be valid while the UL Status Message packet is being received and the time stamp is incrementing (UL_Serial_State). L4-SRUP-273: 1553 Data Bus shall be valid while the UL RT is receiving the OBC status message (time at tone), which is incrementing (RT_1553_State). L4-SRUP-274: The Uplink FSW shall set the CEU power state (OBC_Power) prior to evaluating faults and responding. L4-SRUP-317: The Uplink FSW shall maintain the power status for critical components, which shall be the combination of two independent critical telemetry points. L4-SRUP-319: The critical component power state shall be considered off when both critical telemetry points are ""Off"" or ""0"". For any other combination, the critical component power state shall be considered on. L4-SRUP-320: The Uplink FSW shall maintain an active select state, which shall be 'self', 'mate', or 'none'. L4-SRUP-321: Upon initialization, the Uplink FSW shall read the CEU critical power status and mate status message and set the active select state accordingly (per ProjectA Fault Protection Design Note). L4-SRUP-322: The active select state shall be commandable. L4-SRUP-323: Re-initialization of the active select state shall be commandable. L4-SROBC-141: If a Virtual Recorder with OVERWRITE_DISABLED becomes full, the OBC-C&DH software shall discard newly arriving telemetry data. L4-SROBC-142: When a Virtual Recorder operating in OVERWRITE_ENABLE mode becomes full (i.e., its QUOTA becomes exhausted), the OBC-C&DH software shall overwrite data in the oldest recorded block with the newly arriving data. L4-SROBC-143: The OBC-C&DH software shall provide the capability to store data (by Application-ID) using packet Sequence Number based filtering. If X is zero, the packet will not be stored. If X is greater than zero, the packet will be stored if and only if the Sequence Number of the packet modulo X is less than N. L4-SROBC-160: The OBC-C&DH software shall accept and execute a Dump_Event_Buffer command, which starts a dump of the Event Virtual Recorder in the real time data/telemetry stream. L4-SROBC-161: The OBC-C&DH software shall accept and execute an ABORT_EVENTS_BUFFER_DUMP command, which terminates the dumping of recorded significant events and messages in the real-time data/telemetry stream. L4-SROBC-162: The OBC-C&DH software shall accept and execute a SELECT_DS_FILTER command, which selects the specified storage filter table for use in subsequent CCSDS packet filtering operations. L4-SROBC-163: The OBC-C&DH software shall accept and execute a RESET_DS_HOUSEKEEPING command, which resets housekeeping data that is normally reported in the real-time telemetry stream. L4-SROBC-164: The OBC-C&DH software shall accept and execute a pause playback command, which pauses playbacks, retransmissions, and dumps of all virtual recorders. L4-SROBC-165: The OBC-C&DH software shall accept and execute a resume playback command, which resumes playbacks, retransmissions, and dumps of all virtual recorders. L4-SROBC-166: The OBC-C&DH software shall accept and execute a JAM_FILTER factor command, which given the application id of a packet will modify the filter factors for the filter table currently in use. L4-SROBC-168: The OBC-C&DH software shall accept and execute a START_CONTINUOUS_PLAYBACK command for the requested Virtual Recorder. L4-SROBC-176: Flight Software shall maintain a ""Working Buffer"" within Software Manager that is used for temporary storage of uplinked data, and is addressable in certain commands as an offset to a virtual address base of F0000000 hexadecimal. L4-SROBC-177: Flight Software shall maintain a special command for VML memory load when the command address matches F1xxyyyy hexadecimal where xx shall be the VM file buffer number, and yyyy shall be the offset address for VM files. L4-SROBC-178: Flight Software shall implement an Enable command with time out timer and Disable command for any memory access to EEPROM, which includes memory load, memory copy, or table commands. L4-SROBC-181: Flight Software shall accept and execute a Load Memory command to load SRAM, DRAM, EEPROM, and Working Buffer Flight Computer memory locations. L4-SROBC-183: Flight Software shall accept and execute a NON_INTERRUPTABLE_LOAD_MEMORY command that disables interrupts during the load of between 1 and 6 (16-bit) words into processor SRAM. L4-SROBC-222: Flight Software shall telemeter, in a single CCSDS packet, the combined MEMORY_DWELL data contents at a rate of no faster than one packet per second. L4-SROBC-224: Flight Software shall support up to 64 distinct MEMORY_DWELL addresses. L4-SROBC-226: Flight Software shall accept and execute commands that can write to and read from any single specified memory address.",5/9/05ProjectA - TIM - 1556,C&DH Traceability Analysis: L3-SFS-650 not satisfied by L4-SROBC-11 and L4-SROBC-9,3,"L3-SFS-650 does not appear to be satisfied by the 2 C&DH requirements (L4-SROBC-11 and L4-SROBC-9). L3-SFS-650 states: ""The C&DH subsystem shall provide the capability for processor re-initialization after a processor reboot resulting from a cold or warm start."" L4-SROBC-11 and L4-SROBC-9 only discuss the capability of reinitializing from a ""COLD_RESTART"". Reinitializing from a warm start is not addressed by L4-SROBC-11 and L4-SROBC-9. L3-SFS-650: The C&DH subsystem shall provide the capability for processor re-initialization after a processor reboot resulting from a cold or warm start. L4-SROBC-11: All data shall be reinitialized from EEPROM. L4-SROBC-9: Provided processor hardware is operating nominally, Flight Software shall perform the following on a Flight Computer COLD_RESTART:",5/9/05ProjectA - TIM - 1555,C&DH Traceability Analysis: L3-SFS-408 not satisfied by L4-SROBC-251,3,"L3-SFS-408 does not appear to be satisfied by the one C&DH requirement (L4-SROBC-251). L3-SFS-408 states: ""The TCS shall provide sufficient temperature monitor points to evaluate the spacecraft thermal performance in-orbit and on the ground for maintaining safe operating temperatures within limits."" L4-SROBC-251 only discusses the capability of performing the temperature reading processing for all thermal data points at 1 Hz, but does not address the control function necessary for ""maintaining safe operating temperatures within limits"". L3-SFS-408: The TCS shall provide sufficient temperature monitor points to evaluate the spacecraft thermal performance in-orbit and on the ground for maintaining safe operating temperatures within limits. L4-SROBC-251: Thermal Control Software shall be capable of performing the temperature reading processing for all thermal data points at 1 Hz.",5/9/05ProjectA - TIM - 1553,"EngCntrl Software Test 17, XFS On Mode Fault Test, Does Not Fully Verify the Linked DD-310 and EngCntrl SRS Requirements",3,"The EngCntrl test script fsw_test_17 incorporates numerous other test files using the “start” command. The result is a test script that is dozens of pages in length. Other than linking the DD-310 and EngCntrl SRS requirements to fsw_test_17, there is no further assignment of requirements to “test points” within the script. Together, these characteristics make it difficult to determine where in the script a particular linked requirement is verified. The results of IV&V analysis indicates that not all the linked EngCntrl SRS requirements are verified by fsw_test_17. IV&V notes that the SRS requirements are linked to only this test, while many of the DD-310 requirements are also linked to other EngCntrl tests. Given this, it may be the case that the other linked tests completely verify a DD-310 requirement where there is an assessment (in this TIM) that Test 17 has not adequately addressed it. The attachment to this TIM identifies those requirements that IV&V considers to be: (1) Not verified by the script as indicated by a “Sub-Issue number” and (2) Potentially not verified by the script as indicated by a “Comment”. As for item 2, IV&V does not have sufficient resources or time to fully determine if the requirement in question has/has not been fully verified by the script (due to the script characteristics mentioned above).",5/5/05ProjectA - TIM - 1552,"EngCntrl Software Test 14, XFS Init Mode Fault Test, Does Not Fully Verify the Linked DD-310 and EngCntrl SRS Requirements",3,"The EngCntrl test script fsw_test_14 incorporates numerous other test files using the “start” command. The result is a test script that is dozens of pages in length. Other than linking the DD-310 and EngCntrl SRS requirements to fsw_test_14, there is no further assignment of requirements to “test points” within the script. Together, these characteristics make it difficult to determine where in the script a particular linked requirement is verified. The results of IV&V analysis indicates that not all the linked EngCntrl SRS requirements are verified by fsw_test_14. IV&V notes that the SRS requirements are linked to only this test, while many of the DD-310 requirements are also linked to other EngCntrl tests. Given this, it may be the case that the other linked tests completely verify a DD-310 requirement where there is an assessment (in this TIM) that Test 14 has not adequately addressed it. The attachment to this TIM identifies those requirements that IV&V considers to be: (1) Not verified by the script as indicated by a “Sub-Issue number” and (2) Potentially not verified by the script as indicated by a “Comment”. As for item 2, IV&V does not have sufficient resources or time to fully determine if the requirement in question has/has not been fully verified by the script (due to the script characteristics mentioned above).",5/5/05ProjectA - TIM - 1551,"EngCntrl Software Test 11, Nominal Standby Mode Test, Does Not Fully Verify the Linked DD-310 and EngCntrl SRS Requirements",3,"The EngCntrl test script fsw_test_11 incorporates numerous other test files using the “start” command. The result is a test script that is dozens of pages in length. Other than linking the DD-310 and EngCntrl SRS requirements to fsw_test_11, there is no further assignment of requirements to “test points” within the script. Together, these characteristics make it difficult to determine where in the script a particular linked requirement is verified. The results of IV&V analysis indicates that not all the linked EngCntrl SRS requirements are verified by fsw_test_11. IV&V notes that the SRS requirements are linked to only this test, while many of the DD-310 requirements are also linked to other EngCntrl tests. Given this, it may be the case that the other linked tests completely verify a requirement where there is an assessment (in this TIM) that Test 11 has not adequately addressed it. The attachment to this TIM identifies those requirements that IV&V considers to be: (1) Not verified by the script as indicated by a “Sub-Issue number” and (2) Potentially not verified by the script as indicated by a “Comment”. As for item 2, IV&V does not have sufficient resources or time to fully determine if the requirement in question has/has not been fully verified by the script (due to the script characteristics mentioned above).",5/4/05ProjectA - TIM - 1550,"EngCntrl Software Test 10, Safe Mode Fault Test, Does Not Fully Verify the Linked DD-310 and EngCntrl SRS Requirements",3,"The EngCntrl test script fsw_test_10 incorporates numerous other test files using the “start” command. The result is a test script that is dozens of pages in length. Other than linking the DD-310 and EngCntrl SRS requirements to fsw_test_10, there is no further assignment of requirements to “test points” within the script. Together, these characteristics make it difficult to determine where in the script a particular linked requirement is verified. The results of IV&V analysis indicates that not all the linked EngCntrl SRS requirements are verified by fsw_test_10. IV&V notes that the SRS requirements are linked to only this test, while many of the DD-310 requirements are also linked to other EngCntrl tests. Given this, it may be the case that the other linked tests completely verify a requirement where there is an assessment (in this TIM) that Test 10 has not adequately addressed it. The attachment to this TIM identifies those requirements that IV&V considers to be: (1) Not verified by the script as indicated by a “Sub-Issue number” and (2) Potentially not verified by the script as indicated by a “Comment”. As for item 2, IV&V does not have sufficient resources or time to fully determine if the requirement in question has/has not been fully verified by the script (due to the script characteristics mentioned above).",5/4/05ProjectA - TIM - 1549,"EngCntrl Software Test 9, Nominal Safe Mode Test, Does Not Fully Verify the Linked DD-310 and EngCntrl SRS Requirements",3,"The EngCntrl test script fsw_test_9 incorporates numerous other test files using the “start” command. The result is a test script that is dozens of pages in length. Other than linking the DD-310 and EngCntrl SRS requirements to fsw_test_9, there is no further assignment of requirements to “test points” within the script. Together, these characteristics make it difficult to determine where in the script a particular linked requirement is verified. The results of IV&V analysis indicates that not all the linked EngCntrl SRS requirements are verified by fsw_test_9. IV&V notes that the SRS requirements are linked to only this test, while many of the DD-310 requirements are also linked to other EngCntrl tests. Given this, it may be the case that the other linked tests completely verify a requirement where there is an assessment (in this TIM) that Test 9 has not adequately addressed it. The attachment to this TIM identifies those requirements that IV&V considers to be: (1) Not verified by the script as indicated by a “Sub-Issue number” and (2) Potentially not verified by the script as indicated by a “Comment”. As for item 2, IV&V does not have sufficient resources or time to fully determine if the requirement in question has/has not been fully verified by the script (due to the script characteristics mentioned above).",5/4/05ProjectA - TIM - 1548,Loss of Requirement Definition Fidelity in the VML SRS,2,"Table 1 in the VML SRS maps multiple SCFSRD-25870 requirements to 16 VML requirements (these requirements are also found in Section 5). The requirement fidelity found in the L3 is degraded in the linked VML children. This is primarily due to the way this SRS has allocated requirements: (1) Section 5 contains “VM Language Requirements” (also referred to as ""VM Task Interface Requirements"" in Table 1 and as ""VML Interface Requirements"" in Table 2) and (2) Table 2 contains VMLFC Internal Requirements that are not included in Section 5 and therefore are not treated as “official” VML requirements that must be verified (note: these are detailed requirements that to some degree directly relate to the SCFSRD-25870 requirements). For example, there are 31 L3 requirements mapped to VM001.1: VM001.1 – Sequence Execution Capabilities VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 12 (twelve) Virtual Machines, capable of executing on-board blocks and sequences. A subset of the 31 linked L3 requirements are: 10.6.5.0-1 The Flight Software shall support VM sequences containing of up to 4000 instructions in length. 10.6.5.0-2 The Flight Software shall provide for initiation of sequences by other sequences. 10.6.5.0-3 The Flight Software shall provide for at least 12 concurrent threads of sequence execution. 10.6.5.0-4 The Flight Software shall execute absolute-time sequence instructions within 0.1 second of the spacecraft clock, inclusive of execution of indicated absolute Flight Software clock time. This value is independent of inaccuracies in Flight Software time. 10.6.5.0-5 The Flight Software shall execute relative-time sequence instructions within 0.1 second, inclusive of the indicated time relative to the preceding instruction. This example serves to indicate how the fidelity of the parent L3 requirements are degraded/lost in tracing to the VML SRS. In addition, differences between the parent L3 and the VMLFC requirements found in Table 2 are noted. An example is: L3-SFS-800: The Flight Software shall support VM sequences containing of up to 4000 instructions in length. VML.3.5.k: The sequencing software shall support sequences of up to at least 1000 instructions in length.",4/22/05ProjectA - TIM - 1547,EngCntrl Test 12 Requirements Not Included in Test 11,2,"An e-mail received by IV&V on March 31, 2005, concerning EngCntrl requirements mapping, stated that EngCntrl FSW Test 12 was to be integrated with Test 11. The script for Test 12 was supposed to verify EngCntrl SRS requirements 3.7.2.2.1 and 3.7.2.2.2. It is noted that no script is included in Test 12, only these two requirements are found. The script for Test 11 does not incorporate the two requirements from Test 12 nor are they verified by the script. ***Note, the referenced e-mail is attached to this TIM in the RelationshEngine area.",4/21/05ProjectA - TIM - 1546,"ProjectA OBC C&DH Flight Software Test Procedure, Section 11.7, VM Test, Does Not Fully Verify the Linked VML SRS Requirements",2,"This test executes script: vm_runseqtest1(). This script contains three separate tests which are identified as Test 1, Test 2 and Test 3 in the Action Column. Issues: Sub-Issue #1: Requirements linked to the individual tests in the Requirement ID Column would tend to indicate that all six of the VML SRS requirements are verified by Tests 1-3. However, these six major requirements contain sub-requirements. The following sub-requirements are not linked to or verified by these tests: VM001.4, VM002.2, VM004.1, VM004.2, VM004.3 and VM005.3. Sub-Issue #2: The Expected Results Column does not adequately identify the ""expected results"". Statements such as ""Try to unload out-of-bounds Engines, Request housekeeping telemetry"" seem to be more associated with ""test descriptions"" rather than to characterize the ""expected test results"".",4/6/05ProjectA - TIM - 1545,"ProjectA OBC C&DH Flight Software Test Procedure/Script vm_runseqtest1(), Test #3, Does Not Fully Verify the Linked VML SRS Requirements",2,"The third test within script vm_runseqtest1() is structured as follows: ;************************************************************************ ; REQUIREMENTS COMPLIANCE: ; The following Requirements are met by the next step in this execution: ; VM001.3 - VML Sequence Variables. ; For now (Aug/2004) Global Variables (GV's) are just spares ; embedded in the FSW code(SRAM). ; Yet, this test can verify that VM Task integrates the VML ; capability of reading & writing to Global Variables. ; WR Capability - Modification of VML GV's via VML WR-to-GV Cmd ; RD Capability - Reading of modified GV's after issuing a GV ; Table Dump. ; ; VM003.2 - Global Variable Telemetry - (Observation of VML Event Msgs at ; screen #5 meets this requirement). ;************************************************************************ ; Modifying VML GVs and observing them ; as TLM via GV Table Dump: ans = ask ""Proceed with GV's RD & WR Test?"" buttons(""Yes"",""No"") if (ans = ""Yes"") then @vs:gv_set_int 1, 45 wait 1 @vs:gv_set_int 2, 45 wait 1 @vs:gv_set_int 3, 45 wait 1 @vs:gv_set_int 4, 45 wait 1 @vs:gv_set_int 5, 45 wait 1 @vs:gv_set_int 6, 45 wait 1 @vs:gv_set_int 7, 45 wait 1 @vs:gv_set_int 8, 45 wait 1 @vs:gv_set_int 9, 45 wait 1 @vs:gv_set_int 10, 45 wait 1 @vs:gv_set_int 11, 255 wait 1 @vs:gv_set_int 12, 255 wait 1 @vs:gv_set_int 13, 255 wait 1 @vs:gv_set_int 14, 255 wait 1 @vs:gv_set_int 15, 255 wait 1 @vs:gv_set_int 16, 255 wait 1 @vs:gv_set_int 17, 255 wait 1 @vs:gv_set_int 18, 255 wait 1 @vs:gv_set_int 19, 255 wait 1 @vs:gv_set_int 20, 255 wait 5 endif ;Now Dump GV Table and observe ;GVs modified. ;Make sure to watch the data being shown ;in the Vml_GV Table Dump... ans = ask ""Request GV Table Dump?"" buttons(""Yes"",""No"") if (ans = ""Yes"") then @sm:select_sys_table 125, 2, 5 ;same as --> @tselect VmGvTable Active Dump_Only wait 10 @sm:dump_table 0,0,1 ;same as --> @tdump VmGvTable 0 -1 wait 10 endif Issues: Sub-Issue #1: Verification of VM001.3 This requirement is stated as follows: Through VM Task interface, VML Flight Component shall provide global variables with read/write accessibility to active sequences and spacecraft subsystems. The statement (For now (Aug/2004) Global Variables (GV's) are just spares embedded in the FSW code(SRAM). Yet, this test can verify that VM Task integrates the VML capability of reading & writing to Global Variables. WR Capability - Modification of VML GV's via VML WR-to-GV Cmd; RD Capability - Reading of modified GV's after issuing a GV Table Dump.) raises concern whether the full intent of this requirement is verified. It appears that the test is designed for an incomplete FSW build and that the requirement “read/write accessibility to active sequences and spacecraft subsystems” is not verified. In addition, Table 2 in the VML SRS states (vml_fsw1.scr will have the ability to request table dumps for readings of the Global Variables on-board. It will also be able to write to Global Variables via VML Command). The test does not appear to address “the global variables on-board”. Sub-Issue #2: Verification of VM003.2. This requirement is stated as follows: VM Task shall provide interface storage and transmission of the VMLFC global variables in sequences/blocks being executed. The test does not appear to deal with the “VMLFC global variables in sequences/blocks being executed”; therefore, this requirement is not verified. Sub-Issue #3: There are 24 S912-GR3400 requirements that are linked to the two VML SRS requirements associated with this test. It is noted that the Project’s approach to verify parent requirements is through verification of children (to the extent possible). It is unclear if this test can be used to verify the linked L3 parent requirements, if this is the intent.",4/5/05ProjectA - TIM - 1544,"ProjectA OBC C&DH Flight Software Test Procedure/Script vm_runseqtest1(), Test #2, Does Not Fully Verify the Linked VML SRS Requirements",2,"The second test within script vm_runseqtest1() is structured as follows: ;************************************************************************ ; REQUIREMENTS COMPLIANCE: ; The following Requirements are met by the next step in this execution: ; VM005.1 - VML Sequence Loading - (Observation of VML Event Msgs at ; screen #1 meets this requirement). ; VM005.2 - VML Sequence Memory - (Observation of VML Event Msgs at ; screen #1 meets this requirement). ; VM002.1 - VML Command Interface - ; (verify #4 & #7 for VML-SC Cmd Interface). ; ;*********************************************************************** ans = ask ""Start Sequence Loading & Execution?"" buttons(""Yes"",""No"") if (ans = ""Yes"") then ; Load Binary files into DRAM and Exec them %mem_block save sm_memload from ""vml_test8.pre"" wait 2 @sm_memload 0xF1140000 0 -1 4 wait 3 ;Send a VML command to read & load the Files in DRAM @vs:load 12,""d:/fb20/vml_test8.mod"" wait 1 wait 60 ;These SEQs run for 60 secs each... endif ; Request HK Telemetry again ans = ask ""Request VM HK Telemetry?"" buttons(""Yes"",""No"") if (ans = ""Yes"") then @vs:hk_tlm_request endif ; Playback SEQ Commands sent to S/C ; Make sure to watch the data being logged into ; the pakts stat under VC23_Recorder. ; Watch the stat of the data at the ds_summary. ; The raw data should be looked upon in the ans = ask ""Request VML-SEQ Command Playback?"" buttons(""Yes"",""No"") if (ans = ""Yes"") then ans = ask ""First time Commanding Playback since boot?"" buttons(""Yes"",""No"") if (ans = ""Yes"") then @ds:start_playback DataSet_0, VR9_MASK else @ds:start_playback DataSet_1, VR9_MASK endif wait 5 endif Issues: Sub-Issue #1: Verification of VM002.1. This requirement is stated as follows:VM Task shall provide interface for time synchronization between VM Engines and spacecraft. Table 2 in the VML SRS states: vml_fsw2.scr will change the S/C time and Event Message containing VML time synch will be observed. It is unclear if the scripts mentioned above perform this function. There are no specific pass/fail criteria to show that the time synchronization has been performed correctly or not. Sub-Issue #2: Verification of VM005.1. This requirement is stated as follows: VM Task shall provide capability to accept sequence loads without interrupting a thread of execution. Table 2 in the VML SRS states: vml_fsw5.scr : Setp #1: Load a sequence from MAESTRO database into DRAM. Step #2: Send VML_Load & VML_Spawn commands in order to load sequence into an engine and start its execution. Step #3: Observe TLM on the initialization and continuity of first sequence execution. Step #4: Start the load of a different sequence from MAESTRO database into DRAM. Step #5: Observe on-going execution of sequence #1 by verifying VM engine # & current function Telemetry. It is unclear if the scripts mentioned above perform this function. There are no specific pass/fail criteria to show that the load was accepted and that sequence execution was not interrupted. Sub-Issue #3: Verification of VM005.2 This requirement is stated as follows: VM Task shall provide capability to read a sequence from a file buffer and to notify Ground System on anomalies on that read. Table 2 in the VML SRS states: Execution of vml_fsw5.scr Steps #1 & #2 will verify this Requirement. It is unclear if these were actually performed during the test and whether any read anomalies were created. Sub-Issue #4: There are 14 L3 SCFSRD (S912-GR3400) requirements that are linked to the three VML SRS requirements associated with this test. It is noted that the Project’s approach to verify parent requirements through verification of children (to the extent possible). It is unclear if this test can be used to verify the linked L3 parent requirements, if this is the intent.",4/5/05ProjectA - TIM - 1543,"ProjectA OBC C&DH Flight Software Test Procedure/Script vm_runseqtest1(), Test #1, Does Not Fully Verify the Linked VML SRS Requirements",2,"The first test within script vm_runseqtest1() is as follows: ;************************************************************************ ; REQUIREMENTS COMPLIANCE: ; VM001.1 - This test verifies the MAX & MIN number of Engines and ; the integration of the VML Flight Component as a subsystem ; of ProjectA FSW platform. ; Send a VML Command to the higher & lower range of Engines: ; Engines ""0"" and ""13"". ; Observe the HK Telemetry command counter indication that ; a VML Command has been sent and accepted (error counter remains ; equal to zero). ; ; VM001.2 - Verify that ""Engine Current State"" & ""Engine Load State"" ; Telemetry Points at screen 6 are ""UNLOADED"" (0) and ""NEVER ; USED"" (6). ; VM003.1 - This observation also validates the ""VML Channeled Telemetry"" ; ; VM002.3 - Observation of screen #7 with HouseKeeping Telemetry points ; meets this requirement. ; VM006.1 - Observation of screen #1 with VML Event Messages meets this ; requirement. ; ;*********************************************************************** ans = ask ""Test for Engine Config Limits?"" buttons(""Yes"",""No"") if (ans = ""Yes"") then @vs:unload 0 ;Verify the Evnt Msg: ""VM 0 out of range can't unload"" @vs:unload 13 ;Verify the Evnt Msg: ""VM 13 out of range can't unload"" @vs:hk_tlm_request ;Verify HK Tlm for vm_cmd_cnts & vm_cmd_err_cnts. These ;counters should increase. wait 2 endif Issues: Sub-Issue #1: Verification of VM001.1. This requirement is stated as follows: VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 12 (twelve) Virtual Machines, capable of executing on-board blocks and sequences. The linked test only shows that out of range commands are rejected. It does not verify the requirement by showing that 12 VMs capable of executing on-board blocks and sequences can be run. It should be noted that there are numerous S912-GR3400 requirements that are linked to this single VML SRS requirement. Because it is the Project’s approach to verify parent requirements through verification of children (to the extent possible) this test will not verify the parent L3 requirements either. Sub-Issue #2: Verification of VM003.1: This requirement is stated as follows: VM Task shall provide interface for VML internal Telemetry storage and transmission via Software Bus. It is unclear how the statement (This observation [presumably the two telemetry points from the previous step] also validates the ""VML Channeled Telemetry"") validates the linked requirement. It seems that observing only two points out of an unknown number of VML points does mot adequately address this requirement. Sub-Issue #3: Verification of VM002.3. This requirement is stated as follows: VM Task shall provide proper interface to accept and reject commands and housekeeping packet generation. It is unclear how the statement (Observation of screen #7 with HouseKeeping Telemetry points meets this requirement.) is adequate to verify this requirement. There are no specific pass/fail criteria for “housekeeping packet generation”. If the intent is to check all VM commands, this test does not verify the requirement as only one legal VS command is sent. Sub-Issue #4: Verification of VM006.1. This requirement is stated as follows: VM Task shall provide interface for VML internal Event Reports to be logged into Error Handler task with logging capabilities. It is unclear how the statement (Observation of screen #1 with VML Event Messages meets this requirement.) is adequate to verify this requirement, e.g., VML internal Event Reports logged into the Error Handler task are apparently not present(the contents of the Event Report is not defined). There are no specific pass/fail criteria for determining whether the content of screen #1 is correct. Sub-Issue #5: There are 42 S912-GR3400 requirements that are linked to the five VML SRS requirements associated with this test. It is noted that the Project’s approach to verify parent requirements is through verification of children (to the extent possible). It is unclear if this test can be used to verify the linked L3 parent requirements, if this is the intent.",4/4/05ProjectA - TIM - 1542,Build 3.0 OBC Code: Inadequate/Outdated source code comments,4,"Issue: Based upon IV&V verification, the in-line descriptive source code comments for the ProjectA Build 3.0 OBC source code are often inadequate or missing and/or outdated. Several header comment blocks contain blanks entries for one or more of the following entries: - Author - Purpose - Functions Contained - Assumptions and External Effects - Date Written, and Modification History. Rather than identifying every single instance of this problem, this TIM provides specific examples for 13 variations of this problem found throughout the OBC code. 1.) The file, ""tg_glob.h"", is missing entries for ""Purpose"", ""Functions Contained"", ""Assumptions and External Effects"", and ""Modification History"" Source Code References: File - ../appbuild_03r00_fsw/tg/inc/tg_glob.h: 1: /*============================================================================= 3: ** tg_glob.h 7: ** Purpose: 9: ** Functions Contained: 11: ** Assumptions and External Effects: 13: ** Date Written: 03/13/99 15: ** Modification History: 16: ** MM/DD/YY CR-xxxx F. Last, Organization 17: ** - change description 19: **============================================================================*/ 2.) Files ""di_glob.h"", ""xbserver.c"", ""md_addr.c"", and ""xb_summit_io_utils.c"" contain no comments Source Code References: File - ../appbuild_03r00_fsw/di/inc/di_glob.h: (Note: referenced source code represents this source code in its entirety) 1: void 2: diDummyFcn( void ); 3: 4: void 5: di_command_exec( diCmdPktFmt * diCmdPtr ); 6: 7: void 8: diClearTlm( void ); File - ../appbuild_03r00_fsw/sm/src/md_addr.c: (Note: referenced source code represents this source code in its entirety) 1: #include ""fdstypes.h"" 2: #include ""smpkt.h"" 3: 4: u_dword sm_md_addr_table [ MAX_MDWELL_PTS ] ; 5: u_word sm_md_addr_table_end ; File - ../appbuild_03r00_fsw/xb/src/xb_summit_io_utils.c: (Note: this file contains no comments) 3.) File ../s1/src/s1ulcisr.c has a creation date of 12/14/98. 4.) The file, ""../s2/src/s2cmd.c"" contains a last modification date of 1/18/2001. It also contains a blank ""Purpose:"" statement 5.) Files ""s3agent.c"" and ""s3task.c"" contain blank entries for the ""Purpose"" statement of the main header comments block. In both cases, the entries for the ""Functions Contained"" statement are incomplete. 6.) The file, ""../sb/src/putstr.c"" is sparsely commented and contains no modification history. 7.) The Build 3.0 OCB code contains 51 instances where the ""xb"" (i.e., 1553) source code comments reference ""1773 Communications (eXternal Bus)"" ProjectA is utilizing a 1553 implementation. Therefore, references to the 1773 protocol seem misleading. 8.) File ../xb/inc/xbsummitif.h contains no main header comments block and other comments are limited. 9.) A comment dated 4/2000 indicates a temporarily disabled function in file, ""xbmain.c"". Since this date predates the ProjectA project, it is unclear whether the ""temporary"" fix was inherited by ProjectA. Source Code References: File - ../appbuild_03r00_fsw/xb/src/xbmain.c: 91: "" /* Disable it until QhssClose is fixed 04/28/00 */"" 10.) The file ""totypes.h"" contains an implied TBD: Source Code References: File - ../to/inc/totypes.h : 84: u_byte data[ MAX_CMD_INPUT_SIZE ]; /* need to modify */ 11.) There is a possible unresolved issue in legacy code according to the following comments from the file, ""QDDhiapi.c"": Source Code References: File - ../src/drv/qhss/QDDhiapi.c: 3365: /* ISSUES: What this is used for or how it is called I don't know. */ File: ../src/drv/qhss/aw_QDDhiapi.c 3365: /* ISSUES: What this is used for or how it is called I don't know. */ 12.) The file, ""ssbsizes.h"", references an undefined and undocumented replacement macro named ""JWM"": Source Code References: File - ../sb/inc/ssbsizes.h: 54: #ifndef JWM 62: #endif JWM 13.) File totbl_nm.c is not included in build files, but referenced within several file comments: Source Code References: File - ../to/src/tamain.c 88: extern tlm_rate_table_type tlm_rate_table[TLM_RATE_TABLE_SIZE]; /* declared in totbl_nm.c */ File - ../to/src/tocmd.c 100: /* D100-027 - declared in totbl_nm.c */ File - ../to/src/toMPIC0.c 89: // Declared in totbl_nm.c File - ../to/src/toPTIMx.c 50: // Declared in totbl_nm.c File - ../to/src/totbl_nm.c 49: ** $Log: totbl_nm.c,v $",ProjectA - TIM - 1541,Build 3.0 OBC Code: Missing header files,4,"Issue: Based upon IV&V verification, the following header files are #include'd in the OBC Build 3.0 code, but were not provided with the delivered code: ""ag_tables.h"", ""adtelemetry.h"", and ""adcommand.h"". The first header is #include'd by ""ag_tbl.c"", the other two are #include'd by ""adglobal.h"". Neither ""ag_tbl.c"" nor ""adglobal.h"" appears to serve any purpose in the OBC Build 3.0 code. Source Code References: File: ../tables/src/ag_tbl.c 8: #include ""ag_tables.h"" File: ../ac/inc/adglobal.h 16: #include ""adtelemetry.h"" 17: #include ""adcommand.h""",ProjectA - TIM - 1540,Build 3.0 OBC Code: Extraneous versions of header files - 2 instances,4,"Issue: This issue addresses two verified instances where multiple identical versions of the same files were included in the OBC Build 3.0 source code. The first instance involves the three files named, ""rad6k.h"". These files are located in the OS directories, ""../h/drv/rad6k"", ""../src/drv/qhss/ghcc"", and ""../src/drv/1553/ghcc""; however, the Build 3.0 OBC code appears to only access (i.e., #include) the copy in ""../drv/rad6k"". The second instance involves the two files named, ""EventLogEXT.h"". These files are located in the OS directories, ""../src/drv/qhss/eventLog/user"" and ""../drv/eventLog""; however, the Build 3.0 OBC code appears to only use (i.e., #include) the copy in ""../drv/eventLog"". Source Code References: ""rad6k.h"" File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/h/drv/rad6k/rad6k.h File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/ghcc/rad6k.h File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/ghcc/rad6k.h File - ../appbuild_03r00_fsw/eepromImage/config.h: 50: #include ""drv/rad6k/rad6k.h"" File - ../appbuild_03r00_fsw/hs/src/hs_main.c 148: #include <drv/rad6k/rad6k.h> /* for proto IOCC_EOI */ File - ../appbuild_03r00_fsw/lio/src/lioopint.c 5: #include <drv/rad6k/rad6k.h> /* for IOCC_EOI */ File - ../appbuild_03r00_fsw/s1/src/s1ulcisr.c 38: #include <drv/rad6k/rad6k.h> File - ../appbuild_03r00_fsw/xb/src/xbbcisr.c 57: #include ""drv/rad6k/rad6k.h"" /* for #define IOCC_EOI */ File - ../osbuild_03r00_fsw/h/drv/lio/lioregs.h: 22: #include ""../rad6k/rad6k.h"" File - ../osbuild_03r00_fsw/h/drv/rad6k/rad6k.h: 1: /* rad6k.h - CPU board header */ File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/bcdd.c 97: #include ""drv/rad6k/rad6k.h"" File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/rtdd.c 61: #include ""drv/rad6k/rad6k.h"" File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/ghcc/rad6k.h: 1: /* rad6k.h - CPU board header */ File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/ambi/ambiFns.c 12: #include ""drv/rad6k/rad6k.h"" /* RAD6000SC Paramaters */ File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/lio/lioFns.c 14: #include ""drv/rad6k/rad6k.h"" File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/lio/liouart.h: 22: #include ""drv/rad6k/rad6k.h"" File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/QDDhiapi.c 86: #include <drv/rad6k/rad6k.h> /* defines IOCC_EOI */ File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/QDDhiapi_05_10_1999.c 83: #include <drv/rad6k/rad6k.h> /* defines IOCC_EOI */ File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/aw_QDDhiapi.c 86: #include <drv/rad6k/rad6k.h> /* defines IOCC_EOI */ ""EventLogEXT.h"" File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/h/drv/eventLog/EventLogEXT.h File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/eventLog/user/EventLogEXT.h File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/QDD_all_tests.c 1 37: #include <drv/eventLog/EventLogEXT.h> File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/QDDdisplayProc.c 1 17: #include <drv/eventLog/EventLogEXT.h> File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/QDDhiapi.c 1 88: #include <drv/eventLog/EventLogEXT.h> /* debug tool - RecordEVENT prints */ File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/aw_QDDhiapi.c 1 88: #include <drv/eventLog/EventLogEXT.h> /* debug tool - RecordEVENT prints */ File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/qhss/eventLog/source/EventLog.h 1 26: #include <h/drv/eventLog/EventLogEXT.h>",ProjectA - TIM - 1539,Build 3.0 OBC Code: Extraneous versions of 1553 header files - 3 instances,4,"Issue: This issue addresses three verified instances where two identical versions of the same files were included in the OBC Build 3.0 code. The first instance involves the two files named, ""1553if.h"". These files are located in the OS build directories ""../h/drv/1553"" and ""../src/drv/1553""; however, the Build 3.0 OBC code appears to only use (i.e., #include) the copy in ""../src/drv"". The second instance involves the two files named, ""1553rt.h"". One version is in the OS directory, ""../src/drv/1553""; the other is in the APP directory, ""../xb/inc/1553rt.h"". However, the Build 3.0 OBC code appears to only use (i.e., #include) the OS version of this file. The third instance involves the two files named, ""summit_regs.h"". One version is in the OS directory, ""../src/drv/1553""; the other is in the APP directory, ""../xb/inc"". For this case, the Build 3.0 OBC code appears to use (i.e., #include) both versions of this file. Source Code References: Instance #1: ""1553if.h"": File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/h/drv/1553/1553if.h File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/1553if.h File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/bcdd.c: 98: #include ""drv/1553/1553if.h"" File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/rtdd.c: 62: #include ""drv/1553/1553if.h"" Instance #2: ""1553if.h"": File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/1553rt.h File - ../appbuild_03r00_fsw/xb/inc/1553rt.h File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/1553rt.h File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/src/drv/1553/rtdd.c: 63 #include ""1553rt.h"" Instance #3: ""summit_regs.h"": File - ../appbuild_03r00_fsw/xb/inc/summit_regs.h File - ../appbuild_03r00_fsw/xb/inc/xbsummitif.h: 32: #include ""summit_regs.h"" File - ../osbuild_03r00_fsw/src/drv/1553/1553bc.h: 23: 04/16/95 MJF Moved Summit ctl. reg. bit defines to summit_regs.h File - ../osbuild_03r00_fsw/src/drv/1553/bcdd.c: 96: #include ""summit_regs.h"" File - ../osbuild_03r00_fsw/src/drv/1553/rtdd.c: 64: #include ""summit_regs.h"" File - ../osbuild_03r00_fsw/src/drv/1553/summit_regs.h",ProjectA - TIM - 1538,Build 3.0 OBC Code: Misspelling of miioccom.h,4,"Issue: The OBC OS source code file, ""sad.h"" line #27, contains a '#include' statement for the header <miiocom.h>. Based upon IV&V verification, this is the only source code that references this file; however, the '#ifndef' statement that controls whether this statement is processed depends on the constant ""_MIIOCCOM_"". This constant is checked in the same manner for several other source code files; However, all other instances are followed by the statement ""#include <miioccom.h>"" where the spelling of the header file agrees with the constant. Given this pattern, and that a file named ""miiocom.h"" was not included in the Build 3.0 OBC FSW delivery, this file name appears to be misspelled in ""sad.h"". In addition, ""sad.h"" contains a comment indicating it is a WindRiver (i.e., associated with the VxWorks OS) file. However, there's no comments describing any ProjectA-specific changes. Source Code References: File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/h/streams/sad.h: 26: #ifndef _MIIOCCOM_ 27: #include <miiocom.h> 28: #endif File - ../osbuild_03r00_fsw/export/home/ProjectA/wind/radbuild30/target/h/streams/misad.h: 13: #include <sad.h> File - ../osbuild_03r00_fsw/h/strmLib.h 36: #include ""streams/stropts.h"" /* Includes miioccom.h */ File - ../osbuild_03r00_fsw/h/streams/dlpi.h 1169: #include <miioccom.h> File - ../osbuild_03r00_fsw/h/streams/micommon.h 166: * Be sure to examine miioccom.h for possible ioctl command code collisions 169: #include <miioccom.h> File - ../osbuild_03r00_fsw/h/streams/miecho.h 17: #include <miioccom.h> File - ../osbuild_03r00_fsw/h/streams/miioccom.h 1:/* miioccom.h - IOCTL command definition header */ 12: ** miioccom.h 4.1, last change 8/31/93 19: static char miioccom_h_sccsid[] = ""@(#)miioccom.h 4.1""; File - ../osbuild_03r00_fsw/h/streams/mind.h 15: #include <miioccom.h> File - ../osbuild_03r00_fsw/h/streams/sad.h 27: #include <miioccom.h> //Charlie 1/27/05: changed spelling from ""miiocom"" File - ../osbuild_03r00_fsw/h/streams/sockio.h 26: #include <miioccom.h> File - ../osbuild_03r00_fsw/h/streams/sockmod.h 32: #include <miioccom.h> 40: #include <inet/miioccom.h> File - ../osbuild_03r00_fsw/h/streams/strlog.h 47: #include ""miioccom.h"" File - ../osbuild_03r00_fsw/h/streams/stropts.h 25: * defined in miioccom.h and other (port-specific) ioctl() command codes. 29: #include ""streams/miioccom.h"" File - ../osbuild_03r00_fsw/h/streams/timod.h 28: #include <miioccom.h>",ProjectA - TIM - 1537,Build 3.0 OBC Code: Multiple versions of mv2600.h,4,"Issue: Based upon IV&V verification, two Build 3.0 source code files, ""toMPIC0.c"" and ""xbpmcif.h"", '#include' a header file named, ""mv2600.h"". The '#include' statements for ""toMPIC0.c"" and ""xbpmcif.h"" reference different relative paths for this header, which suggests the possibility that two versions of the header file, ""mv2600.h"", are necessary to support this build. In addition, the '#include' for ""toMPIC0.c"" encloses this header file in angle brackets (<>); whereas, ""xbpmcif.h"" encloses it with double quotes ("" ""). By convention, angle brackets typically denote a standard header file; while, double quotes denote a local or non-standard header file. Although compilers do not require this convention, the inconsistent usage suggests one of these files is a standard header, while the other is altered version of this header or a completely different header file. Source Code References: File - ../appbuild_03r00_fsw/xb/inc/mv2600.h File - ../appbuild_03r00_fsw/to/src/toMPIC0.c: 68: #include <mtx603_jh/mv2600.h> File - ../appbuild_03r00_fsw/xb/inc/xbpmcif.h: 4 #include ""mv2600.h""",ProjectA - TIM - 1535,Build 3.0 OBC Code: Loss of sign from assignment (int to unsigned long) - 80 instances,4,"Issue: Based upon IV&V verification, variable ""bank"" is an 'unsigned long type', and is it being set to ""beginningBank"" which is an 'integer' type. If ""beginningBank"" holds a negative value then the potential exists for a sign loss. This same type of issue exists in 79 additional instances of which, 20 were verified by IV&V. See the attached Excel spreadsheet for a complete listing of the additional instances. FlexeLint Message #732: Loss of sign (assignment) (int to unsigned long) FlexeLint Message #732 Description: An assignment (or implied assignment, see Context) is made from a signed quantity to an unsigned quantity. Also, it could not be determined that the signed quantity had no sign. For example: u = n; /* Info 732 */ u = 4; /* OK */ where u is unsigned and n is not, warrants a message only for the first assignment, even though the constant 4 is nominally a signed int. Make sure that this is not an error (that the assigned value is never negative) and then use a cast (to unsigned) to remove the message. Source Code References: File - di_cmd.c: Line # 331: for(bank = beginningBank; bank < endingBank; bank++ )",ProjectA - TIM - 1534,"Build 3.0 OBC Code: Symbol ""os_cold_restart_count"" not explicitly initialized",4,"Issue: Based upon IV&V verification, several Build 3.0 OBC source code files define/declare the variable, ""os_cold_restart_count"". Line #64 of ""fdutils.c"" assigns the value of this variable to another variable with a similar name. However, this variable is never set or initialized, which implies the value is always zero. Comments on lines #106 - #108 of ""hs_sp.c"" suggest that a developer has already come to the same conclusion, but has not received confirmation. FlexeLint Message #729: Symbol 'os_cold_restart_count' (line 27, file xosglmem.h, module xosmodes.c) not explicitly initialized FlexeLint Message #729 Description: The named inter-module variable (external variable) was not explicitly initialized. See the comments on message 727 for more details. This message is suppressed for unit checkout (-u). FlexeLint Message ID #727: The named static variable (local to a function) was not explicitly initialized before use. The following remarks apply to messages 728 and 729 as well as 727. By no explicit initialization we mean that there was no initializer present in the definition of the object, no direct assignment to the object, and no address operator applied to the object or, if the address of the object was taken, it was assigned to a pointer to const. These messages do not necessarily signal errors since the implicit initialization for static variables is 0. However, the messages are helpful in indicating those variables that you had forgotten to initialize to a value. To extract the maximum benefit from the messages we suggest that you employ an explicit initializer for those variables that you want to initialize to 0. For example: static int n = 0; For variables that will be initialized dynamically, do not use an explicit initializer as in: static int m; This message will be given for any array, struct or union if no member or element has been assigned a value. Source Code References: File - /hs/src/hs_sp.c: 106: extern u_word os_cold_restart_count; /* The number of cold restarts */ 107: /* Not maintained at all. */ 108: /* Yes? */ _______________________________________________________________________ File - ../sb/inc/xosglmem.h: 27: extern u_word os_cold_restart_count; /* The number of cold restarts */ _______________________________________________________________________ File - ../sb/src/sosglmem.c: 75: u_word os_cold_restart_count; /* The number of cold restarts */ _______________________________________________________________________ File - ../tc/src/fdsutils.c: 64: extern u_word os_cold_restart_count ; _______________________________________________________________________ 526: os_environment.cold_restart_count = os_cold_restart_count ;",ProjectA - TIM - 1533,"Build 3.0 OBC Code: Symbol ""TO_squeeze_table"" not explicitly initialized",4,"Issue: Based upon IV&V verification, file - tosquish.c line #91 defines ""TO_squeeze_table [1]"" as type ""squeeze_fmt"". Line #92 uses ""TO_squeeze_table[1]"" as part of a calculation; however, this array is never set or initialized. This array is used by the function ""TO_process_squeeze"" defined by File - totlm.c. However, the comment on line #22 of totlm.c indicates this function is ""not used for ProjectA."" ""TO_split_table[1]"" is also used by a similar function called ""DS_process_split"" defined by File - dstlm.c. However, unlike the previous case, it appears this function is used for ProjectA. Another difference is that dstlm.c contains an 'external' declaration for ""TO_squeeze_table[1]"" indicating the array is of type ""ds_squeeze_fmt"" (i.e., instead of type ""squeeze_fmt""). None of the source code files contain the ""real"" (i.e., Non-'extern') definition for ""TO_squeeze_table[1]"" of this type. So, the DS code must rely on the definition provided by the TO code for this, as well as the definition for ""TO_squeeze_table_size"". FlexeLint Message #729: Symbol 'TO_squeeze_table' (line 91, file tosquish.c) not explicitly initialized FlexeLint Message #729 Description: The named inter-module variable (external variable) was not explicitly initialized. See the comments on message 727 for more details. This message is suppressed for unit checkout (-u). FlexeLint Message #727: The named static variable (local to a function) was not explicitly initialized before use. The following remarks apply to messages 728 and 729 as well as 727. By no explicit initialization we mean that there was no initializer present in the definition of the object, no direct assignment to the object, and no address operator applied to the object or, if the address of the object was taken, it was assigned to a pointer to const. These messages do not necessarily signal errors since the implicit initialization for static variables is 0. However, the messages are helpful in indicating those variables that you had forgotten to initialize to a value. To extract the maximum benefit from the messages we suggest that you employ an explicit initializer for those variables that you want to initialize to 0. For example: static int n = 0; For variables that will be initialized dynamically, do not use an explicit initializer as in: static int m; This message will be given for any array, struct or union if no member or element has been assigned a value. Source Code References: File: ../to/src/tosquish.c 91: squeeze_fmt TO_squeeze_table[1]; 92: u_word TO_squeeze_table_size = sizeof(TO_squeeze_table)/sizeof(squeeze_fmt) _______________________________________________________________________ File - ../to/src/totlm.c: 22: **TO_process_squeeze (not used for ProjectA) 1123: extern squeeze_fmt TO_squeeze_table[]; 1136: while (i < TO_squeeze_table_size && TO_squeeze_table[i].stream_id != 1137: ((seds_packet_header_type *) pkt)->packet_id) 1138: i++; _______________________________________________________________________ File: ../ds/src/dstlm.c: 1588: boolean DS_process_squeeze( u_word ap_id, tlm_packet_structure *pkt ) 1594: extern ds_squeeze_fmt TO_squeeze_table[]; _______________________________________________________________________ File - ../ds/inc/dstypes.h: 282: typedef struct { 283: u_word stream_id; 284: u_word word_count; 285: } ds_squeeze_fm _______________________________________________________________________ File - ../to/inc/totypes.h: 223: typedef struct { 224: u_word stream_id; 225: u_word word_count; 226: } squeeze_fmt;"ProjectA - TIM - 1531,Build 3.0 OBC Code: Possible access of out-of-bounds pointer,3,"Issue: Based upon IV&V verification, file ""tpsexetask.c"" defines the function, ""Tp_TaskMain"", which passes the pointer, ""ptr_tppduevnt->packet_data[0]"", in as the pointer ""InputData"" to the function ""TPSReadPDUSensors"". Since the pointer, ""ptr_tppduevnt"" is of type ""tp_pdu_input_pkt_fmt"", the pointer ""InputData"" corresponds to the first element of the array, ""packet_data[MAX_TPS_PDU_INPUT_SIZE]"". Tracing back through the code reveals the constant, ""MAX_TPS_PDU_INPUT_SIZE"" to be 164. Therefore, line #166 of ""tpssenreadsensors.c"" references ""InputData[i+164]"" where i = 0 and 1. This causes element 165 of the ""InputData"" array to be accessed. However, by definition ""InputData"" has 164 elements i.e., InputData[0] through InputData[163]. Therefore, the number of elements is exceeded by 2. Likewise, line #174 of ""tpssenreadsensors.c"" references ""InputData[i+166]"" where i = 0 and 1. This causes element 167 of the ""InputData"" array to be accessed. Therefore, the number of elements is exceeded by 4. Both cases cause the array to go out-of-bounds. FlexeLint Message #661: Possible access of out-of-bounds pointer (2 beyond end of data) by operator '[' [Reference: file tpsexetask.c: line #212; file tpssenreadsensors.c: lines 165, 166] FlexeLint Message #661 Description: An out-of-bounds pointer may have been accessed. See message 415 for a description of the parameters Integer and String. For example: int a[10]; if( n <= 10 ) a[n] = 0; Here the programmer presumably should have written n<10. This message is similar to messages 415 and 796 but differs from them by the degree of probability. FlexeLint Message #415 Description: An out-of-bounds pointer was accessed. String designates the operator. The parameter 'Integer' gives some idea how far out of bounds the pointer may be. It is measured in units given by the size of the pointed to object. The value is relative to the last item of good data and therefore should always be greater than zero. For example: int a[10]; a[10] = 0; results in an overflow message containing the phrase '1 beyond end of data'. FlexeLint Message #416 Description: An out-of-bounds pointer was created. See message 415 for a description of the parameters Integer and String. For example: int a[10]; ... f( a + 11 ); Here, an illicit pointer value is created and is flagged as such by PC-lint/FlexeLint. Note that the pointer a+10 is not considered by PC-lint/FlexeLint to be the creation of an out-of-bounds pointer. This is because ANSI C explicitly allows pointing just beyond an array. Access through a+10, however, as in *(a+10) or the more familiar a[10], would be considered erroneous but in that case message 415 would be issued. FlexeLint Message #796 Description: An out-of-bounds pointer may conceivably have been accessed. See message 415 for a description of the parameters Integer and String. For example: int a[10]; int j = 100; for( i = 0; i < n; i++ ) j = n; a[j] = 0; Here, the access to a[j] is flagged because it is conceivable that the for loop is not executed leaving the unacceptable index of 100 in variable j. This message is similar to messages 415 and 661 but differing from them by the degree of probability. Source Code References: File - ../tp/src/tpssenreadsensors.c: 94: void TPSReadPDUSensors( u_word *InputData ) 164: /* copy FC2 CCD Temp */ 165: for ( i=0; i<2; i++ ) 166: ThermalTelemetry.TelemetryArray[i+PDU_DATA_OFFSET+14+50+45+2]= InputData[i+164] & 0x0fff; 172: /* copy FC2 CCD Temp */ 173: for ( i=0; i<2; i++ ) 174: ThermalTelemetry.TelemetryArray[i+PDU_DATA_OFFSET+14+50+45+6]= InputData[i+166] & 0x0fff; File - ../tp/src/tpsexetask.c: 139: void Tp_TaskMain( void ) 147: tp_pdu_input_pkt_fmt * ptr_tppduevnt; 210: /* Tell Read Sensors to store all incoming telemetry */ 211: /* Provide the pointer to the data. */ 212: TPSReadPDUSensors (&ptr_tppduevnt->packet_data[0]); File - ../tp/src/ttppkt.h: 22: #define MAXTPHARDWRDS 68 /* Number of words in ACE HARD TLM (1553) */ 32: #define MAX_TPS_PDU_INPUT_SIZE MAXPDUWRDS+(sizeof(time_code_sec_hdr_type)/2) Note = 160 + (8/2) = 164 99: typedef struct 100: { 101: seds_packet_header_type hdr; 102: u_word packet_data[MAX_TPS_PDU_INPUT_SIZE]; 103: } tp_pdu_input_pkt_fmt; File - ../pkts/fdstypes.h: 151: ** Telemetry Time Code Packet Secondary Header Structure 154: typedef struct 155: { 157: u_word hi_word_secs; 158: u_word lo_word_secs; 159: u_word hi_word_subsecs; 160: u_word lo_word_subsecs; 162: } time_code_sec_hdr_type"ProjectA - TIM - 1530,Build 3.0 OBC Code: Control flows into case/default,4,"Issue: Based upon IV&V verification, the file, ""xbm_inp.c"" line #241, contains a 'case' statement, which is based on an 'enum' type variable named ""TIMED_RAW_INPUT"". No 'break' statement appears before the next case statement. The case statement appears in the function, ""XB_bcp_synch_input"". A call to this function was not traceable to the ProjectA main executive (i.e., the function, ""ProjectAmain""). Therefore, the code possibly represents ""dead code."" FlexeLint Message #616: control flows into case/default FlexeLint Message #616 Description: It is possible for flow of control to fall into a case statement or a default statement from above. Was this deliberate or did the programmer forget to insert a break statement? If this was deliberate then place a comment immediately before the statement that was flagged as in: case 'a': a = 0; /* fall through */ case 'b': a++; Note that the message will not be given for a case that merely follows another case without an intervening statement. Also, there must actually be a possibility for flow to occur from above. Source Code References: File - ../xb/src/xbm_inp.c 213: work_unit *XB_bcp_synch_input(synch_input_channel *c) 241: case TIMED_RAW_INPUT : 242: #if (1) 243: XB_stamp_future((time_code_sec_hdr_type *) 244: (c->packet+WORDS_IN(seds_packet_header_type))); 245: #endif 246: 247: case UNTIMED_RAW_INPUT :"ProjectA - TIM - 1529,Build 3.0 OBC Code: Loss of information from assignment (16 bits to 15 bits) - data_types_pkt.w2,3,"Issue: Based upon IV&V verification, an assignment was made from a constant (0x8642) to an integral variable (data_types_pkt.w2) that is not large enough to hold the constant. data_types_pkt.w2 is defined as type word which is a short integer. FlexeLint Message # 569: Loss of information (assignment) (16 bits to 15 bits) FlexeLint Message # 569 Description: An assignment (or implied assignment, see Context) was made from a constant to an integral variable that is not large enough to hold the constant. Examples include placing a hex constant whose bit requirement is such as to require an unsigned int into a variable typed as int. The number of bits given does not count the sign bit. Source Code References: File - tocmd.c: 390: data_types_pkt.w2 = 0x8642;"ProjectA - TIM - 1528,Build 3.0 OBC Code: Loss of information from assignment (8 bits to 7 bits) - data_types_pkt.b3,3,"Issue: Based upon IV&V verification, the 'signed char' structure member, ""data_types_pkt.b3"", is being assigned the 8 bit HEX value, ""0xE3"". Since a 'signed char' is only capable of holding 8 bits less a sign bit, the variable is not large enough to hold the assigned constant FlexeLint Message # 569: Loss of information (assignment) (8 bits to 7 bits) FlexeLint Message # 569 Description: An assignment (or implied assignment, see Context) was made from a constant to an integral variable that is not large enough to hold the constant. Examples include placing a hex constant whose bit requirement is such as to require an unsigned int into a variable typed as int. The number of bits given does not count the sign bit. Source Code References: File - tocmd.c: 387: data_types_pkt.b3 = 0xE3;"ProjectA - TIM - 1527,Build 3.0 OBC Code: Loss of information from assignment (8 bits to 7 bits) - data_types_pkt.b2,3,"Issue: Based upon IV&V verification, the 'signed char' structure member, ""data_types_pkt.b2"", is being assigned the 8 bit constant value, ""255"". Since a 'signed char' is only capable of holding 8 bits less a sign bit, the variable is not large enough to hold the assigned constant. FlexeLint Message #569: Loss of information (assignment) (8 bits to 7 bits) FlexeLint Message #569 Description: An assignment (or implied assignment, see Context) was made from a constant to an integral variable that is not large enough to hold the constant. Examples include placing a hex constant whose bit requirement is such as to require an unsigned int into a variable typed as int. The number of bits given does not count the sign bit. Source Code References: File - tocmd.c: 386: data_types_pkt.b2 = 255;"ProjectA - TIM - 1526,"Build 3.0 OBC Code: Undefined/Undocumented preprocessor variable ""VERBOSIT""",4,"Issue: Based upon IV&V verification, the file, ""di_cmd.c"", contains two instances where the replacement macro, ""VERBOSITY"", is spelled inconsistently with the other instances of this macro. Lines #1165 and #1192 of ""di_cmd.c"" spell this macro as ""VERBOSIT"". Neither ""VERBOSIT"" nor ""VERBOSITY"" appears to be set via a '#define' statement or within a ""makefile"". In addition, the file, ""sm_58c1001.c"" contains a '#define"" statement for the replacement macro, ""VERBOSITY_LEVEL"". This file uses this macro for conditional compilation of the code. This macro name seems redundant to the previous macro or at least makes the purpose of the two different macros seem ambiguous. FlexeLint Message #553: Undefined preprocessor variable 'VERBOSIT', assumed 0 FlexeLint Message #553 Description: The indicated variable had not previously been defined within a #define statement and yet it is being used in a preprocessor condition of the form #if or #elif. Conventionally all variables in preprocessor expressions should be pre-defined. The value of the variable is assumed to be 0. Source Code References: File - ../di/src/di_cmd.c: 56: #define VERBOSITY 0 /** VERBOSITY LEVEL 0 = NO MESSAGES ***/ 1130: #if VERBOSITY > 0 1143: #if VERBOSITY > 0 1165: #if VERBOSIT > 0 1192: #if VERBOSIT > 0 1331: #if VERBOSITY > 0 1473: #if VERBOSITY > 0 1486: #if VERBOSITY > 0 1504: #if VERBOSITY > 0 1527: #if VERBOSITY > 0 1550: #if VERBOSITY > 0 1656: #if VERBOSITY > 0 1687: #if VERBOSITY > 0 1700: #if VERBOSITY > 0 File - ../sm/src/sm_58c1001.c: 47: * verbosity level 49: * 0 - max verbosity 50: * 1 - min verbosity (print nothing) 52: #ifndef VERBOSITY_LEVEL 53: #define VERBOSITY_LEVEL 2 228: #if (VERBOSITY_LEVEL < 1) 359: #if (VERBOSITY_LEVEL < 1) 428: #if (VERBOSITY_LEVEL < 1)"ProjectA - TIM - 1525,"Build 3.0 OBC Code: Undefined/Undocumented preprocessor variable ""INCLUDE_HAMMING_SPACE_TMR""",4,"Issue: Based upon IV&V verification, the file, ""di_cmd.c"", references the replacement macro, ""INCLUDE_HAMMING_SPACE_TMR"", three times on lines #1150, #1177, and #1204. This macro is used in a '#if' preprocessor directive. No definition of this macro was found in the code or the supporting makefiles/build files. FlexeLint Message #553: Undefined preprocessor variable 'INCLUDE_HAMMING_SPACE_TMR', assumed 0 FlexeLint Message #553 Description: The indicated variable had not previously been defined within a #define statement and yet it is being used in a preprocessor condition of the form #if or #elif. Conventionally all variables in preprocessor expressions should be pre-defined. The value of the variable is assumed to be 0. Source Code References: File - ../di/src/di_cmd.c: 1149: errors = TMRTestMMAddress(address, 0x80000000, MASK_OUT_B | MASK_OUT_C, DATA_SECTION_MODE); 1150:# if (INCLUDE_HAMMING_SPACE_TMR > 0) 1151: errors += TMRTestMMAddress(address, 0x00008000, MASK_OUT_B | MASK_OUT_C, HAMMING_SECTION_MODE); 1152: errors += TMRTestMMAddress(address, 0x80000000, MASK_OUT_B | MASK_OUT_C, HAMMING_SECTION_MODE); 1153:# endif 1176: errors = TMRTestMMAddress(address, 0x80000000, MASK_OUT_A | MASK_OUT_C, DATA_SECTION_MODE); 1177:# if (INCLUDE_HAMMING_SPACE_TMR > 0) 1178: errors += TMRTestMMAddress(address, 0x00008000, MASK_OUT_A | MASK_OUT_C, HAMMING_SECTION_MODE); 1179: errors += TMRTestMMAddress(address, 0x80000000, MASK_OUT_A | MASK_OUT_C, HAMMING_SECTION_MODE); 1180:# endif 1203: errors = TMRTestMMAddress(address, 0x80000000, MASK_OUT_A | MASK_OUT_B, DATA_SECTION_MODE); 1204:# if (INCLUDE_HAMMING_SPACE_TMR > 0) 1205: errors += TMRTestMMAddress(address, 0x00008000, MASK_OUT_A | MASK_OUT_B, HAMMING_SECTION_MODE); 1206: errors += TMRTestMMAddress(address, 0x80000000, MASK_OUT_A | MASK_OUT_B, HAMMING_SECTION_MODE); 1207:# endif"ProjectA - TIM - 1524,"Build 3.0 OBC Code: Undefined/Undocumented preprocessor variable ""SWAP_TMR_REGISTER"", assumed 0",4,"Issue: Based upon IV&V verification, the file, ""di_cmd.c"", references the replacement macro, ""SWAP_TMR_REGISTER"", two times on lines #989 and #1071. This macro is used in a '#if' preprocessor directive. No definition of this macro was found in the code or the supporting makefiles/build files. FlexeLint Message #553: Undefined preprocessor variable 'SWAP_TMR_REGISTER', assumed 0 FlexeLint Message #553 Description: The indicated variable had not previously been defined within a #define statement and yet it is being used in a preprocessor condition of the form #if or #elif. Conventionally all variables in preprocessor expressions should be pre-defined. The value of the variable is assumed to be 0. Source Code References: File - ../di/src/di_cmd.c 2: 989: #if (SWAP_TMR_REGISTER > 0) 990: TMRErrors = Flip(TMRErrors); 991: #endif 1071: #if (SWAP_TMR_REGISTER > 0) 1071: TMRErrors += Flip(MM_TMR_ERRORS_REG); 1071: #else 1071: TMRErrors += MM_TMR_ERRORS_REG; 1071: #endif"ProjectA - TIM - 1523,"Build 3.0 OBC Code: Symbol ""hw_register"" not initialized",4,"Issue: Based upon IV&V verification, the file, ""fdsutils.c"" line #521 sets the value of the structure member, ""os_environment.hw_register"". However, this variable does not appear to be used elsewhere in the code. Additionally, the union, ""hw_register.proc_id"", contains the members, ""temp_byte"" (line #513) and ""proc_id"" (line #514), which are never initialized. ""temp_byte"" appears to not be used elsewhere in the code; and ""proc_id"" appears to be only used for the initialization of the first variable referenced, ""os_environment.hw_register"". FlexeLint Message #530: Symbol 'hw_register' (line 515) not initialized FlexeLint Message #530 Description: An auto variable was used before it was initialized. Source Code References: File - .. /pkts/fdsutils.h: 95: struct os_env_struct 96: { 97: os_status_reg_type hw_register; 98: u_word current_mode ; 99: u_word previous_mode ; 100: u_word warm_cold_flag ; 101: u_word warm_restart_count ; 102: u_word cold_restart_count ; 103: } ; File - ../tc/src/fdsutils.c: 510: struct os_env_struct os_environment ; 511: union 512: { 513: char temp_byte ; 514: os_status_reg_type proc_id ; 515: } hw_register; 517: /* 518: ** Get the processor ID register from the hardware 519: */ 520: /* NEED STATUS BYTE HERE */ 521: os_environment.hw_register = hw_register.proc_id ;"ProjectA - TIM - 1522,"Build 3.0 OBC Code: Apparent data overrun for function ""memset(void *, int, unsigned int)""",4,"Issue: The standard C library function, ""memset"", will fill a block of memory starting at the address specified by the first argument of the function, with the character specified by the second argument, for a number of bytes specified by the third byte. The file, ""s3task.c"" line #670 utilizes this function as follows: memset (&grand_s3_tlm, 0, GRAND_HK_TLM_LNGTH); Based upon IV&V verification, the variable ""grand_s3_tlm"", which is of type ""grand_s3_tlm_fmt"", represents the starting address for the ""memset"" function. The size of the variable type, ""grand_s3_tlm_fmt"" was determined to be 68. The fill character being passed to ""memset"" is ""0"". Then ""GRAND_HK_TLM_LNGTH"", which was calculated to be 148, corresponds to number of bytes to fill with this value. This larger value appears to cause an overrun of the targeted memory buffer by 80 bytes. FlexeLint Message #419: Apparent data overrun for function 'memset(void *, int, unsigned int)', argument 3 (size=448) exceeds argument 1 (size=68) [Reference: file s3task.c: line 670] FlexeLint Message #419 Description: This message is for data transfer functions such as memcpy, strcpy, fgets, etc. when the size indicated by the first cited argument (or arguments) exceeds the size of the buffer area cited by the second. The message may also be issued for user functions via the -function option. Source Code References: File - ../s3/src/s3task.c: 143: grand_s3_tlm_fmt grand_s3_tlm; /* PPC GRaND I/F tlm */ 670: memset (&grand_s3_tlm, 0, GRAND_HK_TLM_LNGTH); File - ../pks/grpkt.h: 71: #define GR_HK_TLM_MAX_SIZE 434 /* packet total 448 max, actual 146 */ 164: /*---------------------------------------------------------------------------- 166: ** struct: grand_hk_tlm_fmt 168: ** purpose: Structure for GRaND Housekeeping telemetry 170: **--------------------------------------------------------------------------*/ 171: typedef struct 172: { 173: seds_packet_header_type hdr ; 174: time_code_sec_hdr_type sec_hdr ; 175: u_byte tlm[ GR_HK_TLM_MAX_SIZE ]; 176: } grand_hk_tlm_fmt ; 177: 178: #define GRAND_HK_TLM_LNGTH sizeof ( grand_hk_tlm_fmt ) Note: determined to be 448 273: /*---------------------------------------------------------------------------- 274: ** 275: ** struct: grand_s3_tlm_fmt 276: ** 277: ** purpose: housekeeping tlm specifically for GRaND PPC interface 278: ** 279: **-------------------------------------------------------------------------- 280: typedef struct 281: { 282: seds_packet_header_type hdr ; 283: time_code_sec_hdr_type sec_hdr ; 284: u_dword total_bytes_read ; /* total bytes read over I/F */ 285: u_dword total_dropped_bytes ;/* bytes dropped in sync search */ 286: u_word sa_pkts ; /* packets of data from SA */ 287: u_word dropped_bytes ; /* bytes dropped since last msg */ 288: u_word cmds_received ; /* commands received from SB */ 289: u_word cmds_rejected ; /* commands rejected from SB */ 290: u_word cmds_sent ; /* commands forwarded */ 291: u_word cmds_sent_error ; /* commands forwarded w/error */ 292: u_word tlm_sent ; /* total tlm packets sent to SB */ 293: u_word tlm_error ; /* tlm packets rejected by SB */ 294: u_word crc_error ; /* tlm packets rejected because of CRC error */ 295: u_word time_sent ; /* time messages sent to GRaND */ 296: u_word time_sent_error ; /* time messages not successfully sent to GRaND */ 297: u_word sa_cmd_count ; /* count of commands to SA */ 298: u_word sa_cmd_rej_count ; /* count of rejected commands */ 299: u_word sa_read_count ; /* count of reads */ 300: u_word sa_send_count ; /* count of pkts sent to SB */ 301: u_word sa_send_error_count ;/* count of pkts sent to SB with errors */ 302: u_word sa_read_data_count ; /* counter for successful reads */ 303: u_word sa_read_error_count ;/* counter for unsuccessful reads */ 304: u_word s3_agent_exec_cnt ; /* loop counter for msgs/reads */ 305: u_word s3_agent_read_entry ;/* counter for start of read */ 306: u_word s3_agent_read_exit ; /* counter for end of read */ 307: } grand_s3_tlm_fmt ; 308: 309: #define GRAND_S3_TLM_LNGTH sizeof ( grand_s3_tlm_fmt) Note: determined to be 68"ProjectA - TIM - 1521,"Build 3.0 OBC Code: Symbol ""get_crc(unsigned char *, unsigned long)"" not previously declared static at line 198",4,"Issue: Based upon IV&V verification, line #198 of the file, ""s3task.c"", declares the prototype for function, ""get_crc"". Line #1543 of this file provides a definition for this function that agrees with its prototype except it has been defined as 'static'. FlexeLint Message #401: symbol 'get_crc(unsigned char *, unsigned long)' not previously declared static at line #198 FlexeLint Message #401 Description: The indicated symbol declared static was previously declared without the static storage class. This is technically a violation of the ANSI standard. Some compilers will accept this situation without complaint and regard the Symbol as static. Source Code References: File - ../s3/src/s3task.c: 198: u_word get_crc(u_byte *p, u_dword byte_count); 1543: static u_word get_crc(u_byte *p, u_dword byte_count)"ProjectA - TIM - 1520,Build 3.0 OBC Code: Function names as place holders only,4,"Issue: Based upon IV&V verification, the following Source Code contains merely placeholders for 3 different functions. At this point in the development cycle, placeholders for functions are not expected. Source Code References: File - xbm_std.c: Line #'s 297 - 330: /* ** Function Abstract ** ** Name: XB_bci_synch ** ** Purpose: */ void XB_bci_synch(void) { } /* ** Function Abstract ** ** Name: XB_bcp_synch ** ** Purpose: ** */ work_unit *XB_bcp_synch(void) { } /* ** Function Abstract ** ** Name: XB_bcd_synch ** ** Purpose: */ void XB_bcd_synch(void) { }"ProjectA - TIM - 1519,"Build 3.0 OBC Code: ""REVISION"" macro const",4,"Issue: Based upon IV&V verification, it appears as though macro 'REVISOIN_LINE' is not referenced within the module in which it is defined. However, upon further analysis, it appears as though ""REVISION_LINE"" is misspelled as ""REVISOIN_LINE"" on line #71. FlexeLint Message # 750: local macro 'REVISOIN_LINE' (line 61, file bumpit.c) not referenced FlexeLint Message # 750 Description: A 'local' macro is one that is not defined in a header file. The macro is not referenced throughout the module in which it is defined. Source Code References: File - bumpit.c: 61: #define REVISOIN_LINE 10 71: for( i=0; i < REVISION_LINE; i++ )"ProjectA - TIM - 1518,Build 3.0 OBC Code: Comment indicates known issues within the code.,4,"Issue: Based upon IV&V verification, the following comment was found within toMPIC0.c on line #274, suggesting this part of the code is immature. /* This is a kluge. Depending on the build, this ISR gets invoked 2-4 times per counter underflow. In order to ensure TA is awakened only one time per underflow, read Timer0's current count register. The most significant bit is toggled with each underflow. */ sysPciRead32 (MPIC_ADDR (MPIC_TIMER0_CUR_CNT_REG), &current); current &= 0x80000000;"ProjectA - TIM - 1517,"Build 3.0 OBC Code: File: ""sc_tbl.c"" Prolog indicates different filename",4,"Issue: Based upon IV&V verification, the following comments are at the beginning of file ""sc_tbl.c"": /* ** File: XSCBUFFR.C ** ** Author: A. Cudmore, NASA/GSFC Code 735.3 ** ** Purpose: This file contains the declarations for all of the tables ** that are dumped and or loaded by the Software Manager ** ** Assumptions and External Effects: ** ** Date Written: 06/14/90 ** ** Modification History: ** MM/DD/YY CR-xxxx F. Last, NASA/GSFC Code 735.3 ** - change description ** ** 02/01/94 A. Cudmore NASA/GSFC Code 735.3 ** - updated buffers for TRMM 3.0 */ /* ** Include Files: */ The file name within the File Prolog does not match the file name ""sc_tbl.c"". Also, according to these comments, the file has not been updated in over 10 years. Considering this erroneous comment data, the integrity of the file is questionable. IV&V also verified this type of issue exists in the following files: ""suLCrc.c"", ""suLdComp.c"", ""suLdSize.c"", and ""suLoadBuilder.c"".."ProjectA - TIM - 1516,Build 3.0 OBC Code: Non-negative quantity cannot be less than zero - 4 instances,3,"Issue: Based upon IV&V verification, packet_ptr->data_set_id is being compared for being <=0. packet_ptr->data_set_id can be equal to 0, but can never be less than 0 since packet_ptr->data_set_id is of type unsigned short which will never be negative. This issue spans 3 additional issues of the same type within ""smpkt.h"", and all 3 issues have been verified. FlexeLint Message # 775: non-negative quantity cannot be less than zero FlexeLint Message # 775 Description: A non-negative quantity is being compared for being <=0. This is a little suspicious since a non-negative quantity can be equal to 0 but never less than 0. The non-negative quantity may be of type unsigned or may have been promoted from an unsigned type or may have been judged not to have a sign by virtue of it having been AND'ed with a quantity known not to have a sign bit an enum that may not be negative, etc. See also Warning 568. Source Code References: File - dsplaybk.c: 1295: if ((packet_ptr->data_set_id <= 0) || (packet_ptr->data_set_id > NUMBER_OF_DATASETS-1)) { Additional instances related to FlexeLint Message #775 and verified by IV&V: 1.) Location: dsplaybk.c (at line 1411 column 58) Message: non-negative quantity cannot be less than zero 2.) Location: dstlm.c (at line 1280 column 44) Message: non-negative quantity cannot be less than zero 3.) Location: xbm_out.c (at line 482 column 43) Message: non-negative quantity cannot be less than zero"ProjectA - TIM - 1515,"Build 3.0 OBC Code: Redundant macro defined identically within ""tids.h"" at same file location - 29 instances",4,"Issue: Based upon IV&V verification, there are no ""#ifndef""s within ""tids.h"". ""tids.h"" is called by more than one file which causes the macro to be defined identically at the same file location creating redundancy. This issue spans 28 additional issues of the same type within tids.h, and all 28 issues have been verified. FlexeLint Message # 760: Redundant macro 'AC_TASK_ID' defined identically at same file location FlexeLint Message # 760 Description: The given macro was defined earlier (location given) in the same way and is hence redundant. Source Code References: File - tids.h: 21: #define AC_TASK_ID 1 Additional instances related to FlexeLint Message #760 and verified by IV&V: 1.) Location: tids.h (at line 22 column 30) Message: Redundant macro 'CI_TASK_ID' defined identically at same file location 2.) Location: tids.h (at line 23 column 30) Message: Redundant macro 'CS_TASK_ID' defined identically at same file location 3.) Location: tids.h (at line 24 column 30) Message: Redundant macro 'DS_TASK_ID' defined identically at same file location 4.) Location: tids.h (at line 25 column 30) Message: Redundant macro 'DI_TASK_ID' defined identically at same file location 5.) Location: tids.h (at line 26 column 30) Message: Redundant macro 'HS_TASK_ID' defined identically at same file location 6.) Location: tids.h (at line 27 column 30) Message: Redundant macro 'IT_TASK_ID' defined identically at same file location 7.) Location: tids.h (at line 28 column 30) Message: Redundant macro 'MS_TASK_ID' defined identically at same file location 8.) Location: tids.h (at line 29 column 29) Message: Redundant macro 'SB_TASK_ID' defined identically at same file location 9.) Location: tids.h (at line 30 column 29) Message: Redundant macro 'SC_TASK_ID' defined identically at same file location 10.) Location: tids.h (at line 31 column 29) Message: Redundant macro 'SM_TASK_ID' defined identically at same file location 11.) Location: tids.h (at line 32 column 29) Message: Redundant macro 'TC_TASK_ID' defined identically at same file location 12.) Location: tids.h (at line 33 column 29) Message: Redundant macro 'TO_TASK_ID' defined identically at same file location 13.) Location: tids.h (at line 34 column 29) Message: Redundant macro 'TS_TASK_ID' defined identically at same file location 14.) Location: tids.h (at line 35 column 29) Message: Redundant macro 'DA_TASK_ID' defined identically at same file location 15.) Location: tids.h (at line 36 column 29) Message: Redundant macro 'XS_TASK_ID' defined identically at same file location 16.) Location: tids.h (at line 37 column 29) Message: Redundant macro 'TP_TASK_ID' defined identically at same file location 17.) Location: tids.h (at line 38 column 29) Message: Redundant macro 'UA_TASK_ID' defined identically at same file location 18.) Location: tids.h (at line 39 column 29) Message: Redundant macro 'XB_TASK_ID' defined identically at same file location 19.) Location: tids.h (at line 40 column 29) Message: Redundant macro 'S1_TASK_ID' defined identically at same file location 20.) Location: tids.h (at line 41 column 29) Message: Redundant macro 'S2_TASK_ID' defined identically at same file location 21.) Location: tids.h (at line 42 column 29) Message: Redundant macro 'S3_TASK_ID' defined identically at same file location 22.) Location: tids.h (at line 43 column 29) Message: Redundant macro 'S4_TASK_ID' defined identically at same file location 23.) Location: tids.h (at line 44 column 29) Message: Redundant macro 'SA_TASK_ID' defined identically at same file location 24.) Location: tids.h (at line 45 column 29) Message: Redundant macro 'AN_TASK_ID' defined identically at same file location 25.) Location: tids.h (at line 46 column 29) Message: Redundant macro 'TA_TASK_ID' defined identically at same file location 26.) Location: tids.h (at line 47 column 29) Message: Redundant macro 'TG_TASK_ID' defined identically at same file location 27.) Location: tids.h (at line 48 column 29) Message: Redundant macro 'VM_TASK_ID' defined identically at same file location 28.) Location: tids.h (at line 49 column 29) Message: Redundant macro 'SYS_MAX_TASKS' defined identically at same file location"ProjectA - TIM - 1514,"Build 3.0 OBC Code: Redundant macro ""EEPROM"" defined identically - 3 instances",4,"Issue: Based upon IV&V verification, the following ""#ifndef"" is within header file ""smpkt.h"" which encompasses the entire file where macros ""EEPROM"", ""RAM"", and ""DRAM"" are defined: #ifndef_SM_PKT_H_ #define _SM_PKT_H_ However, ""EEPROM"", ""RAM"", and ""DRAM"" are also defined within ""smtbl.h"". This allows for the possibility of ""EEPROM"", ""RAM"", and ""DRAM"" to be defined identically, creating redundancy. An example is the fact that sm_tbl.c includes both header files (smtbl.h and smpkt.h). This issue spans 2 additional issues of the same type within ""smpkt.h"", and both issues have been verified. FlexeLint Message # 760: Redundant macro 'EEPROM' defined identically at line #69, file smtbl.h, module accommandattitude.c FlexeLint Message # 760 Description: The given macro was defined earlier (location given) in the same way and is hence redundant. Source Code References: File - smpkt.h: Lines #91-93: #define EEPROM 0x02 #define RAM 0x03 #define DRAM 0x04 File - smtbl.h: Lines #69-71: #define EEPROM 0x02 #define RAM 0x03 #define DRAM 0x04 File - sm_tbl.c: Line #135-137: #include ""smpkt.h"" /* SM task packet definitions */ #include ""scpkt.h"" /* Defines for Stored Commands Table */ #include ""smtbl.h"" /* SM table operations I/F */ Additional instances related to FlexeLint Message #760 and verified by IV&V: 1.) Location: smpkt.h (at line 92 column 33) Message: Redundant macro 'RAM' defined identically at line 70, file smtbl.h, module accommandattitude.c 2.) Location: smpkt.h (at line 93 column 33) Message: Redundant macro 'DRAM' defined identically at line 71, file smtbl.h, module accommandattitude.c"ProjectA - TIM - 1513,"Build 3.0 OBC Code: Redundant macro defined identically within ""sids.h"" at same file location - 184 instances",4,"Issue: Based upon IV&V verification, there appears to be an issue within ""sids.h"" due to the lack of ""#ifndef"" within ""sids.h"". ""sids.h"" is called by more than one file which causes the macro to be defined identically at the same file location creating redundancy. This issue spans 183 additional issues of the same type within sids.h, and all of these issues have been verified. See the attached Excel spreadsheet for a complete listing of the additional instances. FlexeLint Message # 760: Redundant macro 'TLM' defined identically at same file location FlexeLint Message # 760 Description: The given macro was defined earlier (location given) in the same way and is hence redundant. Source Code References: File - sids.h: 13: #define TLM 0"ProjectA - TIM - 1512,Build 3.0 OBC Code: Redundant macro defined identically - 363 instances,4,"Issue: The description for FlexeLint message #760 states that a given macro was defined earlier in the same way and is hence redundant. Based upon IV&V verification, several instances of message #760 were captured by TIM - 1513 and TIM - 1514. These TIMs were found to be one of the following types of issues: #1 Issue type (i.e., like TIM - 1514): #ifndef"" was defined within the header file which encompasses the entire file where the macro is defined. However, a macro contained within the specified file is also defined within another file. #2 Issue type (i.e., like TIM - 1513): The lack of ""#ifndef"" within a header file which is called by more than one file causes the macro to be defined identically at the same file location creating redundancy. There were 362 additional instances of message #760 were identified by FlexeLint; however, none of these were verified by the IV&V team due to time constraints. Presumably, these instances would fall into one of the two previously referenced issue types. See the attached Excel spreadsheet for a complete listing of the additional instances."ProjectA - TIM - 1511,"Build 3.0 OBC Code: Redundant macro ""INCLUDE_TIMESTAMP"" defined identically",4,"Issue: Based upon IV&V verification, the following ""#ifndef"" is within the header file, ""todsshr.h"", which encompasses the entire file where the macro ""UNSEGMENTED_PKT"" is defined: #ifndef _TO_DSS_HR_H_ #define _TO_DSS_HR_H_ However, ""UNSEGMENTED_PKT"" is also defined within ""dipkt.h"" This allows for the possibility of the macro ""UNSEGMENTED_PKT"" to be defined identically, creating redundancy. An example of this possibility is the fact that ""tomain.c"" includes both header files, ""todsshr.h"" and ""hspkt.h"", which includes ""dipkt.h"". FlexeLint Message # 760: Redundant macro 'UNSEGMENTED_PKT' defined identically at same file location FlexeLint Message # 760 Description: The given macro was defined earlier (location given) in the same way and is hence redundant. Source Code References: File - todsshr.h: 114: #define UNSEGMENTED_PKT 3 File - dipkt.h: 222: #define UNSEGMENTED_PKT 3 File - tomain.c: 63: #include ""todsshr.h"" File - tomain.c: 68: #include ""hspkt.h"" File - hspkt.h: 55: #include ""dipkt.h"""ProjectA - TIM - 1510,"Build 3.0 OBC Code: Local declarator ""xprintf"" not referenced",4,"Issue: Based upon IV&V verification, the function 'xprintf()' is declared in a declaration appearing in the module file itself as opposed to a header file, but it wasn't referenced. Also, the comments proceeding the declaration state ""** Prototypes for the functions defined in the Utils assembly language module""; however, the function 'xprintf()' is actually defined in ""xos_vrtl.c"". FlexeLint Message # 752: local declarator 'xprintf()' (line 71, file fdsutils.c) not referenced FlexeLint Message # 752 Description: A 'local' declarator symbol is one declared in a declaration appearing in the module file itself as opposed to a header file. The symbol may have file scope or may have block scope. But it wasn't referenced. Source Code References: File - fdsutils.c: 71: int xprintf ( ) ; File - xos_vrtl.c: 41: int /*DISTANCE*/ xprintf(str, fmt, args, hook)"ProjectA - TIM - 1509,Build 3.0 OBC Code: Local declarators not referenced - 96 instances,4,"Issue: Based upon IV&V verification, a local declarator symbol is declared in a declaration appearing in the module file itself as opposed to a header file, but it wasn't referenced. Some symbols are only declared, and not defined or used. Some symbols are declared and defined but not used. Others are declared and defined, but only used within a comparison statement. This issue spans 95 additional instances of the same issue; however, only 19 of these have been verified. See the attached Excel spreadsheet for a complete listing of the additional instances. FlexeLint Message # 752: local declarator 'DA_task_main(void)' (line 104, file ProjectAmain.c) not referenced FlexeLint Message # 752 Description: A 'local' declarator symbol is one declared in a declaration appearing in the module file itself as opposed to a header file. The symbol may have file scope or may have block scope. But it wasn't referenced. Source Code References: File - ProjectAmain.c: 104: extern void DA_task_main(void);"ProjectA - TIM - 1508,Build 3.0 OBC Code: Local macro not referenced - 31 instances,4,"Issue: Based upon IV&V verification, there are several macros within the OBC FSW which are not referenced within the module in which they are defined. This issue spans 30 additional issues of the same type; however, only 24 of these issues have been verified. FlexeLint Message # 750: local macro 'IO_CARD_ACCESS' (line 64, file di_cmd.c) not referenced FlexeLint Message # 750 Description: A 'local' macro is one that is not defined in a header file. The macro is not referenced throughout the module in which it is defined. Source Code References: File - di_cmd.c: 64: #define IO_CARD_ACCESS(a) (AMBI_0_DPTR((a) & 0x07FFFFFC)) Additional instances related to FlexeLint Message #750 and verified by IV&V: 1.) Location: di_cmd.c (at line 66 column 0) Message: local macro 'DMA_READ' (line 66, file di_cmd.c) not referenced 2.) Location: di_cmd.c (at line 67 column 0) Message: local macro 'DMA_WRITE' (line 67, file di_cmd.c) not referenced 3.) Location: dsgetpvcdu.c (at line 81 column 0) Message: local macro 'eventf_macro' (line 81, file dsgetpvcdu.c) not referenced 4.) Location: itmain.c (at line 54 column 0) Message: local macro 'MM_RAM_BASE_ADDRESS' (line 58, file itmain.c) not referenced 5.) Location: itmain.c (at line 55 column 0) Message: local macro 'MM_RAM_ACCESS' (line 59, file itmain.c) not referenced 6.) Location: s1cmd.c (at line 84 column 0) Message: local macro 'UL_CRIT_PKT_ID' (line 84, file s1cmd.c) not referenced 7.) Location: s1cmd.c (at line 85 column 0) Message: local macro 'UL_CRIT_TLM_LEN' (line 85, file s1cmd.c) not referenced 8.) Location: sbtask.c (at line 114 column 0) Message: local macro '_SP_' (line 114, file sbtask.c) not referenced 9.) Location: sm_util.c (at line 368 column 2) Message: local macro 'SRAM_MAX' ((location not available)) not referenced 10.) Location: ssbli_nm.c (at line 44 column 0) Message: local macro 'DBIT' (line 44, file ssbli_nm.c) not referenced 11.) Location: ssbli_nm.c (at line 45 column 0) Message: local macro 'SET_AID' (line 45, file ssbli_nm.c) not referenced 12.) Location: ssbli_nm.c (at line 46 column 0) Message: local macro 'SET_BIT' (line 46, file ssbli_nm.c) not referenced 13.) Location: ssblstub.c (at line 60 column 0) Message: local macro 'DBIT' (line 60, file ssblstub.c) not referenced 14.) Location: ssblstub.c (at line 61 column 0) Message: local macro 'SET_AID' (line 61, file ssblstub.c) not referenced 15.) Location: ssblstub.c (at line 62 column 0) Message: local macro 'SET_BIT' (line 62, file ssblstub.c) not referenced 16.) Location: ssbsi_nm.c (at line 75 column 0) Message: local macro 'NO_ISRS' (line 75, file ssbsi_nm.c) not referenced 17.) Location: tosquish.c (at line 39 column 0) Message: local macro 'DBIT' (line 39, file tosquish.c) not referenced 18.) Location: tosquish.c (at line 40 column 0) Message: local macro 'SET_AID' (line 40, file tosquish.c) not referenced 19.) Location: ts_limst.c (at line 38 column 0) Message: local macro 'DF_AND' (line 38, file ts_limst.c) not referenced 20.) Location: ts_limst.c (at line 39 column 0) Message: local macro 'DF_OR' (line 39, file ts_limst.c) not referenced 21.) Location: ts_limst.c (at line 40 column 0) Message: local macro 'DF_XOR' (line 40, file ts_limst.c) not referenced 22.) Location: ts_limst.c (at line 41 column 0) Message: local macro 'DF_SEP' (line 41, file ts_limst.c) not referenced 23.) Location: ts_limst.c (at line 43 column 0) Message: local macro 'DF_FOR_TMON_xx' (line 43, file ts_limst.c) not referenced 24.) Location: xbinit.c (at line 117 column 0) Message: local macro 'odd_parity' (line 117, file xbinit.c) not referenced 25.) Location: xbm_inp.c (at line 147 column 0) Message: local macro 'MY_MARK' (line 147, file xbm_inp.c) not referenced 26.) Location: xbpmcif.c (at line 62 column 0) Message: local macro 'PMC_INT_VEC3' (line 62, file xbpmcif.c) not referenced 27.) Location: xbpmcif.c (at line 63 column 0) Message: local macro 'PMC_INT_VEC4' (line 63, file xbpmcif.c) not referenced 28.) Location: xbpmcif.c (at line 531 column 0) Message: local macro 'BYTE_SWAP_32_BIT' ((location not available)) not referenced 29.) Location: xschan.c (at line 149 column 0) Message: local macro 'SA24' (line 149, file xschan.c) not referenced 30.) Location: xschan.c (at line 150 column 0) Message: local macro 'SA25' (line 150, file xschan.c) not referenced"ProjectA - TIM - 1507,Build 3.0 OBC Code: Switch statement has no default - 4 instances,4,"Issue: Based upon IV&V verification, a switch statement has no section labeled ""default"". This issue spans 3 additional instances of this same issue, and all 3 issues have been verified. FlexeLint Message # 744: switch statement has no default FlexeLint Message # 744 Description: A switch statement has no section labeled ""default"". Was this an oversight? It is standard practice in many programming groups to always have a default: case. This can lead to better (and earlier) error detection. One way to suppress this message is by introducing a vacuous default: break; statement. If you think this adds too much overhead to your program, think again. In all cases tested so far, the introduction of this statement added absolutely nothing to the overall length of code. If you accompany the vacuous statement with a suitable comment, your code will at least be more readable. This message is not given if the control expression is an enumerated type. In this case, all enumerated constants are expected to be represented by case statements, else 787 will be issued. Source Code References: File - sm_main.c: Line # 457 - 469: case TO_SEND_NEXT_PKT_FC: switch ( sm_dump_cntrl.dump_type ) { case MEMORY: SM_mem_dump_send ( ( sm_dump_send_fmt * ) &sm_cmd_pkt ) ; break ; case TABLE: SM_tbl_dump_send ( ( sm_dump_send_fmt * ) &sm_cmd_pkt ) ; break ; } /* switch on dump type */ break ; Additional instances related to FlexeLint Message #744 and verified by IV&V: 1.) Location: ts_tlm.c (at line 211 column 3) Message: switch statement has no default 2.) Location: ts_tlm.c (at line 480 column 3) Message: switch statement has no default 3.) Location: xbm_asy.c (at line 267 column 16) Message: switch statement has no default"ProjectA - TIM - 1506,Build 3.0 OBC Code: Possible access of out-of-bounds pointer - 2 instances,2,"Issue: Based upon IV&V verification, file ""tpssenreadsensors.c"" contains an out-of-bounds pointer issue with ""TelemetryArray"". ""ThermalTelemetry.TelemetryArray[ ]"" is defined as having 183 elements. Where the replacement macro, ""PDU_DATA_OFFSET"" is defined as 68. i = 0 during the first iteration of the for loop, and then i = 1 during the second iteration of the for loop. ThermalTelemetry.TelemetryArray[i+PDU_DATA_OFFSET+14+50+45+6] is equal to 183 when i =0. However, ThermalTelemetry.TelemetryArray[i+PDU_DATA_OFFSET+14+50+45+6] is equal to 184 when i =1. Therefore TelemetryArray is out of bounds. There is 1 additional instance of this issue that has been verified. FlexeLint Message # 661: Possible access of out-of-bounds pointer (2 beyond end of data) by operator '[' [Reference: file tpssenreadsensors.c: lines 173, 174] FlexeLint Message # 661 Description: An out-of-bounds pointer may have been accessed. See message 415 for a description of the parameters Integer and String. For example: int a[10]; if( n <= 10 ) a[n] = 0; Here the programmer presumably should have written n<10. This message is similar to messages 415 and 796 but differs from them by the degree of probability. Source Code References: File - tpssenreadsensors.c: 173: for ( i=0; i<2; i++ ) 174: ThermalTelemetry.TelemetryArray[i+PDU_DATA_OFFSET+14+50+45+6]= InputData[i+166] & 0x0fff; Additional instance related to FlexeLint Message #661 and verified by IV&V: 1.) Location: tpssenreadsensors.c (at line 174 column 95) Message: Possible access of out-of-bounds pointer (2 beyond end of data) by operator '[' [Reference: file tpssenreadsensors.c: lines 173, 174]"ProjectA - TIM - 1505,Build 3.0 OBC Code: Constant out of range for operator - 3 instances,3,"Issue: Based upon IV&V verification, a comparison is being made between a char array and a hex value. This issue spans 2 additional instances of this same issue, and both issues have been verified. FlexeLint Message # 650: Constant out of range for operator '==' FlexeLint Message # 650 Description: In a comparison operator or equality test (or implied equality test as for a case statement), a constant operand is not in the range specified by the other operand. For example, if 300 is compared against a char variable, this warning will be issued. Moreover, if char is signed (and 8 bits) you will get this message if you compare against an integer greater than 127. The problem can be fixed with a cast. For example: if( ch == 0xFF ) ... if( (unsigned char) ch == 0xFF ) ... If char is signed (+fcu has not been set) the first receives a warning and can never succeed. The second suppresses the warning and corrects the bug. PC-lint/FlexeLint will take into account the limited precision of some operands such as bit-fields and enumerated types. Also, PC-lint/FlexeLint will take advantage of some computations that limit the precision of an operand. For example, if( (n & 0xFF) >> 4 == 16 ) ... will receive this warning because the left-hand side is limited to 4 bits of precision. Source Code References: File - s3task.c: 153: char GRaND_tlm_buf[GRAND_TLM_BUFF_LENGTH]; 1036: if (GRaND_tlm_buf[GRaND_tlm_buf_process_count] == SYNC_HI) File - grpkt.h: 61: #define SYNC_HI 0xeb Additional instances related to FlexeLint Message #650 and verified by IV&V: 1.) Location: s3task.c (at line 1051 column 62) Message: Constant out of range for operator '==' 2.) Location: totlm.c (at line 785 column 32) Message: Constant out of range for operator '=='"ProjectA - TIM - 1504,Build 3.0 OBC Code: Signed-unsigned mix with relational - 3 instances,3,"Issue: Based upon IV&V verification, there are comparisons within the OBC FSW Code between integers and unsigned integer values. The integer values have the potential to be negative numbers. This is an issue because the promotion of a negative number to unsigned makes the negative number very large and will produce erroneous comparison results within a relational statement. In some instances of the Flexelint message, it can be determined that the unsigned integer value will never be less than zero. However, it is not good programming practice to use an unsigned integer value in these circumstances. This issue spans 2 additional instances of this same issue, and both issues have been verified. FlexeLint Message # 574: Signed-unsigned mix with relational FlexeLint Message # 574 Description: The four relational operators are: > >= < <= One of the operands to a relational operator was signed and the other unsigned; also, the signed quantity could be negative. For example: if( u > n ) ... where u is unsigned and n is signed will elicit this message whereas: if( u > 12 ) ... will not (even though 12 is officially an int it is obvious that it is not negative). It is not a good idea to mix unsigned quantities with signed quantities in any case (a 737 will also be issued) but, with the four relationals, a negative value can produce obscure results. For example, if the conditional: if( n < 0 ) ... is true then the similar appearing: u = 0; if( n < u ) ... is false because the promotion to unsigned makes n very large. To resolve this problem, either cast the integer to unsigned if you know it can never be less than zero or cast the unsigned to an int if you know it can never exceed the maximum int. Source Code References: File - dsmem.c: 484: if ( highest_block_used <= ds_linked_list_table.total_bulk_memory_blocks ) ( where ""highest_block_used"" is integer and ""total_bulk_memory_blocks"" is an unsigned long) Additional instances related to FlexeLint Message #574 and verified by IV&V: 1.) Location: dsmem.c (at line 532 column 82) Message: Signed-unsigned mix with relational 2.) Location: sm_util.c (at line 174 column 105) Message: Signed-unsigned mix with relational"ProjectA - TIM - 1503,Build 3.0 OBC Code: Suspicious cast - 4 instances,3,"Issue: Based upon IV&V verification, the variable ""GRaND_tlm_buf"" is defined as char [2048] and then it is type cast to an unsigned short to perform bitwise operations on it. In order to prevent any inadvertent data manipulations, ""GRaND_tlm_buf"" should be defined as an unsigned char. This issue spans 3 additional issues of the same type, and all 3 of these issues have been verified. FlexeLint Message # 571: Suspicious cast FlexeLint Message # 571 Description: Usually this warning is issued for casts of the form: (unsigned) ch where ch is declared as char and char is signed. Although the cast may appear to prevent sign extension of ch, it does not. Following the normal promotion rules of C, ch is first converted to int, which extends the sign and only then is the quantity cast to unsigned. To suppress sign extension you may use: (unsigned char) ch Otherwise, if sign extension is what you want and you just want to suppress the warning in this instance you may use: (unsigned) (int) ch Although these examples have been given in terms of casting a char they will also be given whenever this cast is made upon a signed quantity whose size is less than the casted type. Examples include signed bit fields (a possibility in the new standard), expressions involving char, and expressions involving short when this type is smaller than int or a direct cast of an int to an unsigned long (if int's is smaller than long). This message is not issued for constants or for expressions involving bit operations. Source Code References: File - s3task.c: 153: char GRaND_tlm_buf[GRAND_TLM_BUFF_LENGTH]; 1087: GRaND_tlm_data_count = ( (u_word) GRaND_tlm_buf[GRaND_tlm_buf_process_count] ) << 8; Additional instances related to FlexeLint Message #571 and verified by IV&V: 1.) Location: s3task.c (at line 1095 column 87) Message: Suspicious cast 2.) Location: s3task.c (at line 1151 column 86) Message: Suspicious cast 3.) Location: s3task.c (at line 1159 column 84) Message: Suspicious cast"ProjectA - TIM - 1502,Build 3.0 OBC Code: Non-negative quantity is never less than zero - 5 instances,3,"Issue: Based upon IV&V verification, a non-negative quantity ""hs_input_cmd_Ptr->argument"" (unsigned short) which is never less than zero is being compared to check for a negative value. If ""hs_input_cmd_Ptr->argument"" has the potential of holding a negative value then the type should be changed to a signed value. If ""hs_input_cmd_Ptr->argument"" can never be negative then the comparison at line #478 of file hs_main.c is not valid. This issue spans 4 additional issues of the same type, and all 4 issues have been verified. FlexeLint Message # 568: non-negative quantity is never less than zero FlexeLint Message # 568 Description: Comparisons of the form: u >= 0 0 <= u u < 0 0 > u are suspicious if u is an unsigned quantity or a quantity judged to be never less then 0. See also message 775. Source Code References: File - hs_main.c: 478: if ( ( hs_input_cmd_Ptr->argument >= 0 ) && ( hs_input_cmd_Ptr->argument <= HS_DIAG_FAST_AND_SLOW_SUPER_PKT ) ) Additional instances related to FlexeLint Message #568 and verified by IV&V: 1.) Location: ts_cmd.c (at line 394 column 35) Message: non-negative quantity is never less than zero 2.) Location: ts_cmd.c (at line 415 column 35) Message: non-negative quantity is never less than zero 3.) Location: ts_cmd.c (at line 429 column 33) Message: non-negative quantity is never less than zero 4.) Location: ts_lim.c (at line 158 column 33) Message: non-negative quantity is never less than zero"ProjectA - TIM - 1501,Build 3.0 OBC Code: External symbols not accessed - 72 instances,4,"Issue: Based upon IV&V verification, external variables were not accessed though the variables were referenced. This issue spans 71 additional issues of the same type; however, only 29 of these issues have been verified. FlexeLint Message # 552: Symbol 'diBadPacketId' (line 84, file di_task.c) not accessed. FlexeLint Message # 552 Description: An external variable was not accessed though the variable was referenced. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Source Code References: File - di_task.c: 84: u_word diBadPacketId; 205: diBadPacketId++; Additional instances related to FlexeLint Message #552 and verified by IV&V: 1.) Location: dpstlmprocessing.c (at line 70 column 0) Message: Symbol 'DpTlmMessage' (line 70, file dpstlmprocessing.c) not accessed 2.) Location: dstlm.c (at line 207 column 0) Message: Symbol 'ds_last_odd_packet_ap_id' (line 207, file dstlm.c) not accessed 3.) Location: event_handling.c (at line 76 column 0) Message: Symbol 'split_ram' (line 76, file event_handling.c) not accessed 4.) Location: hs_main.c (at line 161 column 0) Message: Symbol 'hs_secs_cpu_hogging' (line 161, file hs_main.c) not accessed 5.) Location: hs_sp.c (at line 132 column 0) Message: Symbol 'event_message_cnt' (line 132, file hs_sp.c) not accessed 6.) Location: msmain.c (at line 89 column 0) Message: Symbol 'ms_error_buffer_count' (line 89, file msmain.c) not accessed 7.) Location: s1task.c (at line 89 column 0) Message: Symbol 's1State' (line 89, file s1task.c) not accessed 8.) Location: s2task.c (at line 86 column 0) Message: Symbol 's2State' (line 86, file s2task.c) not accessed 9.) Location: sosglmem.c (at line 119 column 0) Message: Symbol 'di_exit' (line 119, file sosglmem.c) not accessed 10.) Location: sosglmem.c (at line 119 column 0) Message: Symbol 'di_entry' (line 119, file sosglmem.c) not accessed 11.) Location: sosglmem.c (at line 125 column 0) Message: Symbol 'sb_entry' (line 125, file sosglmem.c) not accessed 12.) Location: sosglmem.c (at line 125 column 0) Message: Symbol 'sb_exit' (line 125, file sosglmem.c) not accessed 13.) Location: sosglmem.c (at line 126 column 0) Message: Symbol 'hs_entry' (line 126, file sosglmem.c) not accessed 14.) Location: sosglmem.c (at line 126 column 0) Message: Symbol 'hs_exit' (line 126, file sosglmem.c) not accessed 15.) Location: sosglmem.c (at line 141 column 0) Message: Symbol 'it_exit' (line 141, file sosglmem.c) not accessed 16.) Location: sosglmem.c (at line 142 column 0) Message: Symbol 'ms_exit' (line 142, file sosglmem.c) not accessed 17.) Location: sosglmem.c (at line 142 column 0) Message: Symbol 'ms_entry' (line 142, file sosglmem.c) not accessed 18.) Location: sosglmem.c (at line 147 column 0) Message: Symbol 's1_entry' (line 147, file sosglmem.c) not accessed 19.) Location: sosglmem.c (at line 147 column 0) Message: Symbol 's1_exit' (line 147, file sosglmem.c) not accessed 20.) Location: sosglmem.c (at line 148 column 0) Message: Symbol 's2_exit' (line 148, file sosglmem.c) not accessed 21.) Location: sosglmem.c (at line 148 column 0) Message: Symbol 's2_entry' (line 148, file sosglmem.c) not accessed 22.) Location: sosglmem.c (at line 149 column 0) Message: Symbol 's3_exit' (line 149, file sosglmem.c) not accessed 23.) Location: sosglmem.c (at line 149 column 0) Message: Symbol 's3_entry' (line 149, file sosglmem.c) not accessed 24.) Location: tomain.c (at line 106 column 0) Message: Symbol 'to_entry' (line 106, file tomain.c) not accessed 25.) Location: tomain.c (at line 107 column 0) Message: Symbol 'to_exit' (line 107, file tomain.c) not accessed 26.) Location: totlm.c (at line 118 column 0) Message: Symbol 'pkt_size' (line 118, file totlm.c) not accessed 27.) Location: totlm.c (at line 119 column 0) Message: Symbol 'pkt_seq' (line 119, file totlm.c) not accessed 28.) Location: tpsexetask.c (at line 112 column 0) Message: Symbol 'tp_entry' (line 112, file tpsexetask.c) not accessed 29.) Location: tpsexetask.c (at line 113 column 0) Message: Symbol 'tp_exit' (line 113, file tpsexetask.c) not accessed ---------------Note: The following instances of FlexeLint Message # 552 were not verified by the IV&V Team: 30.) Location: msmain.c (at line 95 column 0) Message: Symbol 'ms_segs_scrubed' (line 95, file msmain.c) not accessed 31.) Location: s2task.c (at line 87 column 0) Message: Symbol 's2firstpass' (line 87, file s2task.c) not accessed 32.) Location: s3task.c (at line 146 column 0) Message: Symbol 's3NbTLmCmd' (line 146, file s3task.c) not accessed 33.) Location: sberror.c (at line 143 column 0) Message: Symbol 'SBstrm_pipe_marker' (line 143, file sberror.c) not accessed 34.) Location: sberror.c (at line 153 column 0) Message: Symbol 'SBinternal_errors' (line 153, file sberror.c) not accessed 35.) Location: shsnmevt.c (at line 18 column 0) Message: Symbol 'hs_event_table' (line 18, file shsnmevt.c) not accessed 36.) Location: sm_main.c (at line 243 column 0) Message: Symbol 'sm_md_words_to_move' (line 243, file sm_main.c) not accessed 37.) Location: sm_main.c (at line 330 column 0) Message: Symbol 'sm_tbl_commit_req_cmd' (line 330, file sm_main.c) not accessed 38.) Location: sosglmem.c (at line 118 column 0) Message: Symbol 'an_exit' (line 118, file sosglmem.c) not accessed 39.) Location: sosglmem.c (at line 128 column 0) Message: Symbol 'sm_exit' (line 128, file sosglmem.c) not accessed 40.) Location: sosglmem.c (at line 128 column 0) Message: Symbol 'sm_entry' (line 128, file sosglmem.c) not accessed 41.) Location: sosglmem.c (at line 133 column 0) Message: Symbol 'cs_entry' (line 133, file sosglmem.c) not accessed 42.) Location: sosglmem.c (at line 133 column 0) Message: Symbol 'cs_exit' (line 133, file sosglmem.c) not accessed 43.) Location: sosglmem.c (at line 134 column 0) Message: Symbol 'ds_entry' (line 134, file sosglmem.c) not accessed 44.) Location: sosglmem.c (at line 134 column 0) Message: Symbol 'ds_exit' (line 134, file sosglmem.c) not accessed 45.) Location: sosglmem.c (at line 135 column 0) Message: Symbol 'sc_exit' (line 135, file sosglmem.c) not accessed 46.) Location: sosglmem.c (at line 135 column 0) Message: Symbol 'sc_entry' (line 135, file sosglmem.c) not accessed 47.) Location: sosglmem.c (at line 141 column 0) Message: Symbol 'it_entry' (line 141, file sosglmem.c) not accessed 48.) Location: sosglmem.c (at line 151 column 0) Message: Symbol 'sa_exec_cnt' (line 151, file sosglmem.c) not accessed 49.) Location: ssbli_nm.c (at line 57 column 0) Message: Symbol 'sb_log_mask_begin' (line 57, file ssbli_nm.c) not accessed 50.) Location: stc_main.c (at line 77 column 0) Message: Symbol 'tc_entry' (line 77, file stc_main.c) not accessed 51.) Location: stc_main.c (at line 78 column 0) Message: Symbol 'tc_exit' (line 78, file stc_main.c) not accessed 52.) Location: tg_task.c (at line 81 column 0) Message: Symbol 'tg10HzTick' (line 81, file tg_task.c) not accessed 53.) Location: tocmd.c (at line 116 column 0) Message: Symbol 'latest_clcw' (line 116, file tocmd.c) not accessed 54.) Location: tomain.c (at line 177 column 0) Message: Symbol 'asma_dump_cntrl_pkt' (line 177, file tomain.c) not accessed 55.) Location: tomain.c (at line 178 column 0) Message: Symbol 'asmb_dump_cntrl_pkt' (line 178, file tomain.c) not accessed 56.) Location: tomain.c (at line 181 column 0) Message: Symbol 'ssmb_dump_cntrl_pkt' (line 181, file tomain.c) not accessed 57.) Location: tomain.c (at line 191 column 0) Message: Symbol 'to_playback_status_pkt' (line 191, file tomain.c) not accessed 58.) Location: tomain.c (at line 192 column 0) Message: Symbol 'one_hz_not_rcvd_debug_var' (line 192, file tomain.c) not accessed 59.) Location: totlm.c (at line 122 column 0) Message: Symbol 'to_last_odd_packet_ap_id' (line 122, file totlm.c) not accessed 60.) Location: totlm.c (at line 139 column 0) Message: Symbol 'events_processed' (line 139, file totlm.c) not accessed 61.) Location: tpsexetask.c (at line 71 column 0) Message: Symbol 'TpInputMessage' (line 71, file tpsexetask.c) not accessed 62.) Location: ts_task.c (at line 186 column 0) Message: Symbol 'ts_entry' (line 186, file ts_task.c) not accessed 63.) Location: ts_task.c (at line 187 column 0) Message: Symbol 'ts_exit' (line 187, file ts_task.c) not accessed 64.) Location: xbbcisr.c (at line 101 column 0) Message: Symbol 'xb_bcrt_crashed' (line 101, file xbbcisr.c) not accessed 65.) Location: xbdebugv.c (at line 20 column 0) Message: Symbol 'unused_wus_count' (line 20, file xbdebugv.c) not accessed 66.) Location: xbdebugv.c (at line 31 column 0) Message: Symbol 'canned_ccsds_output_cnt' (line 31, file xbdebugv.c) not accessed 67.) Location: xbdebugv.c (at line 32 column 0) Message: Symbol 'broadcast_ccsds_output_cnt' (line 32, file xbdebugv.c) not accessed 68.) Location: xbexec.c (at line 236 column 0) Message: Symbol 'xb_goto_chain_last_goto' (line 236, file xbexec.c) not accessed 69.) Location: xbexec.c (at line 237 column 0) Message: Symbol 'xb_goto_chain_RTC_ptr' (line 237, file xbexec.c) not accessed 70.) Location: xbsched.c (at line 70 column 0) Message: Symbol 'xb_terminator_block' (line 70, file xbsched.c) not accessed 71.) Location: xosglmem.h (at line 33 column 0) Message: Symbol 'os_caused_reset' (line 33, file xosglmem.h, module xosmodes.c) not accessed"ProjectA - TIM - 1500,Build 3.0 OBC Code: Local symbols not accessed - 41 instances,4,"Issue: Based upon IV&V verification, there are symbols defined locally in various files within several functions; however, the symbol is not used within the function, except for an assignment statement. This issues spans 40 additional issues of the same type; however, only 2 of these issues have been verified. FlexeLint Message # 550: Symbol 'mode_info' (line 1069) not accessed FlexeLint Message # 550 Description: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Source Code References: File - ms_main.c: 1069: struct os_env_struct mode_info ; 1070: 1071: mode_info = OS_get_environment ( ) ; Additional instances related to FlexeLint Message #550 and verified by IV&V: 1.) Location: cstask.c (at line 1102 column 0) Message: Symbol 'sb_rtn_stat' (line 1084) not accessed 2.) Location: hs_main.c (at line 813 column 0) Message: Symbol 'sb_rtn_stat' (line 740) not accessed ---------------Note: The following instances of FlexeLint Message # 550 were not verified by the IV&V Team: 3.) Location: dpsdepproc.c (at line 372 column 0) Message: Symbol 'Hard_Telemetry' (line 294) not accessed 4.) Location: fdsutils.c (at line 497 column 0) Message: Symbol 'count' (line 487) not accessed 5.) Location: hs_main.c (at line 677 column 0) Message: Symbol 'packet_added' (line 671) not accessed 6.) Location: hs_main.c (at line 941 column 0) Message: Symbol 'sb_rtn_stat' (line 903) not accessed 7.) Location: hs_main.c (at line 1367 column 0) Message: Symbol 'mnemonic' (line 1355) not accessed 8.) Location: itmain.c (at line 496 column 0) Message: Symbol 'test_dword' (line 389) not accessed 9.) Location: lioopint.c (at line 153 column 0) Message: Symbol 'temp' (line 125) not accessed 10.) Location: s1cmd.c (at line 587 column 0) Message: Symbol 'wordCount' (line 172) not accessed 11.) Location: s2cmd.c (at line 629 column 0) Message: Symbol 'ioctlStatus' (line 136) not accessed 12.) Location: s3cmd.c (at line 627 column 0) Message: Symbol 'nextSlot' (line 615) not accessed 13.) Location: s3task.c (at line 547 column 0) Message: Symbol 'msg_status' (line 264) not accessed 14.) Location: s3task.c (at line 950 column 0) Message: Symbol 'q_count' (line 871) not accessed 15.) Location: sbtask.c (at line 215 column 0) Message: Symbol 'ret_status' (line 133) not accessed 16.) Location: sbtask.c (at line 215 column 0) Message: Symbol 'mode_info' (line 135) not accessed 17.) Location: scloads.c (at line 1544 column 0) Message: Symbol 'return_status' (line 1519) not accessed 18.) Location: scrtsrq.c (at line 651 column 0) Message: Symbol 'return_status' (line 620) not accessed 19.) Location: scstats.c (at line 211 column 0) Message: Symbol 'return_status' (line 116) not accessed 20.) Location: sctask.c (at line 474 column 0) Message: Symbol 'init_flag' (line 359) not accessed 21.) Location: sm_main.c (at line 1191 column 0) Message: Symbol 'startup_flag' (line 1066) not accessed 22.) Location: sm_main.c (at line 1248 column 0) Message: Symbol 'sb_rtn_stat' (line 1222) not accessed 23.) Location: sm_main.c (at line 1383 column 0) Message: Symbol 'sb_rtn_stat' (line 1298) not accessed 24.) Location: sm_main.c (at line 1708 column 0) Message: Symbol 'sb_rtn_stat' (line 1661) not accessed 25.) Location: sm_main.c (at line 1828 column 0) Message: Symbol 'sb_rtn_stat' (line 1768) not accessed 26.) Location: sm_mem.c (at line 541 column 0) Message: Symbol 'source_ptr' (line 455) not accessed 27.) Location: sm_mem.c (at line 963 column 0) Message: Symbol 'sb_rtn_stat' (line 828) not accessed 28.) Location: sm_mem.c (at line 1133 column 0) Message: Symbol 'sb_rtn_stat' (line 1001) not accessed 29.) Location: sm_tbl.c (at line 1137 column 0) Message: Symbol 'sb_rtn_stat' (line 1011) not accessed 30.) Location: sm_tbl.c (at line 1289 column 0) Message: Symbol 'sb_rtn_stat' (line 1173) not accessed 31.) Location: sm_tbl.c (at line 1570 column 0) Message: Symbol 'sb_rtn_stat' (line 1338) not accessed 32.) Location: sm_util.c (at line 302 column 0) Message: Symbol 'sb_rtn_stat' (line 286) not accessed 33.) Location: tc_10hz.c (at line 336 column 0) Message: Symbol 'sb_rtn_stat' (line 189) not accessed 34.) Location: tc_1hz.c (at line 224 column 0) Message: Symbol 'sb_rtn_stat' (line 130) not accessed 35.) Location: toMPIC0.c (at line 186 column 0) Message: Symbol 'stat' (line 138) not accessed 36.) Location: ts_task.c (at line 264 column 0) Message: Symbol 'init_type' (line 188) not accessed 37.) Location: xbdebug.c (at line 359 column 0) Message: Symbol 'p_cm' (line 252) not accessed 38.) Location: xbm_inp.c (at line 450 column 8) Message: Symbol 'stat' (line 311) not accessed 39.) Location: xbmain.c (at line 118 column 0) Message: Symbol 'startup' (line 86) not accessed 40.) Location: xbmakewu.c (at line 466 column 6) Message: Symbol 'cmd' (line 377) not accessed"ProjectA - TIM - 1498,Build 3.0 OBC Code: Symbol not subsequently referenced - 126 instances,4,"Issue: Based upon IV&V verification, various symbols are defined locally within several functions across several files. However, any usage of the symbol within each function has been commented out, or is not used at all within the function. This issue spans 125 additional issues of the same type; however, only 18 of these issues have been verified. See the attached Excel spreadsheet for a complete listing of the additional instances. FlexeLint Message # 529: Symbol 'sb_rtn_stat' (line 307) not subsequently referenced FlexeLint Message # 529 Description: The named variable was declared but not referenced in a function. Source Code References: File - cstack.c: 307: SBret_status sb_rtn_stat; 392: /* sb_rtn_stat = SBtask_delay( cs_init_time_out ); */ 433: /* sb_rtn_stat = SBtask_delay( cs_init_time_out ); */"ProjectA - TIM - 1497,Build 3.0 OBC Code: Symbol not accessed - 42 instances,4,"Issue: Based upon IV&V verification, symbol ""Sbret"" is defined locally in several files within several functions; however, any usage of ""Sbret"" has either been commented out due to SPR D100-014, not used at all, or the functions only contain assignment statements. This issue spans 41 additional issues of the same type; however, only 33 of these issues have been verified. FlexeLint Message # 550: Symbol 'SBret' (line 163) not accessed FlexeLint Message # 550 Description: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Source Code References: File - dsdump.c: 163: SBret_status SBret; 174: /* SBret = eventf(DS_TASK_ID, ""SDS500 Dump Events Rejected, Invalid DataSet: %d"", packet_ptr->data_set_id); */ /*D100-014*/ 186: /* SBret = eventf(DS_TASK_ID, ""SDS503 Dump Events Rejected, Dump In Progress""); */ /*D100-014*/ 229: SBret = SBsend_copy(&ds_dump_request_pkt); Additional instances related to FlexeLint Message #550 and verified by IV&V: 1.) Location: dsdump.c (at line 280 column 0) Message: Symbol 'SBret' (line 264) not accessed 2.) Location: dsdump.c (at line 417 column 0) Message: Symbol 'SBret' (line 334) not accessed 3.) Location: dsmain.c (at line 299 column 0) Message: Symbol 'SBret' (line 229) not accessed 4.) Location: dsmain.c (at line 1036 column 0) Message: Symbol 'SBret' (line 913) not accessed 5.) Location: dsmain.c (at line 1413 column 0) Message: Symbol 'SBret' (line 1328) not accessed ---------------Note: Following messages are actually associated with FlexeLint Message #529: 6.) Location: dsmain.c (at line 454 column 0) Message: Symbol 'SBret' (line 362) not subsequently referenced 7.) Location: dsmain.c (at line 881 column 0) Message: Symbol 'SBret' (line 760) not subsequently referenced 8.) Location: dsmem.c (at line 278 column 0) Message: Symbol 'SBret' (line 168) not subsequently referenced 9.) Location: dsmem.c (at line 411 column 0) Message: Symbol 'SBret' (line 376) not subsequently referenced 10.) Location: dsmem.c (at line 553 column 0) Message: Symbol 'SBret' (line 454) not subsequently referenced 11.) Location: dsmem.c (at line 730 column 0) Message: Symbol 'SBret' (line 619) not subsequently referenced 12.) Location: dsmem.c (at line 911 column 0) Message: Symbol 'SBret' (line 788) not subsequently referenced 13.) Location: dsmem.c (at line 1199 column 0) Message: Symbol 'SBret' (line 1066) not subsequently referenced 14.) Location: dsmem.c (at line 1425 column 0) Message: Symbol 'SBret' (line 1267) not subsequently referenced 15.) Location: dsplaybk.c (at line 183 column 0) Message: Symbol 'SBret' (line 143) not subsequently referenced 16.) Location: dsplaybk.c (at line 392 column 0) Message: Symbol 'SBret' (line 243) not subsequently referenced 17.) Location: dsplaybk.c (at line 579 column 0) Message: Symbol 'SBret' (line 538) not subsequently referenced 18.) Location: dsplaybk.c (at line 810 column 0) Message: Symbol 'SBret' (line 717) not subsequently referenced 19.) Location: dsplaybk.c (at line 1066 column 0) Message: Symbol 'SBret' (line 974) not subsequently referenced 20.) Location: dsplaybk.c (at line 1222 column 0) Message: Symbol 'SBret' (line 1128) not subsequently referenced 21.) Location: dsplaybk.c (at line 1347 column 0) Message: Symbol 'SBret' (line 1274) not subsequently referenced 22.) Location: dsplaybk.c (at line 1440 column 0) Message: Symbol 'SBret' (line 1398) not subsequently referenced 23.) Location: dsplaybk.c (at line 1591 column 0) Message: Symbol 'SBret' (line 1499) not subsequently referenced 24.) Location: dsplaybk.c (at line 1848 column 0) Message: Symbol 'SBret' (line 1810) not subsequently referenced 25.) Location: dsplaybk.c (at line 1922 column 0) Message: Symbol 'SBret' (line 1886) not subsequently referenced 26.) Location: dsplaybk.c (at line 1979 column 0) Message: Symbol 'SBret' (line 1962) not subsequently referenced 27.) Location: dsplaybk2.c (at line 278 column 0) Message: Symbol 'SBret' (line 80) not subsequently referenced 28.) Location: dstlm.c (at line 302 column 0) Message: Symbol 'SBret' (line 261) not subsequently referenced 29.) Location: dstlm.c (at line 704 column 0) Message: Symbol 'SBret' (line 666) not subsequently referenced 30.) Location: dstlm.c (at line 1079 column 0) Message: Symbol 'SBret' (line 1005) not subsequently referenced 31.) Location: dstlm.c (at line 1150 column 0) Message: Symbol 'SBret' (line 1119) not subsequently referenced 32.) Location: dstlm.c (at line 1327 column 0) Message: Symbol 'SBret' (line 1273) not subsequently referenced 33.) Location: dsutils.c (at line 320 column 0) Message: Symbol 'SBret' (line 305) not subsequently referenced ---------------Note: The following instances of FlexeLint Message # 550 were not verified by the IV&V Team: 34.) Location: dsmain.c (at line 1482 column 0) Message: Symbol 'SBret' (line 1451) not accessed 35.) Location: dsmain.c (at line 1755 column 0) Message: Symbol 'SBret' (line 1551) not accessed 36.) Location: dsmain.c (at line 1923 column 0) Message: Symbol 'SBret' (line 1800) not accessed 37.) Location: todump.c (at line 427 column 0) Message: Symbol 'SBret' (line 388) not accessed 38.) Location: todump.c (at line 506 column 0) Message: Symbol 'SBret' (line 479) not accessed 39.) Location: toMPIC0.c (at line 298 column 0) Message: Symbol 'SBret' (line 267) not accessed ---------------Note: Following messages are actually associated with FlexeLint Message #529: ---------------Note: The following instances of FlexeLint Message # 529 were not verified by the IV&V Team: 40.) Location: tocmd.c (at line 228 column 0) Message: Symbol 'SBret' (line 165) not subsequently referenced 41.) Location: tocmd.c (at line 300 column 0) Message: Symbol 'SBret' (line 264) not subsequently referenced"ProjectA - TIM - 1496,Build 3.0 OBC Code: Symbol not referenced - 2 instances,4,"Issue: Based upon IV&V verification, the static function ""packet_buffer at line #629 of file xbm_out.c was not referenced in the module after having been declared. The comment ' /* DEL */' is on the declaration line; however, the function itself is not commented out. This same type of issue exists where a static variable was not referenced in the module (static variable ""'command_ptr"" at line #123 of file tamain.c), and was verified by IV&V. FlexeLint Message # 528: Symbol 'packet_buffer' (line 629, file xbm_out.c) not referenced FlexeLint Message # 528 Description: The named static variable or static function was not referenced in the module after having been declared. Source Code References: File - xbm_out.c: 629: static u_word packet_buffer[100]; /* DEL */ File - tamain.c: 123: static command_structure *command_ptr; Additional instance related to FlexeLint Message #528 and verified by IV&V: 1.) Location: tamain.c (at line 123 column 0) Message: Symbol 'command_ptr' (line 123, file tamain.c) not referenced"ProjectA - TIM - 1495,Build 3.0 OBC Code: Symbol previously used as static - 3 instances,4,"Issue: Based upon IV&V verification, the Symbol 'command_ptr' previously used as static (line #123, file tamain.c) is also used as external (line #83, file tocmd.c). Two additional verified instances of this issue also exist between files 'totlm.h' and 'dstlm.c'. FlexeLint Message # 512: Symbol 'command_ptr' previously used as static (line 123, file tamain.c) FlexeLint Message # 512 Description: The Symbol name given is a function name that was declared as static in some other module (the location of that declaration is provided). The use of a name as static in one module and external in another module is legal but suspect. Source Code References: File - tocmd.c: 83: extern command_structure *command_ptr; File - tamain.c: 123: static command_structure *command_ptr; Additional instances related to FlexeLint Message #512 and verified by IV&V: 1.) Location: totlm.h (at line 89 column 67) Message: Symbol 'DS_get_filter_time' previously used as static (line 1758, file dstlm.c) 2.) Location: totlm.h (at line 92 column 29) Message: Symbol 'DS_abs' previously used as static (line 1800, file dstlm.c)"ProjectA - TIM - 1494,Build 3.0 OBC Code: Too many arguments for prototype - 11 instances,4,"Issue: Based upon IV&V verification, there is a call to a function that is merely a place holder for the function. The call to the function includes one parameter; however, the function definition does not contain any parameters. There are 11 instances of this issue within event_handling.c, and all 11 issues have been verified. FlexeLint Message # 119: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' FlexeLint Message # 119 Description: The number of arguments provided for a function was greater than the number indicated by a prototype in scope. Source Code References: File - event_handling.c line: 254: Uplink_Send_Event ( &dpkt1 ); File - event_handling.c: 114: void Uplink_Send_Event() 115: { 116: /* Local Variables */ 117: 118: /* Code */ 119: 120: return; 121: } Additional instances related to FlexeLint Message #119 and verified by IV&V: 1.) Location: event_handling.c (at line 274 column 35) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 2.) Location: event_handling.c (at line 295 column 35) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 3.) Location: event_handling.c (at line 317 column 35) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 4.) Location: event_handling.c (at line 332 column 34) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 5.) Location: event_handling.c (at line 477 column 36) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 6.) Location: event_handling.c (at line 496 column 38) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 7.) Location: event_handling.c (at line 516 column 38) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 8.) Location: event_handling.c (at line 537 column 38) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 9.) Location: event_handling.c (at line 559 column 38) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)' 10.) Location: event_handling.c (at line 577 column 34) Message: Too many arguments (1) for prototype 'Uplink_Send_Event(void)'"ProjectA - TIM - 1493,Build 3.0 OBC Code: Vacuous type for variable - 2 instances,4,"Issue: Based upon IV&V verification, variable ""ats_cmd_status_index_table_size"" was defined as a 'volatile void' variable in ""scglmem.c"" at line #55 without any apparent reason. Variable ""ats_cmd_status_index_table_size"" is never used anywhere within the code. This same issue also exists at line #123 of ""scglmem.c"" for the variable, ""rts_info_table_size"". FlexeLint Message # 43: Vacuous type for variable 'ats_cmd_status_index_table_size' FlexeLint Message # 43 Description: A vacuous type was found such as the void type in a context that expected substance. Source Code References: File - scglmem.c: 55: volatile void ats_cmd_status_index_table_size; 123: volatile void rts_info_table_size;"ProjectA - TIM - 1492,"Build 3.0 OBC Code: Enum constant ""ac_mode_::TargetAttSteering"" not used within defaulted switch - case #3",2,"Issue: Based upon IV&V verification, the switch expression ""switch ( pAcGlobal->Mode )"" is an enumerated type and the enumerated constant ""TargetAttSteering"" was not present as a case label in the function ""AC_VerifyError"" of the file ""acverifyerror.c"". The control error may need to be verified for the mode ""TargetAttSteering"". FlexeLint Message #788: enum constant 'ac_mode_::TargetAttSteering' not used within defaulted switch FlexeLint Message #788 Description: A switch expression is An enumerated type and at least one of the enumerated constants was not present as a case label. However, unlike Info 787, a default case was provided. This is a mild form of the case reported by Info 787. The user may thus elect to inhibit this mild form while retaining Info 787. Source Code References: File - acverifyerror.c: 77: switch ( pAcGlobal->Mode )"ProjectA - TIM - 1491,"Build 3.0 OBC Code: Enum constant ""ac_mode_::TargetAttSteering"" not used within defaulted switch - case #2",2,"Issue: Based upon IV&V verification, the switch expression ""switch ( pAcGlobal->Mode )"" is an enumerated type and the enumerated constant ""TargetAttSteering"" was not present as a case label in the function ""AC_ControlError"" of the file ""accontrolerror.c"". The control error may need to be calculated for the mode ""TargetAttSteering"". FlexeLint Message #788: enum constant 'ac_mode_::TargetAttSteering' not used within defaulted switch FlexeLint Message #788 Description: A switch expression is An enumerated type and at least one of the enumerated constants was not present as a case label. However, unlike Info 787, a default case was provided. This is a mild form of the case reported by Info 787. The user may thus elect to inhibit this mild form while retaining Info 787. Source Code References: File - accontrolerror.c: 110: switch ( pAcGlobal->Mode )"ProjectA - TIM - 1490,"Build 3.0 OBC Code: Enum constant ""ac_mode_::TargetAttSteering"" not used within defaulted switch - case #1",2,"Issue: Based upon IV&V verification, the switch expression ""switch ( pAcGlobal->Mode )"" is an enumerated type and the enumerated constant ""TargetAttSteering"" was not present as a case label in the function ""AC_CommandAttitude"" of the file ""accommandattitude.c"". The attitude command may need to be calculated for the mode ""TargetAttSteering"". FlexeLint Message #788: enum constant 'ac_mode_::TargetAttSteering' not used within defaulted switch FlexeLint Message #788 Description: A switch expression is An enumerated type and at least one of the enumerated constants was not present as a case label. However, unlike Info 787, a default case was provided. This is a mild form of the case reported by Info 787. The user may thus elect to inhibit this mild form while retaining Info 787. Source Code References: File - accommandattitude.c: 91: switch ( pAcGlobal->Mode )"ProjectA - TIM - 1489,"Build 3.0 OBC Code: Too few initializers for ""EnableRwaTorqueMix""",2,"Issue: Based upon IV&V verification, the initialization data for ""EnableRwaTorqueMix"" in the file ""acjettable.c"" is only for 9 ACS modes, but ""EnableRwaTorqueMix"" is defined for 10 ACS modes in the file ""acjettable.h"". FlexeLint Message #785: Too few initializers for aggregate 'unknown-name' FlexeLint Message #785 Description: The number of initializers in a brace-enclosed initializer was less than the number of items in the aggregate. Default initialization is taken. An exception is made with the initializer {0}. This is given a separate message number in the Elective Note category ( 943). It is normally considered to be simply a stylized way of initializing all members to 0. Source Code References: File - acjettable.h: 38: u_word EnableRwaTorqueMix[NUM_SC_CFG][NUM_AC_MODE]; /* Flag To Enable RWA Torque Mixing, ND */ File - acjettable.c: 66: {{ FALSE, FALSE, FALSE, FALSE, FALSE, FALSE ,FALSE, FALSE, FALSE }, /* Stowed */ 67: { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE ,FALSE, FALSE, FALSE }, /* Deploying */ 68: { TRUE, FALSE, TRUE, FALSE, FALSE, FALSE ,TRUE, FALSE, FALSE }}, /* Deployed */"ProjectA - TIM - 1488,"Build 3.0 OBC Code: Testing floats for equality in function ""AC_SlewSetUp""",3,"Issue: Based upon IV&V verification, line #104 of the file, ""acslewsetup.c"" within the function, ""AC_SlewSetUp"", is testing floats for equality. Round-off problems could cause erroneous inequalities. FlexeLint Message #777: Testing floats for equality FlexeLint Message #777 Description: This message is issued when the operands of operators == and != are some form of floating type (float, double, or long double). Testing for equality between two floating point quantities is suspect because of round-off error and the lack of perfect representation of fractions. If your numerical algorithm calls for such testing turn the message off. The message is suppressed when one of the operands can be represented exactly, such as 0 or 13.5. Source Code References: File - acslewsetup.c: 104: if ( OmegaMax == AcSlewTable.OmegaMaxLmt ) /* Has the maximum slew rate been commanded */"ProjectA - TIM - 1487,"Build 3.0 OBC Code: Testing floats for equality in function ""AC_Navigate""",3,"Issue: Based upon IV&V verification, line #221 of the file, ""ac_navigate.c"" within the function, ""AC_Navigate"", is testing floats for equality. Round-off problems could cause erroneous inequalities. FlexeLint Message #777: Testing floats for equality FlexeLint Message #777 Description: This message is issued when the operands of operators == and != are some form of floating type (float, double, or long double). Testing for equality between two floating point quantities is suspect because of round-off error and the lack of perfect representation of fractions. If your numerical algorithm calls for such testing turn the message off. The message is suppressed when one of the operands can be represented exactly, such as 0 or 13.5. Source Code References: File - ac_navigate.c: 221: if (pEph->BodyPosInr[j].v[i] != pEph->OrbitBodyPosInr.v[i])"ProjectA - TIM - 1486,"Build 3.0 OBC Code: Testing floats for equality in function ""SpeedControl""",3,"Issue: Based upon IV&V verification, line #488 of the file, ""accommandrwa.c"" within the function, ""SpeedControl"", is testing floats for equality. Round-off problems could cause erroneous inequalities. FlexeLint Message #777: Testing floats for equality FlexeLint Message #777 Description: This message is issued when the operands of operators == and != are some form of floating type (float, double, or long double). Testing for equality between two floating point quantities is suspect because of round-off error and the lack of perfect representation of fractions. If your numerical algorithm calls for such testing turn the message off. The message is suppressed when one of the operands can be represented exactly, such as 0 or 13.5. Source Code References: File - accommandrwa.c: 488: if (SpeedCmdOld[i] != pRwa->SpeedCmd[i])"ProjectA - TIM - 1485,"Build 3.0 OBC Code: Symbol ""SunOccultationOld"" not explicitly initialized",3,"Issue: Based upon IV&V verification, the variable ""SunOccultationOld"" is used before it is assigned a value in the function ""AC_ProcessSTAOccCheck"" of the file ""acprocesssta.c"". FlexeLint Message #727: Symbol 'SunOccultationOld' (line 483) not explicitly initialized FlexeLint Message #727 Description: The named static variable (local to a function) was not explicitly initialized before use. By no explicit initialization we mean that there was no initializer present in the definition of the object, no direct assignment to the object, and no address operator applied to the object or, if the address of the object was taken, it was assigned to a pointer to const. These messages do not necessarily signal errors since the implicit initialization for static variables is 0. However, the messages are helpful in indicating those variables that you had forgotten to initialize to a value. To extract the maximum benefit from the messages we suggest that you employ an explicit initializer for those variables that you want to initialize to 0. For example: static int n = 0; For variables that will be initialized dynamically, do not use an explicit initializer as in: static int m; This message will be given for any array, struct or union if no member or element has been assigned a value. Source Code References: File - acprocesssta.c: 550: if ( pSta->SunOccultation != SunOccultationOld[pSta->StaID] )"ProjectA - TIM - 1484,"Build 3.0 OBC Code: Symbol ""BodyOccultationOld"" not explicitly initialized",3,"Issue: Based upon IV&V verification, the variable ""BodyOccultationOld"" is used before it is assigned a value in the function ""AC_ProcessSTAOccCheck"" of the file ""acprocesssta.c"". FlexeLint Message #727: Symbol 'BodyOccultationOld' (line 482) not explicitly initialized FlexeLint Message #727 Description: The named static variable (local to a function) was not explicitly initialized before use. By no explicit initialization we mean that there was no initializer present in the definition of the object, no direct assignment to the object, and no address operator applied to the object or, if the address of the object was taken, it was assigned to a pointer to const. These messages do not necessarily signal errors since the implicit initialization for static variables is 0. However, the messages are helpful in indicating those variables that you had forgotten to initialize to a value. To extract the maximum benefit from the messages we suggest that you employ an explicit initializer for those variables that you want to initialize to 0. For example: static int n = 0; For variables that will be initialized dynamically, do not use an explicit initializer as in: static int m; This message will be given for any array, struct or union if no member or element has been assigned a value. Source Code References: File - acprocesssta.c: 516: if ( pSta->BodyOccultation[i] != BodyOccultationOld[i][pSta->StaID] )"ProjectA - TIM - 1483,"Build 3.0 OBC Code: Symbol ""AC_CommandEngineInit"" undeclared",2,"Issue: Based upon IV&V verification, function ""AC_CommandEngineInit"" is not declared; however, it is used in the function ""AC_Init"" of the file ""acinit.c"". The function should be declared in acglobal.h. FlexeLint Message #718: Symbol 'AC_CommandEngineInit(struct ac_global_ *)' undeclared, assumed to return int FlexeLint Message #718 Description: A function was referenced without (or before) it had been declared or defined within the current module. This is not necessarily an error and you may want to suppress such messages. Note that by adding a declaration to another module, you will not suppress this message. It can only be suppressed by placing a declaration within the module being processed. Source Code References: File - acinit.c: 158: AC_CommandEngineInit ( pAcGlobal );"ProjectA - TIM - 1482,"Build 3.0 OBC Code: Symbol ""AC_CommandEngineSequencer"" undeclared",2,"Issue: Based upon IV&V verification, function ""AC_CommandEngineSequencer"" is not declared; however, it is used in the function ""AC_GenerateCommands"" of the file ""acgeneratecommands.c"". The function should be declared in acglobal.h. FlexeLint Message #718: Symbol 'AC_CommandEngineSequencer(struct ac_global_ *)' undeclared, assumed to return int FlexeLint Message #718 Description: A function was referenced without (or before) it had been declared or defined within the current module. This is not necessarily an error and you may want to suppress such messages. Note that by adding a declaration to another module, you will not suppress this message. It can only be suppressed by placing a declaration within the module being processed. Source Code References: File - acgeneratecommands.c: 256: AC_CommandEngineSequencer( pAcGlobal );"ProjectA - TIM - 1481,"Build 3.0 OBC Code: Symbol ""ClearFlag"" undeclared",2,"Issue: Based upon IV&V verification, function ""ClearFlag"" is not declared; however, it is used in the function ""AC_GenerateCommands"" of the file ""acgeneratecommands.c"". The file should '#include' the header file, ""auproto.h"", at the beginning of the file, which includes the function prototype for ""ClearFlag.h"". FlexeLint Message #718: Symbol 'ClearFlag(unsigned short *, unsigned short)' undeclared, assumed to return int FlexeLint Message #718 Description: A function was referenced without (or before) it had been declared or defined within the current module. This is not necessarily an error and you may want to suppress such messages. Note that by adding a declaration to another module, you will not suppress this message. It can only be suppressed by placing a declaration within the module being processed. Source Code References: File - acgeneratecommands.c: 182: ClearFlag ((u_word*)&AceBoxCmd.Command.THRCmd.Enable, (u_word)(i));"ProjectA - TIM - 1480,Build 3.0 OBC Code: Possible access of out-of-bounds pointer - case #2,2,"Issue: Based upon IV&V verification, code in line 699 seems wrong. It should be ""pAttitude->DeltaThetaMesBdy.v[j] = 0.5 * DeltaQ.q[j];"" in stead of ""pAttitude->DeltaThetaMesBdy.v[i] = 0.5 * DeltaQ.q[i];"" in the file ""admain.c"". FlexeLint Message #661: Possible access of out-of-bounds pointer (1 beyond end of data) by operator '[' [Reference: file admain.c: lines 696, 699] FlexeLint Message #661 Description: An out-of-bounds pointer may have been accessed. For example: int a[10]; if( n <= 10 ) a[n] = 0; Here the programmer presumably should have written n<10. Source Code References: File - admain.c: 685: if ( pSta[0]->DataValid == VALID ) 686: { 687: i |= 0x01; 688: Status1 = QoQ ( pSta[0]->QInrToStaPrp, AcStaTable.QBdyToSta[0], A_BI, & QInrToBdy1 ); 689: for ( j = 0; j < 4; j++ ) 690: pAcGlobal->Attitude.QInrToBdyEst.q[j] = QInrToBdy1.q[j]; 691: } 692: if ( pSta[1]->DataValid == VALID ) 693: { 694: i |= 0x02; 695: Status1 = QoQ ( pSta[1]->QInrToStaPrp, AcStaTable.QBdyToSta[1], A_BI, & QInrToBdy2 ); 696: if ( i > 2 ) { 697: Status2 = QoQ ( QInrToBdy1, QInrToBdy2, AI_B, & DeltaQ ); 698: for ( j = 0; j < 3; j++ ) 699: : pAttitude->DeltaThetaMesBdy.v[i] = 0.5 * DeltaQ.q[i]; 700: Status2 = Qupdate( pAttitude->QInrToBdyEst, pAttitude->DeltaThetaMesBdy, 701: & pAttitude->QInrToBdyEst, QUPDATE_ANGLE_AXIS ); 702: } 703: else 704: { 705: for ( j = 0; j < 4; j++ ) 706: : pAcGlobal->Attitude.QInrToBdyEst.q[j] = QInrToBdy2.q[j]; 707: } 708: }"ProjectA - TIM - 1479,Build 3.0 OBC Code: Possible access of out-of-bounds pointer - case #1,2,"Issue: Based upon IV&V verification, v[i] and q[i] should be v[j] and q[j] in line #288 in the file ""acpropagateattitude.c"". FlexeLint Message #661: Possible access of out-of-bounds pointer (1 beyond end of data) by operator '[' [Reference: file acpropagateattitude.c: lines 285, 288] FlexeLint Message #661 Description: An out-of-bounds pointer may have been accessed. For example: int a[10]; if( n <= 10 ) a[n] = 0; Here the programmer presumably should have written n<10. Source Code References: File - acpropagateattitude.c: 281: if ( pSta[1]->DataValid == VALID ) 282: { 283: i |= 0x02; 284: Status1 = QoQ ( pSta[1]->QInrToStaPrp, AcStaTable.QBdyToSta[1], A_BI, & QInrToBdy2 ); 285: if ( i > 2 ) { 286: Status2 = QoQ ( QInrToBdy1, QInrToBdy2, AI_B, & DeltaQ ); 287: for ( j = 0; j < 3; j++ ) 288: : pAttitude->DeltaThetaMesBdy.v[i] = 0.5 * DeltaQ.q[i]; 289: Status2 = Qupdate( pAttitude->QInrToBdyEst, pAttitude->DeltaThetaMesBdy, 290: & pAttitude->QInrToBdyEst, QUPDATE_ANGLE_AXIS ); 291: } 292: else 293: { 294: for ( j = 0; j < 4; j++ ) 295: : pAcGlobal->Attitude.QInrToBdyEst.q[j] = QInrToBdy2.q[j]; 296: }"ProjectA - TIM - 1478,"Build 3.0 OBC Code: Variable ""tbl_ready"" not initialized",3,"Issue: Based upon IV&V verification, if tbl_ptr->new_tbl is not equal to 1, the variable ""tbl_ready"" (line #404) will be used before it is assigned a value in the function ""an_table_check"" of the file ""AN_Tbl_Manager.C"". Also, It seems that the function ""an_table_check"" is not complete. FlexeLint Message #644: Variable 'tbl_ready' (line 404) may not have been initialized FlexeLint Message #644 Description: An auto variable was not necessarily assigned A value before use. Source Code References: File - an_tbl_manager.c: 404: u_word tbl_ready, i; 405: 406: if ( tbl_ptr->new_tbl == 1 ) 407: { 408: /* 409: ** Try not to go through the for loop every cycle 410: ** when the new table is not ready to copy yet ... 411: */ 412: if (tbl_ptr->wk_tbl_status[tbl_ptr->tbl_num-1].ready_to_copy == 1) 413: { 414: tbl_ready = 1; 415: for ( i=0; i < tbl_ptr->tbl_num; i++ ) 416: { 417: if (tbl_ptr->wk_tbl_status[i].ready_to_copy == 0) 418: tbl_ready = 0; 419: } 420: } 421: 422: /* Check the continuity check flag */ 423: if ( tbl_ptr->cont_check == 1 ) 424: { 425: /* Read the first set of data from the load table */ 426: 427: /* Read the last set of data from the work table */ 428: 429: /* If the continuity check failed, inform ground */ 430: 431: } 432: } 433: return (tbl_ready);"ProjectA - TIM - 1477,"Build 3.0 OBC Code: Variable ""QInrToBdy1"" not initialized",3,"Issue: Based upon IV&V verification, the variable ""QInrToBdy1"" (line #669) will be used before it is assigned a value in the function ""Ac_Ad_InitQ"" of the file ""admain.c"" if pSta[0]->DataValid is not equal to VALID and pSta[1]->DataValid is equal to VALID. FlexeLint Message #644: Variable 'QInrToBdy1' (line 669) may not have been initialized FlexeLint Message #644 Description: An auto variable was not necessarily assigned A value before use. Source Code References: File - admain.c: 669: quaternion_type QInrToBdy1, QInrToBdy2, DeltaQ; 697: Status2 = QoQ ( QInrToBdy1, QInrToBdy2, AI_B, & DeltaQ );"ProjectA - TIM - 1476,"Build 3.0 OBC Code: Variable ""QVtoV"" not initialized",2,"Issue: Based upon IV&V verification, variable 'QVtoV' in the function ""AC_ComputeQInrToBdyCmd"" of the file ""acprocesscommands.c"" is not initialized if the variable, ""TgtEstAngle"", at line #1342 is less than AcEphTable.PowerSteerVPrecision. Use of QVtoV at line #1362 in this case may cause unpredictable result. FlexeLint Message #644: Variable 'QVtoV' (line 1322) may not have been initialized FlexeLint Message #644 Description: An auto variable was not necessarily assigned A value before use. Source Code References: File - acprocesscommands.c: 1331: if ( TgtEstAngle < AcEphTable.PowerSteerVPrecision ): 1332: {: 1333: /*: 1334: ** Anti-parallel: Rotate about any axis perpendicular to target 1335: */ 1336: for ( i=0; i<3; i++ ) SpinAxisV.v[i] = 0.0; 1337: SpinAxisV.v[1] = 1.0; 1338: 1339: VoV ( & pAcGlobal->Control.GndCmd.InertialTgtVBdy, & SpinAxisV, & TgtEstAngle );: 1340: TgtEstAngle = 1.0 - SQR(TgtEstAngle); 1341: 1342: if ( TgtEstAngle >= AcEphTable.PowerSteerVPrecision ): 1343: { 1344: VxV ( pAcGlobal->Control.GndCmd.InertialTgtVBdy, TgtEstBdy, & TempV ); 1345: for ( i=0; i<3; i++ ) 1346: QVtoV.q[i] = TempV.v[i]/sqrt(TgtEstAngle); 1347: QVtoV.q[3] = 0.0; 1348: }: 1349: else: 1350: { 1351: /* SAD axis and target are parallel */ 1352: return_status = 1; /*error*/ 1353: } 1354: }: 1355: else: 1356: {: 1357: QVtoV.q[3] = sqrt(TgtEstAngle/2.0); 1358: VxV ( pAcGlobal->Control.GndCmd.InertialTgtVBdy, TgtEstBdy, & TempV ); 1359: for ( i=0; i<3; i++ ) 1360: QVtoV.q[i] = TempV.v[i]/2.0/QVtoV.q[3]; 1361: }: 1362: QoQ ( pAcGlobal->Attitude.QInrToBdyEst, QVtoV, A_B, & pAcGlobal->Control.GndCmd.QInrToBdy ); : 1363: return( return_status );:"ProjectA - TIM - 1475,"Build 3.0 OBC Code: Variable ""return_status"" not initialized",2,"Issue: Based upon IV&V verification, it is possible that variable ""return_status"" is not initialized. The code for the 'else' statement on line #1301 of the file, ""acprocesscommands.c"", is not finished according to a comment on line #1306 of the function ""AC_PowerSteer"" of the file. FlexeLint Message #644: Variable 'return_status' (line 1180) may not have been initialized FlexeLint Message #644 Description: An auto variable was not necessarily assigned A value before use. Source Code References: File - acprocesscommands.c: 1301: else 1302: { 1303: /* 1304: ** Select roatation about target vector ... 1305: */ 1306: /* codes here will be added later */ 1307: } 1309: return (return_status);"ProjectA - TIM - 1474,"Build 3.0 OBC Code: Variable ""d2_lo"" not initialized",2,"Issue: Based upon IV&V verification, the variable d2_lo is not initialized before used in line #1276 in the function ""AC_PowerSteer"" of the file ""acprocesscommands.c"" when ""fabs(Temp_b)"" is greater than or equal to ""AcEphTable.PowerSteerVPrecision"". FlexeLint Message #644: Variable 'd2_lo' (line 1176) may not have been initialized FlexeLint Message #644 Description: An auto variable was not necessarily assigned A value before use. Source Code References: File - acprocesscommands.c: 1176: real_type Temp_a, Temp_b, Temp_c, d2, d2_hi, d2_lo, Temp_number, Nd2; 1274: if ((d2 >= 0.0 && d2 <= 1.0) || 1275: (d2_hi >= 0.0 && d2_hi <= 1.0) || 1276: (d2_lo >= 0.0 && d2_lo <= 1.0))"ProjectA - TIM - 1473,"Build 3.0 OBC Code: Variable ""d2_hi"" not initialized",2,"Issue: Based upon IV&V verification, the variable ""d2_hi"" is not initialized before being used in line #1275 in the function ""AC_PowerSteer"" of the file ""acprocesscommands.c"", when ""fabs(Temp_b)"" is equal to or greater than ""AcEphTable.PowerSteerVPrecision"". FlexeLint Message #644: Variable 'd2_hi' (line 1176) may not have been initialized FlexeLint Message #644 Description: An auto variable was not necessarily assigned A value before use. Source Code References: File - acprocesscommands.c: 1176: real_type Temp_a, Temp_b, Temp_c, d2, d2_hi, d2_lo, Temp_number, Nd2; 1274: if ((d2 >= 0.0 && d2 <= 1.0) || 1275: (d2_hi >= 0.0 && d2_hi <= 1.0) || 1276: (d2_lo >= 0.0 && d2_lo <= 1.0))"ProjectA - TIM - 1472,"Build 3.0 OBC Code: Variable ""Nfact"" not have been initialized",3,"Issue: Based upon IV&V verification, the variable ""Nfact"" (line #141) will be used before it is assigned a value in the function ""AC_CommandJet"" of the file ""AcCommandJet.c"" if pMom->GndCmd.Packed.EnableMomentAdj is equal to TRUE. FlexeLint Message #644: Variable 'Nfact' (line 70) may not have been initialized FlexeLint Message #644 Description: An auto variable was not necessarily assigned A value before use. Source Code References: File - AcCommandJet.c: 70: real_type ThrustRatio, Nfact; 114: if ( pMom->GndCmd.Packed.EnableMomentAdj == TRUE ) /* jets used for momentum unload only */ 115: { 116: for ( i = 0; i < 3; i++ ) 117: pJet->TorqueCmd.v[i] = pMom->TorqueCmdBdy.v[i]; 118: } 119: else /* 1 or 3 axis jet control, possibly with delta v */ 120: { 121: for ( i = 0; i < 3; i++ ) 122: pJet->TorqueCmd.v[i] = pControl->TorqueCmdJetBdy.v[i]; 123: /* 124: ** Normalize the torque demand for 2 second thruster period 125: */ 126: Nfact = pJet->GndCmd.JetPulsePeriod / 2.0; 127: VSCALEM( Nfact, pJet->TorqueCmd, pJet->TorqueCmd ); 128: if ( pEngine->Select[0].Use == 0 && pEngine->Select[1].Use == 0 && pEngine->Select[2].Use == 0 ) 129: { 130: /* 131: ** Gain boost if required for 3 axis control cases only 132: */ 133: : y_only = AC_JetGainBoost ( pAcGlobal, pJet, &ThrustRatio ); 134: } 135: if ( fabs(Nfact) > 0.0 ) 136: VSCALEM( 1./Nfact, pJet->TorqueCmd, pJet->TorqueCmd ); 137: } 138: /* 139: ** Compute Jet Pulse Widths For Given Torque Demand ... 140: */ 141: if ( y_only && fabs(pJet->TorqueCmd.v[1]*Nfact) < .03 * ThrustRatio )"ProjectA - TIM - 1471,Build 3.0 OBC Code: Symbol not accessed - 15 instances,4,"Issue: Based upon IV&V verification, many variables are defined and set, but not used. As with TIM - 1465, some variables, such as ""pEphemerisTlm"" at line #88 in the file ""acgettlmdata.c"", are used in the commented out code. There are 14 additional instances of this issue type, all of which have been verified by IV&V. FlexeLint Message #550: Symbol 'pEphemerisTlm' (line 88) not accessed FlexeLint Message #550 Description: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. IV&V team verified the following 14 additional instances of FlexeLint Message #550: 1.) Location: accontrolerror.c (at line 168 column 0) Message: Symbol 'pAttitude' (line 83) not accessed 2.) Location: acnavigate.c (at line 394 column 0) Message: Symbol 'temporary_vec' (line 302) not accessed 3.) Location: acprocesscommands.c (at line 1310 column 0) Message: Symbol 'Nd2' (line 1176) not accessed 4.) Location: acpropagateattitude.c (at line 249 column 0) Message: Symbol 'pSta' (line 80) not accessed 5.) Location: acverifyerror.c (at line 366 column 0) Message: Symbol 'pAttitude' (line 65) not accessed 6.) Location: acverifyerror.c (at line 366 column 0) Message: Symbol 'pEph' (line 68) not accessed 7.) Location: acverifyerror.c (at line 366 column 0) Message: Symbol 'pRwa' (line 69) not accessed 8.) Location: an_cmd.c (at line 301 column 0) Message: Symbol 'status' (line 102) not accessed 9.) Location: an_init.c (at line 140 column 0) Message: Symbol 'init_flag' (line 86) not accessed 10.) Location: an_task.c (at line 322 column 0) Message: Symbol 'prop_time' (line 148) not accessed ---------------Note: The following messages are actually associated with FlexeLint Message #551: 11.) Location: acprocesssta.c (at line 80 column 0) Message: Symbol 'StaInvalidDataOneShot' (line 80, file acprocesssta.c) not accessed 12.) Location: acprocesssta.c (at line 80 column 0) Message: Symbol 'StaNoDataOneShot' (line 80, file acprocesssta.c) not accessed ---------------Note: The following messages are actually associated with FlexeLint Message #714: 13.) Location: actask.c (at line 80 column 0) Message: Symbol 'ac_cmd_ctr' (line 80, file actask.c) not referenced 14.) Location: actask.c (at line 81 column 0) Message: Symbol 'ac_cmd_err' (line 81, file actask.c) not referenced"ProjectA - TIM - 1470,Build 3.0 OBC Code: Ignoring return value of function - 2 instances,4,"Issue: Based upon IV&V verification, the return value of function ""AC_Engine_CMD"" called at line #125 in function ""AC_CommandEngine"" in the file ""accommandEngine.c"" is ignored. Following this 'return', the calling function uses its own 'return' value, which is always ""STATUS_OK"". Presumably, the 'return' value should not be ignored and should probably be used for the 'return' at line #127. This same issue exists at line #419 in function ""AC_CommandRwa"" in the file ""accommandrwa.c"", where instead, the 'return' value of the function ""AC_RWA_CMD"" is ignored. As in the first case, following this 'return', the calling function uses its own 'return' value, which is always ""STATUS_OK"". Presumably, the 'return' value at line #278 should be used. FlexeLint Message #534: Ignoring return value of function 'AC_Engine_CMD(struct ac_global_ *)' (compare with line 297, file acglobal.h, module accommandattitude.c) FlexeLint Message I#534 Description: A function that returns a value is called just for side effects as, for example, in a statement by itself or the left-hand side of a comma operator. Try: (void) function(); to call a function and ignore its return value. See also the fvr, fvo and fdr flags in Section 5.5 Flag Options. Source Code References: File - accommandEngine.c: 101: status_type AC_CommandEngine ( ac_global_type * pAcGlobal ) 125: AC_Engine_CMD ( pAcGlobal ); 127: return ( STATUS_OK ); 156: status_type AC_Engine_CMD ( ac_global_type * pAcGlobal ) 278: return (ReturnStatus); File - accommandrwa.c: 419: AC_RWA_CMD ( pAcGlobal ); 421: return ( STATUS_OK ); 454: status_type AC_RWA_CMD ( ac_global_type * pAcGlobal ) 469: return (ReturnStatus);"ProjectA - TIM - 1469,"Build 3.0 OBC Code: Function ""Mt"" definition inconsistent with declaration",3,"Issue: Based upon IV&V verification, an inconsistent declaration and definition exist for function ""Mt"". Function ""Mt"" is defined as ""status_type"" in the file ""aumt.c"". However, it is declared as ""void"" in the file ""auproto.h"". FlexeLint Message #532: Return mode of function 'Mt(double *, unsigned short, unsigned short, double *)' inconsistent with line #73, file auproto.h, module accommandattitude.c FlexeLint Message #532 Description: A declaration (or a definition) of a function implies a different return mode than a previous statement. (The return mode of a function has to do with whether the function does, or does not, return a value). A return mode is determined from a declaration by seeing if the function returns void or, optionally, by observing whether an explicit type is given. Source Code References: File - aumt.c line: 35: status_type Mt( real_type * pMatrixA, 36: u_word RowA, 37: u_word ColumnA, 38: real_type * pMatrixB ) File - auproto.h: 70: void Mt ( real_type * pMatrixA, 71: u_word RowA, 72: u_word ColumnA, 73: real_type * pMatrixB ); 74"ProjectA - TIM - 1468,"Build 3.0 OBC Code: Function ""MsubM"" definition inconsistent with declaration",3,"Issue: Based upon IV&V verification, inconsistent declaration and definition exist for function ""MsubM"". Function ""MsubM"" is defined as ""status_type"" in the file ""aumsubm.c"". However, it is declared as 'void' in the file ""auproto.h"". FlexeLint Message #532: Return mode of function 'MsubM(double *, double *, unsigned short, unsigned short, double *)' inconsistent with line 56, file auproto.h, module accommandattitude.c FlexeLint Message #532 Description: A declaration (or a definition) of a function implies a different return mode than a previous statement. (The return mode of a function has to do with whether the function does, or does not, return a value). A return mode is determined from a declaration by seeing if the function returns void or, optionally, by observing whether an explicit type is given. Source Code References: File - aumsubm.c: 34 status_type MsubM ( real_type * pMatrixA, 35 real_type * pMatrixB, 36 u_word Row, 37 u_word Column, 38 real_type * pMatrixC ) File - auproto.h: 52 void MsubM ( real_type * pMatrixA, 53 real_type * pMatrixB, 54 u_word Row, 55 u_word Column, 56 real_type * pMatrixC ); 57"ProjectA - TIM - 1467,"Build 3.0 OBC Code: Function ""MoM"" definition inconsistent with declaration",3,"Issue: Based upon IV&V verification, an inconsistent declaration and definition exists for function ""MoM"". Function ""MoM"" is defined as ""status_type"" in the file, ""aumom.c"", on lines #36 - #41. However, it is declared as ""void"" in the file ""auproto.h"". FlexeLint Message #532: Return mode of function 'MoM(double *, double *, unsigned short, unsigned short, unsigned short, double *)' inconsistent with line #63, file ""auproto.h"", module ""accommandattitude.c"" FlexeLint Message #532 Description: A declaration (or a definition) of a function implies a different return mode than a previous statement. (The return mode of a function has to do with whether the function does, or does not, return a value). A return mode is determined from a declaration by seeing if the function returns void or, optionally, by observing whether an explicit type is given. Source Code References: File - aumom.c: 36: status_type MoM( real_type * pMatrixA, 37: real_type * pMatrixB, 38: u_word Row, 39: u_word ColumnRow, 40: u_word Column, 41: real_type * pMatrixC ) File - auproto.h: 58: void MoM ( real_type * pMatrixA, 59: real_type * pMatrixB, 60: u_word Row, 61: u_word ColumnRow, 62: u_word Column, 63: real_type * pMatrixC );",ProjectA - TIM - 1466,"Build 3.0 OBC Code: Symbol ""AccelerationEnd"" not initialized",2,"Issue: Based upon IV&V verification, line #301 of the file, ""acnavigate.c"", declares the variable, ""AccelerationEnd"", local to the function ""AC_PropagateOrbit"". The variable is used on line #389, but is never initialized. Note: Line #301 the file, ""acnavigate.c"", also provides the declaration for the local variable, ""AccelerationBeg"". However, this variable is neither used nor initialized. This issue is captured by TIM - 1465. FlexeLint Message #530: Symbol 'AccelerationEnd' (line 301) not initialized FlexeLint Message #530 Description: An auto variable was used before it was initialized. Source Code References: File - acnavigate.c: 301: vector_type AccelerationBeg, AccelerationEnd; 389: pEph->AccelerationInr = AccelerationEnd;",ProjectA - TIM - 1465,Build 3.0 OBC Code: Symbol not subsequently referenced - 74 instances,4,"Issue: Based upon IV&V verification, line #67 of the file, ""accommandattitude.c"", defines the local variable, ""Status"", but never uses it. There are 73 additional instances of this same issue type, all of which have been verified. In some cases, the unused variable is used in code that has been commented out (e.g., the variable ""j"" in function ""AC_GetTlmData""). In other cases, the function only contains one or more variable definitions, but has no functional elements in the program block (e.g., the functions ""AC_GenerateStatusMsgs"" and ""AC_VerifySadSlowTlmData""). See the attached Excel spreadsheet for a complete listing of the additional instances. FlexeLint Message #529: Symbol 'Status' (line 67) in accommandattitude.c not subsequently referenced FlexeLint Message #529 Description: The named variable was declared but not referenced in a function.",ProjectA - TIM - 1464,Inconsistent control gain in Design Notes and Build 3 code,3,"The Kp in the Figure 3 and Figure 4 in the Design Note DN-ProjectA-ACS-008 is not equivalent to the proportional gain defined in the Design Note DN-ProjectA-ACS-006. Kp*Kr in the Figure 3 and Figure 4 in the Design Note DN-ProjectA-ACS-008 will be equivalent to the proportional gain because the signal Kp*attitude_error goes through Kr also. The control structure with Kp implemented in the Figure 3 and Figure 4 in the Design Note DN-ProjectA-ACS-008 is different from the control in the OBC Build 3.0 flight software. Furthermore, the attitude rate command is not fed into Kr as shown in the Figure 3 and Figure 4 in the Design Note DN-ProjectA-ACS-008. However, the controllers in the Figure 14 in the Design Note DN-ProjectA-ACS-008 use the attitude rate command (The detailed structures of the controllers are not provided in the design note. The IV&V team would like to review them if available). The controller in the OBC Build 3.0 flight software also uses the attitude rate command for the TVC control.",3/31/05ProjectA - TIM - 1463,Incomplete Verification of ACS Requirements by the Build 3 and Build 4 Test Procedures,2,"A. This TIM presents the issues identified through analysis of the following artifacts: 1. L4-OBC-S912-SRS4930, DOORS version extracted on 11-2-04 2. OBC ACS Flight Software Requirements Specification, S912-SRS4930, REVISION B 3. ProjectA OBC ACS Flight Test Procedures, S912-TP4930, REVISION - PRODUCTION RELEASE (test procedure for Build 3, includes test scripts) 4. ProjectA OBC ACS Flight Test Procedures, S912-TP4930, REVISION A (test procedure for Build 4.0) 5. FswBuildx File, AC, ProjectA_acs_fsw_build40_performance_test_main.scr (and all scripts invoked by _main.scr) 6. ProjectA Attitude Control Subsystem Test Plan, S912-TP4690 ,REVISION -, released on 10-29-2004 7. Fault Protection Test Review Briefing Charts, 2-24-2005 B. It is noted that both documents 3 and 4 state: 1. PURPOSE This is the Software Test Procedure for the On-Board Computer (OBC) Attitude Control System (ACS) Flight Software (FSW) for the ProjectA Mission . This document specifies the functional, performance, and interface requirements for the ProjectA OBC ACS FSW. Each requirement is traceable to the implementation and test of the FSW. 2. SCOPE This document specifies the test procedures and requirements trace for the ProjectA OBC ACS FSW. 3. TEST OBJECTIVE The objective of these tests is to certify the OBC ACS task of the FSW. C. Sub-Issues (Note: the recommendation field provides IV&V suggested resolutions for each of the following sub-issues) Sub-issue #1: Both of the test procedures (documents 3 and 4) do not map individual requirements to specific test points. At best, document 3 maps multiple SRS requirements to one or more of the five tests identified in Section 11. Document 4 maps 70 SRS requirements to the ACS Mode Test script identified in item 5 and the scripts do not contain links to the SRS requirements (such links are found in the B3 OBC test scripts). Sub-issue #2: Document 4, Section 11.1 states: “The basic functionality should be verified against ACS Performance Spec (S912-PF4610). ACS pointing requirements and FDC will be verified in FSW Build 5.0”. It is unclear why this statement is made as the ACS Performance Specification is not referenced in Section 4; and Sections 1, 2, and 3, as noted above, imply that the SRS is the driving document. In fact, the requirements from the SRS are the only requirements linked to the tests within the Test Procedure document. Based on the last part of the statement, “ACS pointing requirements and FDC will be verified in FSW Build 5.0”, it appears that both the ACS SRS and the ACS Performance Specification provide requirements for software qualification testing. In addition, it is noted that the ACS Test Plan states: (1) In Section 1.1, The major aim of this ACS Test Plan is to outline the program for verifying the requirements stipulated in the ProjectA ACS Performance Specification, S912-PF4610 and thus provide confidence in the predicted ACS mission performance prior to launch, (2) In Section 4.2.1, The division of responsibilities between the FSW and the ACS is set forth in the ProjectA Software Development Plan, S912-PP4910. The flight software group, with support from the ACS group, is responsible for testing all requirements in the ProjectA OBC (On Board Computer) ACS Flight Software Requirements Specification, S912-SRS4930, which will be done on the Flight System Test Bed with the HDS. These requirements include real-time tasking, all commands including mode transition commands, all telemetry including processed sensor telemetry, and failure detection and correction, (3) In Section 4.2.2, For the CEU ACS code, a rigorous set of test cases shall be run in order to verify the core ACS flight algorithms and to baseline ACS performance. Given this, it appears there is confusion between what requirements the FSW team is using as the basis for ACS FSW verification and what the ACS team is using as their basis. From the ACS Test Plan it appears that the ACS Team is focused on verifying requirements in the ACS Performance Specification. If this is the case, then IV&V would expect that the ACS team will prepare a separate set of test procedures and scripts that will address the ACS Performance Specification requirements, and that will meet the other objectives stated in the Test Plan (e.g., ""a rigorous set of test cases shall be run in order to verify the core ACS flight algorithms and to baseline ACS performance""). Also, based on material from Document 7, slide 19, ""ACS will test all AC software ‘monitors’, threshold, persistence, and behavior (AC performance and FDC interaction)"" it appears that a separate set of tests based on the ACS Performance Specification is required as there are only two ProjectA documents that contain specific ADS FDC requirements (the ACS Performance Specification and the Fault Protection Performance Specification). In summary, it appears that the testing described in Documents 4 and 5 above is designed to verify both ACS SRS and ACS Performance Specification requirements. Yet the ACS Test Plan seems to imply that the ACS Team will perform a separate set of tests to verify the ACS Performance Specification requirements. IV&V is uncertain if there exists test procedures and scripts for ACS performance testing. Sub-issue #3: The SRS requirement numbers identified in the Test Procedures are apparently linked to the OBC ACS Flight Software Requirements Specification, S912-SRS4930, REVISION B (it is noted that Section 4 in the Procedures does not identify the SRS version number). For several of the linked SRS requirements the DOORS version of the requirement is different than its companion found in Revision B. This in turn implies that the tests linked to the DOORS version may not verify the latest baseline version of the requirements. The attachment identifies the specific requirements that are different between Rev. B and the SRS requirements that were extracted from the 11-02-04 DOORS database. Sub-issue #4: In most cases the procedure and the scripts do not identify specific pass/fail criteria. Document 4 simply states “Script executes.” and “The basic functionality should be verified against ACS Performance Spec (S912-PF4610). ACS pointing requirements and FDC will be verified in FSW Build 5.0”. Based on the scripts, the test conductor is observing screens that contain TLM, etc. and data is collected for post test analysis (e.g., plots); however, there is no indication of how this data is to be screened for pass/fail. Concerning the term “script executes” it is noted from the scripts that the execution is controlled (in many cases) by the “wait” statement. For example, “wait” until an expected event occurs, like an expected mode change. However, this approach does not, in general, correlate with the specific ACS SRS requirements that are linked to the test (i.e., the script completely executes because the “requirement has been verified”). Sub-issue #5: Due to Sub-issue #1 there is little guidance as to where a specific requirement is verified in the test scripts. An analysis of the test scripts found in Items 3 and 5 shows that few of the linked requirements are verified by the scripts. The attachment to this TIM identifies: (1) the linked SRS requirements from the OBC ACS Flight Software Requirements Specification, S912-SRS4930, REVISION B; (2) the companion SRS requirements from the 11-02-04 DOORS version and (3) a statement as to whether IV&V could find evidence that the linked test actually verifies the requirement. While the Build 4 ACS Mode Test script exercises many functions associated with configuring the ACS sensors and effectors, switching modes, managing momentum, etc. it seems to be insufficiently focused in scope to verify the detailed SRS requirements. Sub-issue #6: As noted above, the Purpose section of the Test Procedures states, ""This document specifies the functional, performance, and interface requirements for the ProjectA OBC ACS FSW"". This statement seems incorrect given that Items 1 and 2 above (the ACS SRS) identify the OBC ACS requirements. If the intent is to invoke the ACS Performance Specification as an ACS requirements document, then it should also be referenced.",3/10/05ProjectA - TIM - 1461,"Build 3.0 OBC Code: ACS Control Mode Transitions specified inconsistently by code, ACS P-Spec, and ACS SRS",2,"The ACS control sub mode transitions are implemented in the matrix ""AcModeTable"" in the code ""ACModeTable.c"". However, the mode transitions defined in Table 1 of the ProjectA Attitude Control Subsystem Performance Specification are different. Fourteen (14) mode transitions are different. 1. The Rate_Nulling mode is allowed to transfer to Speed_ctl mode, which is not allowed in Table 1. 2. The Sun_acq mode is allowed to transfer to Speed_ctl mode, which is not allowed in Table 1. 3. The Sun_point mode is allowed to transfer to Speed_ctl mode, which is not allowed in Table 1. 4. The Sun_ point mode is allowed to transfer to DeltaVEngine mode, which is not allowed in Table 1. 5. The Sun_ point mode is allowed to transfer to DeltaVRCS mode, which is not allowed in Table 1. 6. The Inertial_target mode is not allowed to transfer to Sun_acq mode, which is allowed in Table 1. 7. The DeltaVEngine mode is not allowed to transfer to Sun_acq mode, which is allowed in Table 1. 8. The DeltaVEngine mode is allowed to transfer to DeltaVRCS mode, which is not allowed in Table 1. 9. The DeltaVRCS mode is not allowed to transfer to Sun_acq mode, which is allowed in Table 1. 10. The DeltaVRCS mode is allowed to transfer to DeltaVEngine mode, which is not allowed in Table 1. 11. The AsteroidNadirPointing mode is not allowed to transfer to Sun_acq mode, which is allowed in Table 1. 12. The AsteroidNadirPointing mode is not allowed to transfer to AsteroidTgtTracking mode, which is allowed in Table 1. 13. The AsteroidTgtTracking mode is not allowed to transfer to Sun_acq mode, which is allowed in Table 1. 14. The AsteroidTgtTracking mode is not allowed to transfer to AsteroidNadirPointing mode, which is allowed in Table 1. The requirements ""Commanded Transition Requirements"" (L4-SROAC-108, L4-SROAC-109, L4-SROAC-110) in ProjectA OBC ACS Flight Software Requirements Specification (S912-SRS4930) DOORS export 11/2/04 list allowable commanded mode transitions. However, there are more allowable commanded mode transitions defined in Table 1 of the ProjectA Attitude Control Subsystem Performance Specification. For example, according to Table 1, transition from science mode, delta-V mode, target pointing mode, or rate nulling sub mode to Sun acquisition sub mode is allowable. Referenced documents: ACModeTable.c in OBC Build 3.0 14 15 ac_mode_table_type AcModeTable = 16 { 17 /*LNH CNT CNT CNT NML NML Engine RCS ATGT ATRK */ 18 {{ 0, 1, 1, 1, 0, 0, 0, 0, 0, 0}, /*Launch, Speed_ctl */ 19 { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1}, /*Contingency, Rate_Nulling */ 20 { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0}, /*Contingency, Sun_acq */ 21 { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, /*Contingency, Sun_point */ 22 { 0, 0, 0, 1, 0, 1, 0, 0, 1, 1}, /*Normal, Attitude Steering */ 23 { 0, 0, 0, 1, 1, 0, 1, 1, 1, 1}, /*Normal, Inertial_target*/ 24 { 0, 0, 0, 1, 1, 1, 0, 1, 0, 0}, /*Normal, DeltaVEngine */ 25 { 0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, /*Normal, DeltaVRCS */ 26 { 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, /*Science, AsteroidNadirPointing*/ 27 { 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}}, /*Science, AsteroidTgtTracking*/ 28 { 1, 0, 0, 0, 1, 1, 3, 0, 1, 1} /*Jet=0, RWA=1, Engine_Jet=2, Engine_Rwa=3*/ 29 }; 30 ProjectA Attitude Control Subsystem Performance Specification. Contractor1 Document ID: S912-PF4610. Revision: C. Oct. 29, 2004. Table 1. ACS Control Mode Switching ProjectA OBC ACS Flight Software Requirements Specification (S912-SRS4930) DOORS export 11/2/04 L4-SROAC-107 Commanded Transition Requirements 1.8.1.2 Commanded Transition Requirements L4-SROAC-108 (ACS-AC072) The software shall allow a commanded transition from Launch Mode, Target Pointing Mode, Delta-V Mode, or Science Mode to acquisition/Coarse Sun Pointing Rate Nulling Submode. L4-SROAC-109 (ACS-AC073) The software shall allow a commanded transition from Acquisition/Coarse Sun Pointing Sun Pointing Submode to Target Pointing mode. L4-SROAC-110 (ACS-AC074) The software shall allow commanded transitions between Target Pointing Mode and Delta-V Mode or Science Mode.",2/18/05ProjectA - TIM - 1460,"Build 3.0 OBC Code: ACS Control Modes specified inconsistently by code, ACS P-Spec, and ACS SRS",2,"Ten ACS control sub modes are implemented in the code ""ACModeTable.c"". However, there are ten sub modes defined in Table 1 of the ProjectA Attitude Control Subsystem Performance Specification and Table 6-1 of the ProjectA System State and Subsystem Mode Definitions Design Note (DN-ProjectA-SE-001) that are different than what is in ""ACModeTable.c"". Furthermore, there are only nine ACS Control sub modes defined in the OBC ACS SRS requirement L4-SROAC-32 (ACS-AC020.4). The ""Attitude Steering"" sub mode implemented in the code is not defined in the ProjectA ACS Performance Specification, the ProjectA System State and Subsystem Mode Definitions Design Note, or the ProjectA OBC ACS SRS requirement L4-SROAC-32 (ACS-AC020.4). The ""Torque Control"" sub mode defined in the ProjectA ACS Performance Specification and the ""RWA Torque"" sub mode defined in DN-ProjectA-SE-001 is not implemented in the code or defined in the OBC ACS SRS requirement L4-SROAC-32 (ACS-AC020.4). In addition, there are no sub modes defined for Launch mode in OBC ACS SRS requirement L4-SROAC-32 (ACS-AC020.4). However, there are two sub modes defined in Table 1 of the ACS Performance Spec. and Table 6-1 of DN-ProjectA-SE-001 for Lauch mode, which are for speed control and torque control. Only the ""Speed_ctl"" Launch sub mode is implemented in the code. There are 11 submodes defined in the design note DN-ProjectA-ACS-001 as follows: 1. Launch Mode – Torque Submode 2. Launch Mode – Speed Submode 3. Acquisition/Coarse Sun Pointing Mode - Rate Nulling Submode, 4. Acquisition/Coarse Sun Pointing Mode - Sun Acquisition Submode, 5. Acquisition/Coarse Sun Pointing Mode - Sun Pointing Submode, 6. Target Pointing Mode - Attitude Steering Submode, 7. Target Pointing Mode - Inertial Target Submode, 8. Delta-V Mode - Engine Submode, 9. Delta-V Mode - RCS Submode, 10. Science Mode - Asteroid Nadir Pointing Submode, 11. Science Mode - Asteroid Target Tracking Submode. Among the eleven submodes, torque submode is not implemented in the code and attitude steering submode is not defined in the ProjectA ACS Performance Specification. Referenced documents: ACModeTable.c in OBC Build 3.0 14 15 ac_mode_table_type AcModeTable = 16 { 17 /*LNH CNT CNT CNT NML NML Engine RCS ATGT ATRK */ 18 {{ 0, 1, 1, 1, 0, 0, 0, 0, 0, 0}, /*Launch, Speed_ctl */ 19 { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1}, /*Contingency, Rate_Nulling */ 20 { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0}, /*Contingency, Sun_acq */ 21 { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0}, /*Contingency, Sun_point */ 22 { 0, 0, 0, 1, 0, 1, 0, 0, 1, 1}, /*Normal, Attitude Steering */ 23 { 0, 0, 0, 1, 1, 0, 1, 1, 1, 1}, /*Normal, Inertial_target*/ 24 { 0, 0, 0, 1, 1, 1, 0, 1, 0, 0}, /*Normal, DeltaVEngine */ 25 { 0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, /*Normal, DeltaVRCS */ 26 { 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}, /*Science, AsteroidNadirPointing*/ 27 { 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}}, /*Science, AsteroidTgtTracking*/ ProjectA Attitude Control Subsystem Performance Specification. Contractor1 Document ID: S912-PF4610. Revision: C. October 29, 2004. Table 1. ACS Control Mode Switching (reference is attached as a Relationship) ProjectA System State and Subsystem Mode Definitions Design Note, DN-ProjectA-SE-001, CDRL TD-008, dated 9/27/04. (reference is attached as a Relationship) ProjectA OBC ACS Flight Software Requirements Specification (S912-SRS4930) DOORS export 11/2/04 L4-SROAC-32 ACS-AC020.4 Set AC control mode: * Launch Mode, * Acquisition/Coarse Sun Pointing Mode - Rate Nulling Submode, * Acquisition/Coarse Sun Pointing Mode - Sun Acquisition Submode, * Acquisition/Coarse Sun Pointing Mode - Sun Pointing Submode, * Target Pointing Mode - Attitude Steering Submode, * Target Pointing Mode - Inertial Target Submode, * Delta-V Mode - Engine Submode, * Delta-V Mode - RCS Submode, * Science Mode - Asteroid Nadir Pointing Submode, * Science Mode - Asteroid Target Tracking Submode. ProjectA Design Note: Thrust Vector Control System Design and Analysis for ProjectA. Project Doc #: DN-ProjectA-ACS-008. Revision: Initial. March 03, 2003.",2/18/05ProjectA - TIM - 1459,Build 3.0 OBC Code: Coarse Sun Acquisition Mode - Unused and undocumented Control Gains,4,"Control gains with Gyroless and no AD for Coarse Sun Acquisition Mode are defined as ""NoAdGains"" in the code ""AcControlTable.c"", but the gains are not used any place in the code and are not documented in the Design Notes. Referenced documents: AcControlTable.c in OBC Build 3.0 168 ** Gyroless No AD Gains for Coarse Sun Acquisition Mode ... 169 */ 170 171 {{{{0.00025, 0.0, 0.0}, 172 {0.0, 0.00025, 0.0}, 173 {0.0, 0.0, 0.00025}}}, /* NoAdGains Cp[0] */ 174 175 {{{0.0, 0.0, 0.0}, 176 {0.0, 0.0, 0.0}, 177 {0.0, 0.0, 0.0}}}, /* NoAdGains Cr[0] */ 178 {{{0.0, 0.0, 0.0}, 179 {0.0, 0.0, 0.0}, 180 {0.0, 0.0, 0.0}}}}, /* NoAdGains Ci[0] */ 181",2/18/05ProjectA - TIM - 1458,Build 3.0 OBC Code: Controller Limits specified inconsistently by code and design note,2,"The limits of the controller implemented in the code ""AcControlTable.c"" are ThetaErrBdyLmt, OmegaErrBdyLmt, IntegralErrBdyLmt, and RateLimit. However, there is no body frame attitude error limit, rate error limit, and RateLimit according to the control algorithm shown in Figure 3 in DN-ProjectA-ACS-006. There is a limit for integral error in the Figure 3, which limits the integral of the attitude error, but it is different from the limit IntegralErrBdyLmt, which limits gain*integrated_attitude_error*inertia. The values of IntegralErrBdyLmt are set to 10000, 10000, and 10000(sec), which are unrealistic. The units of IntegralErrBdyLmt listed in the code are second, which is wrong. It should be kg*m*m/(sec*sec). The values of RateLimit are 10000 rad/sec except for ""alt 1 Jet"". The values seems unrealistic. Referenced documents: AcControlTable.c in OBC Build 3.0 64 /* 65 ** Attitude, Rate, And Integral Error Limits ... 66 */ 67 68 {{ 15.0 * DEG_2_RAD, 69 15.0 * DEG_2_RAD, 70 15.0 * DEG_2_RAD }}, /* ThetaErrBdyLmt, rad */ 71 72 {{ 5.0 * DEG_2_RAD, 73 5.0 * DEG_2_RAD, 74 5.0 * DEG_2_RAD }}, /* OmegaErrBdyLmt, r/s */ 75 76 {{ 1.00e4, 77 1.00e4, 78 1.00e4 }}, /* IntegralErrBdyLmt, sec */ 79 80 {{ 1.70e-3, 1.70e-3, 1.70e-3 }, /* RateLimit, rad/sec */ 81 { 1.00e+4, 1.00e+4, 1.00e+4 }, /* RateLimit, rad/sec */ 82 { 1.00e+4, 1.00e+4, 1.00e+4 }, /* RateLimit, rad/sec */ 83 { 1.00e+4, 1.00e+4, 1.00e+4 }, /* RateLimit, rad/sec */ 84 { 1.00e-4, 1.00e-4, 1.00e-4 }}, /* RateLimit, rad/sec */ 85 DN-ProjectA-ACS-006 Rev C (3/2/04) ""Attitude Control System Design and Analysis for ProjectA"" Figure 3",2/18/05ProjectA - TIM - 1457,Build 3.0 OBC Code: Different control algorithm in the code,2,"The control algorithm implemented in ""accontrollaw.c"" is different from that documented in the design note DN-ProjectA-ACS-006. The comments in the code call the control algorithm ""double saturated controller"". It seems that the controller uses the integral of attitude error or rate error depending on if the rate command is saturated or not. However, the control algorithm shown in Figure 3 in DN-ProjectA-ACS-006 always uses the integral of attitude error. There are two limiters implemented in the code, but there is only one limiter in the design note. They are different. The limiter in the code limits gain*integrated_attitude_error*inertia or gain* integrated_rate_error*inertia. The limiter in the design note limits only integrated_attitude_error as shown in Figure 4 in DN-ProjectA-ACS-006. The rationale of the rate command calculation in the code line 144 and 145, shown as follows, is unclear. It uses the equivalent attitude error as the rate error. Actually, the rate error is available as pControl->OmegaErrLmtBdy. 144 pControl->RateCmd.v[i] = pControl->ThetaErrLmtBdy.v[i] * AcControlTable.Cp[select[i]].v[i] / 145 AcControlTable.Cr[select[i]].v[i]; It seems that the inner loop integration from line 157 to 159, shown as follows, includes not only the rate error as pControl->OmegaErrLmtBdy, but also the attitude error as pControl->RateCmd. The physical meaning of the combination is unclear and makes the integration larger than that without rate command saturation. 157 pControl->IntegralErrLmtBdy[selecti].v[i] += AcControlTable.Ci_Inner[select[i]].v[i] * 158 ( pControl->RateCmd.v[i] + pControl->OmegaErrLmtBdy.v[i] ) * AC_CYCLE_TIME * 159 AcControlTable.Ci[select[i]].v[i] * pControl->pIsc->m[i][i]; The values of the integral gain when on the rate limiter, shown as AcControlTable.Ci_Inner, are 1000 for Engine and 1 for the rest. The values are questionable. If the value is 1, the inner loop integration will use the same gains as the outer loop integration, which is not reasonable. The value of 1000 makes the inner loop integration much larger than the outer loop integration, which does not make sense. Referenced documents: accontrollaw.c in OBC Build 3.0 136 /* 137 ....DOUBLE SATURATED CONTROLLER 138 */ 139 for ( i = 0; i < 3; i++ ) { 140 /* 141 .... CALCULATE THE RATE COMMAND 142 */ 143 if ( fabs( AcControlTable.Cr[select[i]].v[i] ) > 0.0 ) 144 pControl->RateCmd.v[i] = pControl->ThetaErrLmtBdy.v[i] * AcControlTable.Cp[select[i]].v[i] / 145 AcControlTable.Cr[select[i]].v[i]; 146 else 147 pControl->RateCmd.v[i] = 0.0; 148 if ( fabs( pControl->RateCmd.v[i] ) > AcControlTable.RateLimit[select[i]].v[i] ) { 149 /* 150 .... SWITCH INTEGRATOR TO INNER LOOP, SATURATE RATE COMMAND 151 */ 152 pControl->RateCmd.v[i] = LIMIT ( pControl->RateCmd.v[i], AcControlTable.RateLimit[select[i]].v[i] ); 153 /* 154 .... ONLY INTEGRATE IF ACTUATOR WASN'T SATURATED LAST CYCLE 155 */ 156 if ( pControl->IntegratorOn[i] == 1 ) 157 pControl->IntegralErrLmtBdy[selecti].v[i] += AcControlTable.Ci_Inner[select[i]].v[i] * 158 ( pControl->RateCmd.v[i] + pControl->OmegaErrLmtBdy.v[i] ) * AC_CYCLE_TIME * 159 AcControlTable.Ci[select[i]].v[i] * pControl->pIsc->m[i][i]; 160 161 } 162 else { 163 /* 164 .... INTEGRATOR STAYS ON OUTER LOOP 165 .... ONLY INTEGRATE IF ACTUATOR WASN'T SATURATED LAST CYCLE 166 */ 167 if ( pControl->IntegratorOn[i] == 1 ) 168 pControl->IntegralErrLmtBdy[selecti].v[i] += pControl->ThetaErrLmtBdy.v[i] * AC_CYCLE_TIME * 169 AcControlTable.Ci[select[i]].v[i] * pControl->pIsc->m[i][i]; 170 171 } 172 /* 173 .... LIMIT THE INTEGRATOR 174 */ 175 pControl->IntegralErrLmtBdy[selecti].v[i] = LIMIT ( pControl->IntegralErrLmtBdy[selecti].v[i], 176 AcControlTable.IntegralErrBdyLmt.v[i] ); 177 /* 178 .... FORM PID TORQUE COMMAND 179 */ 180 pControl->TorquePidBdy.v[i] = ( ( pControl->RateCmd.v[i] + pControl->OmegaErrLmtBdy.v[i] ) * 181 AcControlTable.Cr[select[i]].v[i] ) * pControl->pIsc->m[i][i] + 182 pControl->IntegralErrLmtBdy[selecti].v[i]; 183 } DN-ProjectA-ACS-006 Rev C (3/2/04) ""Attitude Control System Design and Analysis for ProjectA"" Figure 3 and Figure 4",2/18/05ProjectA - TIM - 1456,Build 3.0 OBC Code: Different Control Gains in the code,3,"The control gain values for Engine in the code ""AcControlTable.c"" are different from those listed in Table 4 in DN-ProjectA-ACS-008. Referenced documents: AcControlTable.c in OBC Build 3.0 132 /* 133 ** Proportional gains, alt Jet, Jet, RWA, Engine 134 */ 135 {{ 1.14e-04, 3.55e-04, 1.14e-04 }, /* alt 1 Jet */ 136 { 7.30e-04, 8.90e-03, 4.30e-04 }, /* alt 2 Jet */ 137 { 7.30e-04, 8.90e-03, 4.30e-04 }, /* Jet */ 138 { 2.27e-04, 2.85e-03, 2.27e-04 }, /* RWA */ 139 // { 2.27e-04, 2.85e-03, 1.80e-04 }, /* RWA */ 140 { 7.10e-06, 1.14e-04, 0.00e+00 }}, /* Engine */ 141 142 /* 143 ** Rate gains, alt Jet, Jet, RWA, Engine 144 */ 145 {{ 2.03e-02, 3.77e-02, 2.03e-02 }, /* alt 1 Jet */ 146 { 4.10e-02, 1.40e-01, 3.10e-02 }, /* alt 2 Jet */ 147 { 4.10e-02, 1.40e-01, 3.10e-02 }, /* Jet */ 148 { 3.02e-02, 1.07e-01, 3.02e-02 }, /* RWA */ 149 { 5.10e-03, 2.03e-02, 0.00e+00 }}, /* Engine */ 150 /* 151 ** Integral gains, alt Jet, Jet, RWA, Engine 152 */ 153 {{ 0.00e+00, 0.00e+00, 0.00e+00 }, /* alt 1 Jet */ 154 { 0.00e+00, 0.00e+00, 0.00e+00 }, /* alt 2 Jet */ 155 { 3.50e-06, 1.40e-04, 2.70e-06 }, /* Jet */ 156 { 1.80e-06, 3.56e-06, 1.80e-06 }, /* RWA */ 157 // { 1.80e-06, 3.56e-06, 5.30e-07 }, /* RWA */ 158 { 8.00e-09, 1.00e-07, 0.00e+00 }}, /* Engine */ 159 /* ProjectA Design Note: Thrust Vector Control System Design and Analysis for ProjectA. Project Doc #: DN-ProjectA-ACS-008. Revision: Initial. February 27, 2004. Table 4. Control system parameters for x and y Axes Parameter X Y Kp (1/sec2) 1.40e-3 3.97e-3 Kr (1/sec) 5.06e-3 1.43e-2 Ki (1/sec3) 8.0e-9 1.0e-7",2/18/05ProjectA - TIM - 1455,Build 3.0 OBC Code: Undocumented Control Gains in the code,3,"There are five sets of PID control gains implemented in the code ""AcControlTable.c"". However, only three gain sets are documented in the Design Notes. The gain sets for ""alt 1 jet"" and ""alt 2 jet"" in the code are not documented in any of the Design Notes. Referenced documents: AcControlTable.c in OBC Build 3.0 132 /* 133 ** Proportional gains, alt Jet, Jet, RWA, Engine 134 */ 135 {{ 1.14e-04, 3.55e-04, 1.14e-04 }, /* alt 1 Jet */ 136 { 7.30e-04, 8.90e-03, 4.30e-04 }, /* alt 2 Jet */ 137 { 7.30e-04, 8.90e-03, 4.30e-04 }, /* Jet */ 138 { 2.27e-04, 2.85e-03, 2.27e-04 }, /* RWA */ 139 // { 2.27e-04, 2.85e-03, 1.80e-04 }, /* RWA */ 140 { 7.10e-06, 1.14e-04, 0.00e+00 }}, /* Engine */ 141 142 /* 143 ** Rate gains, alt Jet, Jet, RWA, Engine 144 */ 145 {{ 2.03e-02, 3.77e-02, 2.03e-02 }, /* alt 1 Jet */ 146 { 4.10e-02, 1.40e-01, 3.10e-02 }, /* alt 2 Jet */ 147 { 4.10e-02, 1.40e-01, 3.10e-02 }, /* Jet */ 148 { 3.02e-02, 1.07e-01, 3.02e-02 }, /* RWA */ 149 { 5.10e-03, 2.03e-02, 0.00e+00 }}, /* Engine */ 150 /* 151 ** Integral gains, alt Jet, Jet, RWA, Engine 152 */ 153 {{ 0.00e+00, 0.00e+00, 0.00e+00 }, /* alt 1 Jet */ 154 { 0.00e+00, 0.00e+00, 0.00e+00 }, /* alt 2 Jet */ 155 { 3.50e-06, 1.40e-04, 2.70e-06 }, /* Jet */ 156 { 1.80e-06, 3.56e-06, 1.80e-06 }, /* RWA */ 157 // { 1.80e-06, 3.56e-06, 5.30e-07 }, /* RWA */ 158 { 8.00e-09, 1.00e-07, 0.00e+00 }}, /* Engine */ 159 /*",2/18/05ProjectA - TIM - 1454,"Incorrect inertia used in the thrust vector control system design note, DN-ProjectA-ACS-008.",2,"The spacecraft moment of inertia Iyy listed in Table 1 in DN-ProjectA-ACS-008 is 640 kg-m*m. However, Iyy in section 3.1.5.1.2 Spacecraft Inertia in ProjectA Attitude Control Subsystem Performance Specification is 330+-15% kg-m*m. The spacecraft inertia is also listed and used in several Design Notes, such as, Table 2 in DN-ProjectA-ACS-007, Table 4 in DN-ProjectA-ACS-012, and Table 2 in DN-ProjectA-ACS-0013. The Iyy values are not the same in the documents, but the minimum value for Iyy is 273.27 kg-m*m and the maximum value is 381.73 kg-m*m. The Iyy value is defined as 345.487 kg-m*m in AcControlTable.c in OBC FSW Build 3.0. The value of Iyy in DN-ProjectA-ACS-008 is about 85% larger than the value used in the code. This difference raises questions as to whether the control system performance can meet the requirements using the control gains designed in DN-ProjectA-ACS-008. Referenced documents: ProjectA Design Note: Thrust Vector Control System Design and Analysis for ProjectA. Project Doc #: DN-ProjectA-ACS-008. Revision: Initial. February 27, 2004. Table 1. Physical Parameters for x and y Axes Parameter x y Moment of Inertia I (kg- m2) 5750, 5500 640 1st Mode frequency omegai (Hz) 0.125 0.5 Modal slope at actuator phia (m-1) 0.06 0.06 Modal slope at sensor phis (m-1) 0.06 0.06 Thrust Ft (N) .020, .100 .020, .100 Thruster mass m (kg) 10 10 Thruster transverse inertia J (kg-m2) 0.17 0.17 Moment arm to c.g. Lt (m) 0.85, 1.14 1.29, 1.582 Effective gimbal pivot arm Ln (m) 0.10 -.34 ProjectA Attitude Control Subsystem Performance Specification. Contractor1 Document ID: S912-PF4610. Revision: C. July 30, 2004. Exported from the November 2, 2004 DOORS database. 3.1.5.1.2 Spacecraft Inertias The ACS shall perform as specified herein with the following deployed spacecraft moments and products of inertia about the spacecraft center of mass: Ixx = 5800 N-m-s2 +- 15% Iyy = 330 N-m-s2 +- 15% Izz = 5700 N-m-s2 +- 15% Ixy = Ixz = Iyz = 0 +- 40 N-m-s2 ProjectA Design Note: Attitude ProjectA Target Pointing Mode Design and Analysis. Project Doc #: DN-ProjectA-ACS-007. Revision: Initial. April 13, 2004. Table 2: Moments of inertia (kg-m2) Life XX YY ZZ BOL 5997.11 381.73 5873.81 EOL 5624.17 273.27 5545.86 Table 3: Products of inertia (kg-m2) Life XY XZ YZ BOL -0.25 1.42 -0.13 EOL 0.69 -0.10 -0.17 ProjectA Design Note: Reaction Control System Design and Analysis for ProjectA. Project Doc #: DN-ProjectA-ACS-012. Revision: Initial. April 15, 2004. Table 4. Physical Parameters Parameter Roll Pitch Yaw Moment of Inertia (kg- m2) 5700, 5620 360, 273 5600, 5546 1st Mode frequency (Hz) 0.14 0.5 0.14 Modal slope at actuator (m-1) 0.06 .06 0.06 Modal slope at sensor (m-1) 0.06 .06 0.06 REA Thrust (N) 0.93, .223 ProjectA Design Note: ProjectA Coarse Sun Pointing Mode Design and Analysis. Project Doc #: DN-ProjectA-ACS-013. Revision: Initial. April 22, 2004. Table 2: Spacecraft Mass Properties Stowed One Array Deployed Both Arrays Deployed, BOL Both Arrays Deployed, EOL Moments of Inertia (kg-m2) XX 452.48 3121.17 5997.11 5624.17 YY 413.10 397.41 381.73 273.27 ZZ 360.55 3013.56 5873.81 5545.86 Products of Inertia (kg-m2) XY -0.25 6.42 -0.25 0.69 XZ 1.28 1.35 1.42 -0.10 YZ -0.13 32.72 -0.13 -0.17 Center of Mass (m) X -0.00671 -0.0074 -0.00800 -0.00765 Y 0.00047 -0.2896 0.00047 -0.00022 Z 0.99132 0.9913 0.99132 1.10447 Center of Mass Uncertainty (m) X 0.038 0.034 0.029 0.028 Y 0.024 0.029 0.033 0.036 Z 0.048 0.048 0.048 0.060 OBC Bld 3.0 AcControlTable.c {{{ 5696.372, 0.686, 0.510}, /* Isc */ { 0.686, 345.487, -0.153}, { 0.510, -0.153, 5580.502}}},",1/28/05ProjectA - TIM - 1453,"Incorrect inertia used in the attitude control system design note, DN-ProjectA-ACS-006",2,"Description: The spacecraft moment of inertia Iyy listed in Table 1 in DN-ProjectA-ACS-006 Rev C is 640.31 kg-m*m. However, Iyy in section 3.1.5.1.2 Spacecraft Inertia in ProjectA Attitude Control Subsystem Performance Specification is 330+-15% kg-m*m. The spacecraft inertia is also listed and used in several other Design Notes, such as, Table 2 in DN-ProjectA-ACS-007, Table 4 in DN-ProjectA-ACS-012, and Table 2 in DN-ProjectA-ACS-0013. The Iyy values are not the same in the documents, but the minimum value for Iyy is 273.27 kg-m*m and the maximum value is 381.73 kg-m*m. The Iyy value is defined as 345.487 kg-m*m in AcControlTable.c in OBC FSW Build 3.0. The value of Iyy in DN-ProjectA-ACS-006 is about 85% larger than the value used in the code. This difference raises questions as to whether the control system performance can meet the requirements using the control gains designed in DN-ProjectA-ACS-006. In DN-ProjectA-ACS-006, performance analysis is conducted for 10% inertia variation. However, in the ACS Performance Specification, the inertia is allowed to have 15% variation. It seems that the performance analysis for 10% inertia variation is not adequate. Referenced documents: DN-ProjectA-ACS-006 Rev C (3/2/04) ""Attitude Control System Design and Analysis for ProjectA"" Table 1. ProjectA Inertia Properties (Deployed Configuration) kg-m2 (Max) Parameter Units X Y Z Description ISC X 5750.59 -1.29 -30.03 Rigid S/C Inertia Y -1.29 640.31 -.01 Z -30.03 -.01 5311.55 ProjectA Attitude Control Subsystem Performance Specification. Contractor1 Document ID: S912-PF4610. Revision: C. July 30, 2004. Exported from the November 2, 2004 DOORS database. 3.1.5.1.2 Spacecraft Inertias The ACS shall perform as specified herein with the following deployed spacecraft moments and products of inertia about the spacecraft center of mass: Ixx = 5800 N-m-s2 +- 15% Iyy = 330 N-m-s2 +- 15% Izz = 5700 N-m-s2 +- 15% Ixy = Ixz = Iyz = 0 +- 40 N-m-s2 ProjectA Design Note: Attitude ProjectA Target Pointing Mode Design and Analysis. Project Doc #: DN-ProjectA-ACS-007. Revision: Initial. April 13, 2004. Table 2: Moments of inertia (kg-m2) Life XX YY ZZ BOL 5997.11 381.73 5873.81 EOL 5624.17 273.27 5545.86 Table 3: Products of inertia (kg-m2) Life XY XZ YZ BOL -0.25 1.42 -0.13 EOL 0.69 -0.10 -0.17 ProjectA Design Note: Reaction Control System Design and Analysis for ProjectA. Project Doc #: DN-ProjectA-ACS-012. Revision: Initial. April 15, 2004. Table 4. Physical Parameters Parameter Roll Pitch Yaw Moment of Inertia (kg- m2) 5700, 5620 360, 273 5600, 5546 1st Mode frequency (Hz) 0.14 0.5 0.14 Modal slope at actuator (m-1) 0.06 .06 0.06 Modal slope at sensor (m-1) 0.06 .06 0.06 REA Thrust (N) 0.93, .223 ProjectA Design Note: ProjectA Coarse Sun Pointing Mode Design and Analysis. Project Doc #: DN-ProjectA-ACS-013. Revision: Initial. April 22, 2004. Table 2: Spacecraft Mass Properties Stowed One Array Deployed Both Arrays Deployed, BOL Both Arrays Deployed, EOL Moments of Inertia (kg-m2) XX 452.48 3121.17 5997.11 5624.17 YY 413.10 397.41 381.73 273.27 ZZ 360.55 3013.56 5873.81 5545.86 Products of Inertia (kg-m2) XY -0.25 6.42 -0.25 0.69 XZ 1.28 1.35 1.42 -0.10 YZ -0.13 32.72 -0.13 -0.17 Center of Mass (m) X -0.00671 -0.0074 -0.00800 -0.00765 Y 0.00047 -0.2896 0.00047 -0.00022 Z 0.99132 0.9913 0.99132 1.10447 Center of Mass Uncertainty (m) X 0.038 0.034 0.029 0.028 Y 0.024 0.029 0.033 0.036 Z 0.048 0.048 0.048 0.060 OBC Bld 3.0 AcControlTable.c {{{ 5696.372, 0.686, 0.510}, /* Isc */ { 0.686, 345.487, -0.153}, { 0.510, -0.153, 5580.502}}},",1/28/05ProjectA - TIM - 1452,Inconsistent Maximum Spin Rate,2,"Description: L3-SFS-2383 in the 11-2-04 DOORS version of the SC&FSRD states that the ACS shall be able to survive a spacecraft spin rate of up to 55 RPM about any axis. However, L2-LVI-221 in Launch Vehicle Interface Requirements Document D-25840 states that the current maximum limit on the spin rate for the ProjectA spacecraft/third stage assembly is 60 RPM. In the previous version of L3-SFS-2383, it states that the Flight System shall be able to survive a spin of up to 60 RPM. L3-SFS-2383 changed, but L2-LVI-221 did not. Referenced Requirements: L3-SFS-2382 5.1.8 Maximum Spin Rate The ACS shall be able to survive a spacecraft spin rate of up to 55 RPM about any axis. L2-LVI-221 in L2 - Launch Vehicle Interface Requirements Document D-25840 The current maximum limit on the spin rate for the ProjectA spacecraft/third stage assembly is 60 RPM. This upper RPM limit is due to component limitations on the ProjectA spacecraft. At spacecraft separation from the third stage, the ProjectA spacecraft spin rate must be less than 2 RPM. If the spacecraft separation spin rate is greater than 2 RPM, then the ProjectA attitude control system will not be able sense and remove the tip-off separation spin rate.",1/20/05ProjectA - TIM - 1451,"ProjectA OBC C&DH Flight Software Test Procedures, ds_release_by_databset_test(), Does Not Fully Verify the Linked SRS Requirements",3,"This test is designed to verify the following SRS requirements: DS016 (L4-SROBC-155) The OBC-C&DH software shall accept and execute a RELEASE_DATA_SET command to release the specified Virtual Recorder's DATASET storage memory, which is then available for re-recording. DS016.1 (L4-SROBC-156) When DATASET_1 is specified by a RELEASE_DATASET command, all memory allocated to DATASET_1, _2, and _3 shall be released for re-recording. DS016.2 (L4-SROBC-157) When DATASET_2 is specified by a RELEASE_DATASET command, all memory allocated to DATASET_2 and _3 shall be released for re-recording. DS016.3 (L4-SROBC-158) When DATASET_3 is specified by a RELEASE_DATASET command, all memory allocated to DATASET_3 shall be released for re-recording. Issues: (1)Section 11.4 states that DS016,DS016.1, DS016.2, DS016.3 are verified. The test script only references DS016. (2) The script does not test all three commands as the test will complete (goto EXIT) when the first VR is found that can perform the ds_release_by_dataset test. For example, in the first test step (if the IF statement is true then only dataset_3 will be released) and the test will complete without showing that that DS016.1 and DS016.2 are verified. The following is an example copied from the test script: if (DS_VR_Status[0].first_seq_nums_d3 <> 0) then @ds:release_by_data_sets DataSet_3 VR1_MASK wait (DS_VR_Status[0].first_seq_nums_d3 = 0) goto <<EXIT>> endif",1/14/05ProjectA - TIM - 1450,"ProjectA OBC C&DH Flight Software Test Procedures, ds_start_playback_test(), Does Not Fully Verify the Linked SRS Requirements",4,"This test is designed to verify the following SRS requirement: DS011 (L4-SROBC-150) The OBC-C&DH software shall accept and execute a START_RECORDER_PLAYBACK command which starts an initial playback of the specified DATASET for the specified Virtual Recorder. Issue: It appears that data set_0 is always used for each of VR1 – VR10. The Command Dictionary states: ""To playback more than one data set at a time, multiple start commands in continuous order must be sent."". The test does not appear to playback more than one data set for each VR, therefore, it does not address all aspects of the start_dataset_playback command and of DS011 in its entirety.",1/13/05ProjectA - TIM - 1449,"ProjectA OBC C&DH Flight Software Test Procedures, ds_enable_disable_data_overwrite_test(), Does Not Fully Verify the Linked SRS Requirements",3,"This test is designed to verify the following SRS requirements: DS001 (L4-SROBC-139) The OBC-C&DH software shall provide ground commands to modify the memory quota of an individual Virtual Recorder during run-time operation without disabling the storage into the Virtual Recorder and without disrupting the normal flow of data to the Virtual Recorder. DS002 (L4-SROBC-140) The OBC-C&DH software shall support the options of either autonomously overwriting recorded data (OVERWRITE_ENABLE) or discarding new data (OVERWRITE_DISABLED) when the QUOTA for a given Virtual Recorder becomes exhausted. DS003 (L4-SROBC-141) If a Virtual Recorder with OVERWRITE_DISABLED becomes full, the OBC-C&DH software shall discard newly arriving telemetry data. DS004 (L4-SROBC-142) When a Virtual Recorder operating in OVERWRITE_ENABLE mode becomes full (i.e., its QUOTA becomes exhausted), the OBC-C&DH software shall overwrite data in the oldest recorded block with the newly arriving data. Issues: (1) The test script does not verify DS001. There are no commands sent that modify the VR memory quota. (2) The script (as copied below) appears to be overwriting the last recorded block, not the oldest recorded block as required by DS004. ; *************************************************** ; While DS_VR_Status[3].last_recorded_seq_num is incrementing ; we will send the enable overwrite command. ; *************************************************** wait ( DS_VR_Status[3].last_recorded_seq_num > DS_VR_Status[3].first_seq_nums_d0 ) @ds:enable_data_overwrite VR4_MASK wait R@DS_VR_Status[3].overwrite_enabled = 1 wait DS_VR_Status[3].total_avail_memory_blocks = 1 thisvar1 = DS_VR_Status[3].last_recorded_seq_num wait 5 thisvar2 = DS_VR_Status[3].last_recorded_seq_num wait thisvar2 > thisvar1 ; *************************************************** ; Overwrite is currently enabled and overwriting the ; last VR4 position continuously. ; Now we will disable overwrite. Hit GO!",1/13/05ProjectA - TIM - 1448,"ProjectA OBC C&DH Flight Software Test Procedures, ds_change_filter_test(), Does Not Fully Verify the Linked SRS Requirement",4,"This test is designed to verify SRS DS020 (L4-SROBC-162) The linked SRS requirement is: DS020 (L4-SROBC-162) The OBC-C&DH software shall accept and execute a SELECT_DS_FILTER command, which selects the specified storage filter table for use in subsequent CCSDS packet filtering operations. The test script states: ; Purpose: This script will verify the following ProjectA Data Storage ; (DS) requirements. ; ; DS020 ; DS021 Select one of the 8 filter tables Issues: The stated requirement number DS021 is incorrect (it should be DS020). The test script does not show that the actual filtering occurs per the table contents; it only shows that the new filter table is initiated. It is unclear where filtering per the table defined parameters is verified.",1/12/05ProjectA - TIM - 1447,"ProjectA OBC C&DH Flight Software Test Procedures, ds_reset_command_counters (), Does Not Verify the Linked SRS Requirement",3,"This test is designed to verify SRS DS021 (L4-SROBC-163) The linked SRS requirement is: DS021 The OBC-C&DH software shall accept and execute a RESET_DS_HOUSEKEEPING command, which resets housekeeping data that is normally reported in the real-time telemetry stream. Section 8.4 of the test procedure states: This test verifies the following DS functions: Reset Command Counters. It is noted that the Purpose Section of the test script does not state what the purpose is. The script title indicates that the intent is to test ""command counter reset"". The pass/fail identified in the script is: wait (DS_command_executed_cnt = 0) wait (DS_command_rejected_cnt = 0) The test does not appear to reset housekeeping data but rather resets the DS command counters. The linked SRS requirement is not verified by this test. The command dictionary made available to IV&V does not contain a command to reset HK data. It is noted that the SRS does not identify ""reset values"" for the HK data.",1/12/05ProjectA - TIM - 1446,"EngCntrl v0.2.2: Variable ""next_mode"" used inconsistently in code, and general usage of ""mode"" as mnemonic inconsistent with EngCntrl SRS",4,"SH_SYSTEM.H lines #239-255 defines the 'struct' type, ""NSTAR_DATA_TYPE"". SH_EXTERN.H line #37 declares ""nstar"" as a global structure of type ""NSTAR_DATA_TYPE"". This structure contains the variable ""next_mode"", which seems to take on values corresponding to values defined for ""system_mode"", a variable also residing in the same structure. SH_DEFINE.H lines #493-594 defines these values, which correspond the 7 Engine Modes defined for the Operational Software by the EngCntrl SRS (Note: with the exception of ""BOOTLOAD MODE"", which the EngCntrl SRS references as entirely different application, not a mode). The following files seem to access the ""nstar.next_mode"" variable in one form or another: OP_PROCMODE.C SH_INIT.C SH_PROC_CMD.C The following files contain local variable definitions for a variable named ""next_mode"": OP_CATH_CND.C OP_GRID_CLR.C OP_PROC_ENG.C OP_SAFE_SYS.C OP_SHUTDOWN.C OP_STARTUP.C OP_THROTTLE.C All of the ""next_modes"" referenced by these files are actually sub-modes of each of the 7 Engine modes, or what the EngCntrl SRS seems to refer to as ""steps."" The EngCntrl SRS uses the term ""step(s)"" 214 times; however, this term is not found anywhere either in the EngCntrl code. No direct conflicts were observed among the several different ""next_mode"" variables. So, this issue is mainly targeted at the maintainability and readability of the code. However, consideration should be given when using the same mnemonic for a multitude of variables, as this may lead to misinterpretations by other developers. Minimally, the source code documentation should describe how the mnemonic is used in a given context. However, usage of ""next_mode"" as a local variable would be made more consistent with the EngCntrl SRS by changing mnemonic to ""next_state"". Referenced Source Code: SH_SYSTEM.H: Lines #239-255: typedef struct { XFS_DATA_TYPE xfs; EngCntrl_DATA_TYPE EngCntrl; PPU_DATA_TYPE ppu; INTEGER standby_mainvalve_requested; WORD system_mode; WORD next_mode; THRUST_TYPE thrust; ERROR_TYPE error; WORD accel_startup_voltage; DWORD accel_startup_duration; DWORD accel_startup_time; WORD accel_throttled; WORD power_down_time; } NSTAR_DATA_TYPE; SH_DEFINE.H: Lines #493-594: /*********************************/ /* Define the System Modes */ /*********************************/ #define SAFE_MODE 1 #define STANDBY_MODE 2 #define GRID_CLEAR_MODE 4 #define CATHODE_COND_MODE 8 #define THRUST_MODE 16 #define XFS_ON_MODE 32 #define XFS_INIT_MODE 64 #define BOOTLOAD_MODE 128 SH_EXTERN.H Line #37 extern volatile NSTAR_DATA_TYPE nstar;",1/12/05ProjectA - TIM - 1445,"EngCntrl v0.2.2: ""XSPLYSET"" command format inconsistent with EngCntrl-S/C ICD",3,"EngCntrl/Spacecraft ICD Section 6.3.1.2.7 ""XPSLYSET,"" Table-6-12, ""XSPLYSET Command Format"" defines the parameters for the ""XPSLYSET"" command. According to this table, Word #2 corresponds to the parameter, ""SPLYNUM"". Then, Table 6-13 ""XSPLYSET Setpoint Scale Factor"" defines the conversion factors for the XPSLYSET parameters. A ""SPLYNUM"" value of ""5"" corresponds to ""Accelerator Voltage."" Table 6-13 indicates that the conversion factor formula for this term is: -250.0 * (Setpoint / 4096) = Volts SH_DEFINE.H line #127 appears to define a macro called ""ACCEL_VOLTAGE_TO_COUNTS"" corresponding to this formula. However, the negative sign is dropped from the -250.0 term in the previous formula. Possibly, this sign is handled in hardware or elsewhere in the code. However, without any explanation in the code, the code and the ICD appear inconsistent. Although the ICD indicates the ""XSPLYSET command is intended for ground test operations,"" usage of the ""ACCEL_VOLTAGE_TO_COUNTS"" macro will extend into the mission. Therefore, incorrect handling of the accelerator voltage polarity could have serious consequences. If the code represents the design intent, then source code comments should describe how the polarity of the accelerator voltage is handled, and possibly an update to the ICD will be required. If the ICD specification was not flowed down as intended, the code should be corrected. If the potential exists for the accelerator voltage polarity to be reversed then the fault protection system should have the robustness to handle this. In addition, the referenced line of code ended with a comment indicating ""// V ???"". This is just an example of the 51 lines containing comments with two or more question marks. Some of these lines surround what is obviously debug code, and for those cases, the question marks are possibly being used by convention; however, the majority of these cases are more like the previous example, which implies there are a number of instances where the developer is unsure on the correct implementation. If the question marks serve as some kind of convention, then the code should document this. Otherwise, an action plan should be undertaken to eliminate any uncertainties regarding the code. All instances of ""??"" embedded within source code comments should be removed and replaced by declarative statements. Referenced Specification: EngCntrl/Spacecraft ICD, Section 6.3.1.2.7 XPSLYSET: Table-6-12, XSPLYSET Command Format (Note: Partial listing only): _______________________________________________________________ Word# Parameter Value/Range Definition _______________________________________________________________ 2 SPLYNUM 0 to 5 0 = Discharge Supply 1 = Discharge Heater Supply 2 = Neutralizer Supply 3 = Neutralizer Heater Supply 4 = Beam Supply 5 = Accelerator Supply Table 6-13 XSPLYSET Setpoint Scale Factor (Note: Partial listing only): __________________________________________________________________ SPLYNUM Supply Definition Engineering Scale Factor Units __________________________________________________________________ WORD 5 Accelerator Voltage -250.0 * (Setpoint / 4096) Volts Referenced Source Code: SH_DEFINE.H: Line #127: #define ACCEL_VOLTAGE_TO_COUNTS(eng) (WORD) (eng * 4096L / 250.0) // V ???",1/12/05ProjectA - TIM - 1444,"EngCntrl v0.2.2: ""XSCRBMEM"" command format inconsistent with EngCntrl-S/C ICD",3,"According to Table 6-44 ""XSCRBMEM Command Format"" of the ProjectA EngCntrl - Spacecraft ICD dated May 7, 2004, the command XSCRBMEM comprises the following four words: 0 OPCODE 1 OFFSET 2 SEGMENT 3 CHECKSUM However, the source code file, SH_PROC_CMD.C, included in version 0.2.2 of the EngCntrl code, indicates the XSCRBMEM comprises the following five words. // w0 = opcode // w1 = start address (MSW) // w2 = start address (LSW) // w3 = end address (MSW) // w4 = end address (LSW) // w5 = checksum Therefore, these two artifacts are inconsistent. Presumably, the source represents the true decomposition of the XSCRBMEM, in which case the impact is marginal. However, the ProjectA EngCntrl - Spacecraft ICD should still represent the design. The ICD should also distinguish between the Operational mode-specific XSCRBMEM command and the BSCRBMEM Bootloader mode-specific. Currently, it only identifies the former for both Operational and Bootloader modes.",1/12/05ProjectA - TIM - 1443,"EngCntrl v0.2.2: 112 elements allocated for array of structure type 'NSTAR_CONFIG_DATA_TYPE', but only 16 elements initialized",3,"SH_CONFIG.H defines structure type 'NSTAR_CONFIG_DATA_TYPE'. Line #86 contains the declaration for the array named ""throttle_table"". The number of elements allocated to this array corresponds to the constant ""NUMBER_OF_POWER_LEVELS"", which SH_DEFINE.H defines as 112. SH_CFG_DATA.C lines #140 - 364 initializes ""throttle_table"" array elements 0 through 15. However, the remaining 96 elements do not appear to be initialized elsewhere in the EngCntrl FSW. Possibly, the project intends to populate the remaining table elements in-flight, or the array size was inherited from the DS-1. Given the uncertainties, the impact of this issue is difficult to ascertain with a high level of certainty. Minimally, it will make the code more difficult to maintain. If the code is to contain at least initial values for all ""throttle_table"" entries, then either the remaining uninitialized table entries should be added to SH_CFG_DATA.C or the array size needs to be limited to 16. If the intent is to populate the remaining table elements in-flight, then the code should document this. FlexeLint Message: Message #785: Too few initializers for aggregate (line 26, file OP_HI_SPEED.C) Description: The number of initializers in a brace-enclosed initializer was less than the number of items in the aggregate. Default initialization is taken. An exception is made with the initializer {0}. This is given a separate message number in the Elective Note category ( 943). It is normally considered to be simply a stylized way of initializing all members to 0 Referenced Source Code: SH_CONFIG.H: Lines #56 - 119: typedef struct { . 86 THROTTLE_TABLE_TYPE throttle_table[NUMBER_OF_POWER_LEVELS]; . } NSTAR_CONFIG_DATA_TYPE; SH_DEFINE.H: Line #201: #define NUMBER_OF_POWER_LEVELS 112 SH_CFG_DATA.C: Lines #140 - 364: (Macro ""MAKE_THROTTLE_TABLE_ENTRY"" initializes ""throttle_table"" array elements 0 through 15)",1/12/05ProjectA - TIM - 1442,"EngCntrl v0.2.2: Variable ""number_of_mae_hits"" used, but never initialized",5,"SH_DATABASE.H line #156 provides the declaration for the variable ""number_of_mae_hits"". SH_EXTERN.H line #120 defines this variable as an 'extern' variable. This variable is used in the EngCntrl FSW, but never initialized. The initial value of this variable should presumedly be ""0"". This variable should be initialized to ""0"" intrinsically, since 'C' allows this. However, this is not good coding practice. Therefore, recommend initializing the variable accordingly in the declaration found in SH_DATABASE.H. FlexeLint Message: Message #729: Symbol 'number_of_mae_hits' (line156, file SH_DATABASE.H, module SH_MAIN.C) not explicitly initialized Description: The named inter-module variable (external variable) was not explicitly initialized. See the comments on message 727 for more details. This message is suppressed for unit checkout (-u). Message ID #727 Description: The named static variable (local to a function) was not explicitly initialized before use. The following remarks apply to messages 728 and 729 as well as 727. By no explicit initialization we mean that there was no initializer present in the definition of the object, no direct assignment to the object, and no address operator applied to the object or, if the address of the object was taken, it was assigned to a pointer to const. These messages do not necessarily signal errors since the implicit initialization for static variables is 0. However, the messages are helpful in indicating those variables that you had forgotten to initialize to a value. To extract the maximum benefit from the messages we suggest that you employ an explicit initializer for those variables that you want to initialize to 0. For example: static int n = 0; For variables that will be initialized dynamically, do not use an explicit initializer as in: static int m; This message will be given for any array, struct or union if no member or element has been assigned a value. Referenced Source Code: SH_DATABASE.H: Line #156: WORD number_of_mae_hits; SH_EXTERN.H: Line #120: extern WORD number_of_mae_hits;",1/12/05ProjectA - TIM - 1441,"EngCntrl v0.2.2: Variable ""timer_int_slip_count"" used, but never initialized",5,"SH_DATABASE.H line #74 provides the declaration for the variable ""timer_int_slip_count"". SH_EXTERN.H line #43 defines this variable as an 'extern' variable. This variable is used in the EngCntrl FSW, but never initialized. The initial value of this variable should presumedly be ""0"". This variable should be initialized to ""0"" intrinsically, since 'C' allows this. However, this is not good coding practice. Therefore, recommend initializing the variable accordingly in the declaration found in SH_DATABASE.H. FlexeLint Message: Message #729: Symbol 'timer_int_slip_count' (line 74, file SH_DATABASE.H, module SH_MAIN.C) not explicitly initialized Description: The named inter-module variable (external variable) was not explicitly initialized. See the comments on message 727 for more details. This message is suppressed for unit checkout (-u). Message ID #727 Description: The named static variable (local to a function) was not explicitly initialized before use. The following remarks apply to messages 728 and 729 as well as 727. By no explicit initialization we mean that there was no initializer present in the definition of the object, no direct assignment to the object, and no address operator applied to the object or, if the address of the object was taken, it was assigned to a pointer to const. These messages do not necessarily signal errors since the implicit initialization for static variables is 0. However, the messages are helpful in indicating those variables that you had forgotten to initialize to a value. To extract the maximum benefit from the messages we suggest that you employ an explicit initializer for those variables that you want to initialize to 0. For example: static int n = 0; For variables that will be initialized dynamically, do not use an explicit initializer as in: static int m; This message will be given for any array, struct or union if no member or element has been assigned a value. Referenced Source Code: SH_DATABASE.H: Line #74: WORD timer_int_slip_count; SH_EXTERN.H: Line #43: extern WORD timer_int_slip_count;",1/12/05ProjectA - TIM - 1440,"EngCntrl v0.2.2: Variable ""cycle_overflow_count"" used, but never initialized",5,"SH_DATABASE.H line #73 provides the declaration for the variable ""cycle_overflow_count"". SH_EXTERN.H line #42 defines this variable as an 'extern' variable. This variable is used in the EngCntrl FSW, but never initialized. The initial value of this variable should presumedly be ""0"". This variable should be initialized to ""0"" intrinsically, since 'C' supports this. Consequently, the impact of this issue is marginal. However, this is not good coding practice. Therefore, recommend initializing the variable accordingly in the declaration found in SH_DATABASE.H. FlexeLint Message: Message #729: Symbol 'cycle_overflow_count' (line 73, file SH_DATABASE.H, module SH_MAIN.C) not explicitly initialized Description: The named inter-module variable (external variable) was not explicitly initialized. See the comments on message 727 for more details. This message is suppressed for unit checkout (-u). Message ID #727 Description: The named static variable (local to a function) was not explicitly initialized before use. The following remarks apply to messages 728 and 729 as well as 727. By no explicit initialization we mean that there was no initializer present in the definition of the object, no direct assignment to the object, and no address operator applied to the object or, if the address of the object was taken, it was assigned to a pointer to const. These messages do not necessarily signal errors since the implicit initialization for static variables is 0. However, the messages are helpful in indicating those variables that you had forgotten to initialize to a value. To extract the maximum benefit from the messages we suggest that you employ an explicit initializer for those variables that you want to initialize to 0. For example: static int n = 0; For variables that will be initialized dynamically, do not use an explicit initializer as in: static int m; This message will be given for any array, struct or union if no member or element has been assigned a value. Referenced Source Code: SH_DATABASE.H: Line #73: WORD cycle_overflow_count; SH_EXTERN.H: Line #42: extern WORD cycle_overflow_count;",1/12/05ProjectA - TIM - 1439,"EngCntrl v0.2.2: Variable ""safe_cmd_loss_timer"" set, but never accessed by Bootloader Software",5,"SH_PROC_CMD.C line #107 increments the counter variable named ""safe_cmd_loss_timer"" and line #138 resets the value to ""0"". This variable is defined as an extern variable by SH_EXTERN.H line #92 and is initialized to ""0"" by SH_DATABASE.H line #126. SH_PROC_CMD.C line #1583 represents the only place in the EngCntrl code that actually accesses this variable. The preprocessor directive on line #1581 of SH_PROC_CMD.C prevents the usage of this variable in line #1583 from being included in the BootLoader software. Therefore, this variable is never accessed anywhere else by the BootLoader software. The purpose and intent of this code should be reassessed to determine if it serves a necessary function. If it does, then presumably additional code will need to be written to support the BootLoader software. If not, the code related to this variable should be excluded from the Bootloader Software by means of preprocessor directives. Lint Warning Message: Message #552: Symbol ""safe_cmd_loss_timer"" (line 126, file SH_DATABASE.H, module SH_MAIN.C) not accessed Description: An external variable was not accessed though the variable was referenced. See the explanation under message 550 above for a description of ""access"". Message #550: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Referenced Source Code: SH_PROC_CMD.C: Lines #103-107: /***************************************/ /* Increment Command Loss Timer. */ /***************************************/ ++ safe_cmd_loss_timer; Line #138: safe_cmd_loss_timer = 0; Lines #1581-1584: #if THIS_IS_OP_NOT_BL if ( (safe_cmd_loss_timer >= safe_cmd_loss_timeout) && (nstar.system_mode != SAFE_MODE) ) SH_DATABASE.H: Line #126: DWORD safe_cmd_loss_timer = 0; // units = seconds SH_EXTERN.: Line #92: extern DWORD safe_cmd_loss_timer;",1/12/05ProjectA - TIM - 1438,"EngCntrl v0.2.2: Variable ""safe_mode_in_effect"" set, but never accessed",4,"OP_PROCMODE.C line #80 sets the value of a variable named ""safe_mode_in_effect"" to ""FALSE"" and line #93 sets the value to ""TRUE"". This variable is defined as an extern variable by SH_EXTERN.H line #90 and is initialized to ""TRUE"" by SH_DATABASE.H line #124. The variable's name suggests that it is flag used to indicate whether the EngCntrl is in SAFE MODE. However, this variable is apparently never accessed elsewhere in the EngCntrl code. Since the intent of this code is unclear, the impact of this apparent issue is uncertain. Minimally, it will make the code more difficult to maintain. If the variable is accessible by some alternate means outside the code or simply serves to make the code more human readable, then the code should document this. Otherwise, the purpose and intent of this code should be reassessed to determine if it serves a necessary function. If it does, then presumably additional code will need to be written. If not, the code related to this variable should be removed from the EngCntrl FSW. FlexeLint Warning Message: Message #552: Symbol 'safe_mode_in_effect' (line 130, file SH_DATABASE.H, module SH_MAIN.C) not accessed Description: An external variable was not accessed though the variable was referenced. See the explanation under message 550 above for a description of ""access"". Message #550: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Referenced Source Code: OP_PROCMODE.C: Lines #80: safe_mode_in_effect = FALSE; Lines #93: safe_mode_in_effect = TRUE; SH_DATABASE.H: Line #124: WORD safe_mode_in_effect = TRUE; SH_EXTERN.: Line #90: extern WORD safe_mode_in_effect;",1/12/05ProjectA - TIM - 1437,"EngCntrl v0.2.2: Variable ""plenum_mode_changed"" set, but never accessed",4,"OP_PROCMODE.C line #771 sets the value of a variable named ""plenum_mode_changed"" to ""FALSE"". This variable is defined as an extern variable by SH_EXTERN.H line #89 and is initialized to ""FALSE"" by SH_DATABASE.H line #97. A source code comment indicates this variable is a ""global flag."" However, this variable is apparently never accessed or set to ""TRUE"" elsewhere in the EngCntrl code. Since the intent of this code is unclear, the impact of this apparent issue is uncertain. Minimally, it will make the code more difficult to maintain. If this variable is accessible by some alternate means outside the code, then the code should document this. Otherwise, the purpose and intent of this code should be reassessed to determine if it serves a necessary function. If it does, then presumably additional code will need to be written. If not, the code related to this variable should be removed from the EngCntrl FSW. FlexeLint Warning Message: Message #552: Symbol 'plenum_mode_changed' (line 129, file SH_DATABASE.H, module SH_MAIN.C) not accessed Description: An external variable was not accessed though the variable was referenced. See the explanation under message 550 above for a description of ""access"". Message #550 Description: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Referenced Source Code: OP_PROCMODE.C: Lines #767-771: /*********************************/ /* Reset some global flags */ /*********************************/ plenum_mode_changed = FALSE; SH_DATABASE.H: Line #123: WORD plenum_mode_changed = FALSE; SH_EXTERN.: Line #89: extern WORD plenum_mode_changed",1/12/05ProjectA - TIM - 1436,"EngCntrl v0.2.2: Variable ""last_adc_status_word"" set, but never accessed",4,"SH_DATA.ACQ.C line #67 sets the value of a variable named ""last_adc_status_word"". This variable is defined as an extern variable by SH_EXTERN.H line #58 and is initialized by SH_DATABASE.H line #97. A source code comment indicates this variable serves as a ""safe place."" However, this variable is apparently never accessed elsewhere in the EngCntrl code. Since the intent of this code is unclear, the impact of this apparent issue is uncertain. Minimally, it will make the code more difficult to maintain. If the data is accessible by some alternate means outside the code, then the code should document this. Otherwise, the purpose and intent of this code should be reassessed to determine if it serves a necessary function. If it does, then presumably additional code will need to be written. If not, the code related to this variable should be removed from the EngCntrl FSW. FlexeLint Warning Message: Message #552: Symbol 'last_adc_status_word' (line 103, file SH_DATABASE.H, module SH_MAIN.C) not accessed Description: An external variable was not accessed though the variable was referenced. See the explanation under message 550 above for a description of ""access"". Message #550 Description: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Referenced Source Code: SH_DATA.ACQ.C: Lines #66-67: // Copy ADC status word into a safe place. last_adc_status_word = processor_regs->a2d_control; SH_DATABASE.H: Line #97: WORD last_adc_status_word = 0; SH_EXTERN.: Line #58: extern WORD last_adc_status_word;",1/12/05ProjectA - TIM - 1435,"EngCntrl v0.2.2: Array ""hi_speed_recycle_data"" set, but never accessed",4,"OP_HI_SPEED.C line #28 defines an array of structures of type HI_SPEED_DATA_TYPE named ""hi_speed_recycle_data"". The three lowest elements of this array (i.e. recycle number, time, and data) are set on lines #65-67, #73-75, and #101-102 respectively. However, this array and its elements are apparently never accessed elsewhere in the EngCntrl code. Source code comments indicate this is recorded data, but no other purpose is described. Since the intent of this code is unclear, the impact of this apparent issue is uncertain. Minimally, it will make the code more difficult to maintain. If the data is accessible by some alternate means outside the code, then the code should document this. Otherwise, the purpose and intent of this code should be reassessed to determine if it serves a necessary function. If it does, then presumably additional code will need to be written. If not, the code related to this array should be removed from the EngCntrl FSW. FlexeLint Warning Message: Message #552: Symbol 'hi_speed_recycle_data' (line 28, file OP_HI_SPEED.C) not accessed Description: An external variable was not accessed though the variable was referenced. See the explanation under message 550 above for a description of ""access"". Message #550 Description: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Referenced Source Code: OP_HI_SPEED.C: Line #28: HI_SPEED_DATA_TYPE hi_speed_recycle_data[NUMBER_OF_HIGH_SPEED_EVENTS] Lines #61-67: /************************************/ /* Record the recycle number */ /************************************/ hi_speed_recycle_data[recycle_counter % NUMBER_OF_HIGH_SPEED_EVENTS]. record[i].recycle_number= recycle_counter; Lines #69-75: /***************************/ /* Record the time */ /***************************/ hi_speed_recycle_data[recycle_counter % NUMBER_OF_HIGH_SPEED_EVENTS]. record[i].time = (b1553_registers->time_tag - recycle_start_time); Lines #95-102: /***************************/ /* Record the data */ /***************************/ hi_speed_recycle_data[recycle_counter % NUMBER_OF_HIGH_SPEED_EVENTS]. record[i].data = ppu_data;",1/12/05ProjectA - TIM - 1434,"EngCntrl v0.2.2: Array ""grid_clear_data"" set, but never accessed",4,"OP_HI_SPEED.C line #26 defines a 2-dimensional array named ""grid_clear_data"". This array is set on lines #154-155, but apparently never used elsewhere in the EngCntrl code. Source code comments indicate this is recorded data, but no other purpose is described. Since the intent of this code is unclear, the impact of this apparent issue is uncertain. Minimally, it will make the code more difficult to maintain. If the data is accessible by some alternate means outside the code, then the code should document this. Otherwise, the purpose and intent of this code should be reassessed to determine if it serves a necessary function. If it does, then presumably additional code will need to be written. If not, the code related to this array should be removed from the EngCntrl FSW. FlexeLint Warning Message: Message #552: Symbol 'grid_clear_data' (line 26, file OP_HI_SPEED.C) not accessed Description: An external variable was not accessed though the variable was referenced. See the explanation under message 550 above for a description of ""access"". Message #550 Description: A variable (local to some function) was not accessed. This means that the value of a variable was never used. Perhaps the variable was assigned a value but was never used. Note that a variable's value is not considered accessed by autoincrementing or autodecrementing unless the autoincrement/decrement appears within a larger expression, which uses the resulting value. The same applies to a construct of the form: var += expression. If an address of a variable is taken, its value is assumed to be accessed. An array, struct or union is considered accessed if any portion thereof is accessed. Referenced Source Code: OP_HI_SPEED.C: Line #26: WORD grid_clear_data[NUMBER_OF_GRID_CLEAR_SAMPLES][2]; Lines #154-155: grid_clear_data[i][0] = b1553_registers->time_tag - grid_clear_start_time; grid_clear_data[i][1] = (get_slice_telemetry() & 0xFFF);",1/12/05ProjectA - TIM - 1433,"EngCntrl v0.2.2: Constant ""THIS_IS_OP_NOT_BL"" inconsistent usage and missing documentation",5,"The variable, ""THIS_IS_OP_NOT_BL"", appears 45 times in the EngCntrl code, but is never defined in the EngCntrl source code. According to line #4 of the BL.loc and OP.loc, this variable is defined as a command line option. According to these files, setting this value to ""0"" produces the Bootloader Software application, and a value of ""1"" produces the Operational Software application. Typically, the variable appears in a preprocessor directive taking the form '#if-#endif-#else' to support conditional compilation, such that it is never accessed by the compiled versions of the EngCntrl software. However, SH_INIT.C lines #35, 234-235, & 239 and SH_INIT1553.C line #95 access this variable in both the Bootloader Software and Operational Software applications. SH_INIT.C uses it like a boolean for the 'if' conditions of several 'if-then-else' statements; whereas, INIT1553.C uses it as a pointer offset. The various usages of the variable, ""THIS_IS_OP_NOT_BL"", are all syntactically correct. However, the inconsistent usage combined with the lack of source code documentation for this variable makes the code less readable and more difficult to maintain. This could especially have negative consequences for any future reuse of the code. Better documentation of the variable, ""THIS_IS_OP_NOT_BL"", should be added to the EngCntrl source code. For consistency and given the number instances, the cases where this variable is not part of a conditional compilation statement should be converted as such. Referenced Source Code: BL.loc: Line #4: Command line options: C:\PROGRA~1\Paradigm\bin\locate.exe -DTHIS_IS_OP_NOT_BL=0 -cLOCATE.CFG bin\BL.ROM OP.loc: Line #4: Command line options: C:\PROGRA~1\Paradigm\bin\locate.exe -DTHIS_IS_OP_NOT_BL=1 -cLOCATE.CFG bin\OP.ROM SH_INIT.C: Line #34-35: DWORD far * reincarnation_seed_ptr = (DWORD far *)(THIS_IS_OP_NOT_BL ? 0x3000FFFCL : 0x3000FFF8L); Lines #234-235: nstar.system_mode = THIS_IS_OP_NOT_BL ? SAFE_MODE : BOOTLOAD_MODE nstar.next_mode = THIS_IS_OP_NOT_BL ? SAFE_MODE : BOOTLOAD_MODE Line #239: safe_mode = THIS_IS_OP_NOT_BL ? SAFE_START : SAFE_IDLE SH_INIT1553.C: Line #95 PTR[ i + (0x1000 * (THIS_IS_OP_NOT_BL + 1)) ] = PTR[i]",1/12/05ProjectA - TIM - 1432,EngCntrl v0.2.2: Comparison between integers and unsigned integers,2,"OP_RUN_XFS.C line #451: There are comparisons here between integers (plenum_error_1 and plenum_error_2) and unsigned integer values (xfs_control.max_plenum_high and xfs_control.max_plenum_low). The integer values (plenum_error_1 and plenum_error_2) have the potential to be negative numbers. This is an issue because the promotion of a negative number to unsigned makes the negative number very large and will produce erroneous comparison results. To resolve this problem, either cast the integers (plenum_error_1 and plenum_error_2) to unsigned if you know they can never be less than zero or cast the unsigned (xfs_control.max_plenum_high and xfs_control.max_plenum_low) to int if you know it can never exceed the maximum int. FlexeLint Warning Message: Message #574: Signed-unsigned mix with relational Message #574 Description: 'The four relational operators are: > >= < <= One of the operands to a relational operator was signed and the other unsigned; also, the signed quantity could be negative. For example: if( u > n ) ... where u is unsigned and n is signed will elicit this message whereas: if( u > 12 ) ... will not (even though 12 is officially an int it is obvious that it is not negative). It is not a good idea to mix unsigned quantities with signed quantities in any case (a 737 will also be issued) but, with the four relationals, a negative value can produce obscure results. For example, if the conditional: if( n < 0 ) ... is true then the similar appearing: u = 0; if( n < u ) ... is false because the promotion to unsigned makes n very large. To resolve this problem, either cast the integer to unsigned if you know it can never be less than zero or cast the unsigned to an int if you know it can never exceed the maximum int. Referenced Source Code: OP_RUN_XFS.C line #451: /*********************************/ /* Check for plenum errors */ /*********************************/ 451 if ( (plenum_error_1 >= xfs_control.max_plenum_high) || (plenum_error_2 >= xfs_control.max_plenum_low) ) { xfs_control.main_leak_counter++; } else { xfs_control.main_leak_counter = 0; }",1/10/05ProjectA - TIM - 1431,Inconsistent Attitude Control Tolerance in Target Pointing Mode with RWA,3,"The attitude controller tolerance allocation for target pointing mode with RWA is 0.250 mrad under section 3.2.1 Pointing Allocations (L4-ACS-456) in the ACS Performance Spec (S912-PF4610 Revision C). However, the allocation is 0.200 mrad defined in L3-SFS-2429 in the Level 3 Spacecraft and Flight System Requirements (SCFSRD, S912-GR 3400, JPL-D-25870), (DOORS export 11/2/04). Referenced Requirements: L4-ACS-456 3.2.1 Pointing Allocations Attitude errors shall be maintained to within the following allocations, all expressed as 3-sigma, zero-to-peak, per axis values: Attitude determination errors: Science mode 0.100 mrad Target Pointing mode, RWA control 0.250 mrad Target Pointing mode, RCS control 0.450 mrad Delta-V mode 0.450 mrad Attitude control tolerances: Science mode 0.200 mrad Target Pointing mode, RWA control 0.250 mrad Target Pointing mode, RCS control 0.450 mrad Delta-V mode, transverse axes 6.000 mrad Delta-V mode, thrust axis, Engine/RWA 6.000 mrad Delta-V mode, thrust axis, Engine/RCS or RCS 94.25 mrad Attitude Transients: RWA torque disturbances* 0.300 mrad Solar array stepping 0.100 mrad Momentum unloading 1.525 mrad Data latency (external torques) 0.001 mrad * RWA torque disturbances include torque errors due to wheel static and dynamic imbalance, zero-speed crossings, drag torque variation, torque ripple, torque noise, and torque quantization. ------------------------- L3-SFS-2429 The attitude controller tolerance1 allocations are as follows: science mode 0.200 mrad target pointing mode, RWA 0.200 mrad target pointing mode, RCS 1.780 mrad delta V mode - X’ and Y’2 6.000 mrad delta V mode - Z’3 94.25 mrad 1) Does not include attitude determination or momentum unloads. 2) X’ and Y’ are the axes perpendicular to the thrust vector. 3) Z’ is the axis parallel to the thrust vector.",1/6/05ProjectA - TIM - 1430,"ProjectA OBC C&DH Flight Software Test Procedures, tg_test(), Is Not Consistent With The SRS Requirements",4,"Section 5.7.5 in the OBC C&DH SRS states: TG004 (L4-SROBC-95) Flight Software shall collect downlink loopback telemetry via HSS2 (when enabled) and make it available in spacecraft housekeeping telemetry. It is noted that: (1) Section 5.7.3 (HSS2)in the OBC C&DH SRS also states a requirement for the loopback function and (2) Section 5.7.4 (HSS3)does not state a requirment for loopback. These sections are in agreement concerning the loopback function. Issue: Test #8 in the tg_test() performs a loopback test for both HSS2 and HSS3. The script states: HK Telemetry Tested: ; tg_HSS2_loopback_wd - Loopback echo ; tg_HSS3_loopback_wd - Loopback echo ; ; Commands Tested: ; @dl:Write_HSS2_Loopback ; @mu:Write_HSS3_Loopback It is unclear if: (1) the SRS is incorrect, (2) the script is incorrect (e.g., it contains a test from the legacy program that should be removed)or (3) other problems.",1/6/05ProjectA - TIM - 1428,ProjectA OBC C&DH Flight Software Test Procedures for Telemetry Out Does Not Verify SRS Requirement TO008,3,Requirement TO008 (L4-SROBC-131) states: The OBC-C&DH software shall provide the capability to telemeter data (by Application ID) using packet time based filtering. The Flight Software will use 15 bits out of the 64-bit spacecraft time code field (consisting of 11 bits of the second field and 4 bits of the sub-seconds field) of the spacecraft time code found in the CCSDS packet secondary header. Packets will be recorded if and only if the relevant bits of the packet time stamp modulo X is less than N. It is noted that the test procedures for Telemetry Out (TO) address all TO requirements except TO008. It is unclear if this is an oversight or that TO008 will be tested elsewhere.,12/20/04ProjectA - TIM - 1427,"ProjectA OBC C&DH Flight Software Test Procedures, to_jam_swap_filter_factor_test(), Does Not Fully Verify the Linked SRS Requirements",4,"This test is designed to verify SRS TO013 (L4-SROBC-135) and TO014 (L4-SROBC-136). The SRS requirements are: TO013 The OBC-C&DH software shall accept and execute a JAM_FILTER factor command, which given the application id of a packet will modify the filter factors for the filter table currently in use. TO014 The OBC-C&DH software shall accept and execute a SWAP_FILTER factor command, which will swap filter factors for the 2 specified application id's for the filter table currently in use. Issue: The initial filter table is 4. Commands @to:jam_filter_factor 115, 2, 1, 0 (;apid=115 range=2 rate=1 offset=0) and jam_filter_factor 117, 3, 1, 0 are sent. The pass/fail is apparently stated as: ""wait; Operator: please note differences in the two tables"". This implies that verification is performed by the operator: noting that changes to the filter tables occurred as commanded. While this shows the tables changed it does not verify that the actual filtering of packets occurred as commanded. The SWAP_FILTER factor test is performed in a similar fashion: apids 115 and 117 are swapped and the resulting tables compared. Again, the actual filtering of packets was not verified. In addition, the pass/fail criteria (""wait; Operator: please note that the filter factors are swapped to apids 33 and 35"") seems incorrect as swapping was commanded for 115 and 117.",12/20/04ProjectA - TIM - 1426,"ProjectA OBC C&DH Flight Software Test Procedures, to_change_filter_test(), Does Not Fully Verify the Linked SRS Requirements",3,"This test is designed to verify SRS TO009 (L4-SROBC-132) and TO011 (L4-SROBC-134). The SRS requirements are: TO009 The OBC-C&DH software shall provide 8 telemetry filter tables for real-time telemetry transmission. TO011 The OBC-C&DH software shall accept and execute a SELECT_TELEMETRY_FILTER command, which immediately begins filtering telemetry packets according to the parameters stored in the specified filter table index. Issue: The test for (to:change_filter_table $filter_table = 8) seems to fail. This does not verify that 8 tables can be selected as required. The test does not show that the “immediate” part of the requirement is verified (although the SRS does not specifically state a time requirement). The test does not show that the filtering is performed according to the parameters specified in the table index (i.e., the TLM output is not checked to verify that it matches the expected values). The tests only show that the commands are received and executed (in that the ""TO_current_filter_table"" number matches the command).",12/20/04ProjectA - TIM - 1425,"ProjectA OBC C&DH Flight Software Test Procedures, to_reset_counters_test(), Does Not Verify the Linked SRS Requirement",3,"The linked requirement, TO010 (or L4-SROBC-133) states: ""The OBC-C&DH software shall accept and execute a RESET_TO_HOUSEKEEPING command, which resets housekeeping data that is normally reported in the real-time telemetry stream."" The test is titled: ""TO010 Reset TO Cmd Counters"". The procedure issues the command: @to:reset_counters. Issue: It is unclear if the command @to:reset_counters performs both a ""counter reset"" and a ""RESET_TO_HOUSEKEEPING"". If it does not, then the SRS requirement has not been verified. It is noted that the test procedure does not contain steps to verify if a ""housekkeping reset"" has been performed. In addition, there appears to be no command to perform ""RESET_TO_HOUSEKEEPING"" identified in the version of the command & telemetry dictionary made availble to IV&V.",12/19/04ProjectA - TIM - 1423,Safe Communication Mode Not Defined in ProjectA Specifications and Design Notes,2,"The documents identified below do not include requirements or definition for the Safe Communication Mode as identified in the Fault Protection System Tagup package dated October 20, 2004 and in the ProjectA Fault Protection (FP) Performance Specification S912-PF3300 (FP Design Note Deliverable TD 009) REVISION A. DN-ProjectA-ACS-001 Attitude Control Subsystem Mode Definition, March 3, 2003 DN-ProjectA-SE-001 CDRL TD-008 Program: ProjectA Title: ProjectA System State and Subsystem Mode Definitions, September 20, 2004 DN-ProjectA-ACS-011 ProjectA Attitude Control Subsystem Fault Detection and Correction Design, April 12, 2004 SFSRD, L3, D-25870, from DOORS Database dated November 2, 2004. ProjectA ACS Subsystem Performance Specification, L4, November 2, 2004 ProjectA Flight System Description Document, CDRL TD-006, S912-GD3200 Revision -, released on September 27, 2004",12/9/04ProjectA - TIM - 1422,Incomplete Definition for Fault Containment Regions in the ACS Performance Specification,3,"The ACS Performance Specification, Section 3.2.5.8 Failure Propagation, states: “A failure of an ACS component shall not propagate to any other component or subsystem on the spacecraft.” This requirement is basically the same as L3-SFS-887 which addresses “fault containment regions”. When flowed down to the ACS Performance Specification level this requirement should be decomposed into specific requirements for each subsystem/component that will collectively result in “preventing failure propagation”. It is noted that this subject is discussed to some degree in the FP Performance Specification, Sections 3.5 and 4.0. However, if this requirement is to be implemented in the ACS subsystem, then the FP Performance Specification should include detailed requirements that are specific to ACS components. Referenced Requirement: L3-SFS-887 The Flight System shall have Fault Containment Regions (FCR) around each of the following flight system sections: [HW] CEU, ACE, ACE peripherals (reaction wheel, gyro, thruster, sun sensor, SADE/SADA) , SDST, PDU/HVEA, EngCntrl, EngCntrl peripherals (PPU, thruster, gimbal assembly, XFA), and Instruments (FC, VIR, GRaND) - [SW] flight system processors.",12/2/04ProjectA - TIM - 1421,Inconsistent Definition of IRU Sensing Rate,4,"ACS Performance Specification, Section 3.2.5.2.3 IRU Saturated Rate Data Test, states: “The rate derived from each of the active gyro data words shall be checked to be within the specified range. A gyro assembly fault shall be detected and the gyro data declared INVALID if both of the following conditions are met: The ACS is not in Rate Nulling submode, and The magnitude of the sensed rate on any axis is greater than or equal to the selected saturation rate of the gyro (default is 2.5 degrees/second), and remains saturated for a selected number of samples. This test shall be performed at a frequency of 5 Hz. The gyros may be saturated in Rate Nulling submode, depending on the initial conditions prior to entry, and at least one gyro axis shall most likely be saturated following separation from the launch vehicle upper stage. Hence, if the ACS is in Rate Nulling submode, initially only a telemetry flag is set indicating gyro saturation, and no fault will be detected. However, a fault may be detected if gyro saturation in Rate Nulling submode persists beyond the selected worst-case time for transitioning to Sun Acquisition submode, as described in Section 3.2.5.2.4.” L3-SFS-2383 states that the maximum sensing rate is 15deg/sec or 2.5 RPM. It is unclear which requirement is correct (2.5 degrees/second or 2.5 RPM).",12/2/04ProjectA - TIM - 1419,OBC C&DH SRS Requirements SC018 and SC019 Are Not Fully Verified by the Linked OBC C&DH Flight Software Test Procedures,3,"The OBC C&DH SRS states: SC018 Flight Software shall stop execution of the requested RTS upon receipt of the real-time command STOP_RTS from either the ground or another on-board software application. SC019 Flight Software shall enable or disable the execution of the requested RTS upon receipt of the real-time commands ENABLE_RTS or DISABLE_RTS from either the ground or another on-board software application. Issue: Test #2 in the Software Test Procedures states: SC018 - RTS stopped by ground command SC019 - RTS enabled/disabled by ground command Test #2 does not appear to verify the ""or another on-board software application"" part of requirement in SC018 and SC019.",12/1/04ProjectA - TIM - 1418,ProjectA EngCntrl SRS contains several TBDs while the project is already in the implementation phase,3,There are still 6 remaining TBDs within the EngCntrl SRS and the project is already in the software implementation phase for the EngCntrl software.,11/23/04ProjectA - TIM - 1417,ProjectA EngCntrl Req 3.4.3: The command execution limit is not well defined,4,"ProjectA EngCntrl Software Requirements Specification - Requirement 3.4.3 states: ""3.4.3 Command Execution Limit - The EngCntrl Flight software shall attempt to execute up to 16 commands received from the host spacecraft during each iteration of the 1 Hz control loop."" During the EngCntrl Code Analysis process, portions of the code in the file, SH_PROC_CMD.C appeared directly applicable to Requirement 3.4.3. The following comment was extracted from this file. /* Check if any commands have come in. Process up to */ /* MAX_NUMBER_OF_COMMANDS_PER_SECOND because we must */ /* stay ahead of the S/C command rate capability */ /* The S/C can only send one command/sec, but that will */ /* take forever to download code. Therefore, we'll do */ /* more than that. The control loop for this code will execute MAX_NUMBER_OF_COMMANDS_PER_SECOND, which is currently set to 16 by a preprocessor directive. Without the benefit of the relevant code, the usage of the phrase, ""attempt to execute,"" by requirement 3.4.3 seems ambiguous. However, in light of the code, the intent of requirement seems to be for the EngCntrl FSW to be capable of processing a maximum of 16 commands per cycle. The referenced comment found in SH_PROC_CMD.C seems to expound the intent of requirement 3.4.3. According to this comment, the S/C can only send the EngCntrl one command per second. However, it is unclear whether this translates to one command per 1553 message. The comment also indicates that by handling 16 ""commands"" per second, the EngCntrl FSW will be able to receive a new code upload at a faster rate. Possibly, ""commands"" in this context are simply 1553 data words, which according to the 1553B standard, a maximum of 32 data words can be contained within one 1553 message. However, both requirement 3.4.3 and the code constrain this to 16 words. The ambiguity of this requirement can adversely impact the design and implementation process. Failure to properly define the command execution limit could result in the need for redesign, code changes, and regression testing. Therefore, the ambiguous phrase, ""attempt to,"" should be removed from requirement 3.4.3. Additional requirements should be added that describe processing of 1553 messages containing command(s) versus a new FSW upload. If the comment in SH_PROC_CMD.C is inaccurate, then it should be corrected as well. Referenced Source Code: SH_PROC_CMD.C Lines # 119-126: /****************************************************************************************/ /* Check if any commands have come in. Process up to */ /* MAX_NUMBER_OF_COMMANDS_PER_SECOND because we must */ /* stay ahead of the S/C command rate capability */ /* The S/C can only send one command/sec, but that will */ /* take forever to download code. Therefore, we'll do */ /* more than that. */ /****************************************************************************************/",11/23/04ProjectA - TIM - 1416,ProjectA EngCntrl Req 3.4.7.1.3: the exceptions to 16-bit words are not defined,3,"ProjectA EngCntrl Requirements Specification - Requirement 3.4.7.1.3 states: 3.4.7.1.3 Data Write: ""The Bootloader software shall write data as 16-bit words when possible, the exception is when the start address is odd or an odd number of bytes are specified."" The exceptions to when the data will not be written as 16-bit words(when the start address is odd or an odd number of bytes are specified) are not defined. The manner in which the bootloader software will handle writing data when the start address is odd or an odd number of bytes are specified should be defined.",11/23/04ProjectA - TIM - 1415,"OBC Software Test Procedures S912-TP4920, Rev-A, Script TS_test(), Test#7, Does Not Fully Verify the Linked SRS Requirements",3,"Issues: 1. Requirements TS 018 and TS019 are not verified by Test #7 as there are no procedure steps associated with these two requirements. 2. The test for TS024 is designed to verify that the persistence counts for one or all monitors can be reset by command. The procedure resets monitor points 0 and 256. However, it is unclear how (@ts:reset_monitor_point 256) operates in this case as Test #4 showed that monitor 256 is invalid. However, it seems to be used to “reset all monitor points”. If this command does not reset all monitor points, then the test does not verify that all 256 monitors can be reset with a single command. The test success criteria is that TS received a command (e.g., TS_cmd_count = 1). This does not prove that the monitor(s) were in fact reset, only that a command was received. Given this, it appears that requirement TS024 is not verified by Test #7. 3. It is unclear how TS024 and TS025 differ in terms of reset for a single monitor other than TS025 states “when it is enabled”. It is unclear if there a difference between resetting when enabled and disabled. The SRS should clarify this situation. 4. TS026 states, “The Flight Software shall reset the threshold status of an individual telemetry monitor or all telemetry monitors by command”. The term “threshold status’ is not defined in the SRS or in the FP Performance Specification; therefore, it is unclear if this requirement is verified by Test #7. Apparently, the test does not show that the persistence value (see Figure 4-6 in the FP Performance Specification, Rev-B) can be reset autonomously when the raw telemetry monitor value exceeds the monitor threshold and then drops below the threshold but the persistence limit is not exceeded (the case shown in Figure 4-6).",11/10/04ProjectA - TIM - 1414,"OBC Software Test Procedures S912-TP4920, Rev-A, Script TS_test(), Test#6, Is Inconsistent and Does Not Fully Verify the Linked SRS Requirements",3,"Issues: 1. Requirement TS017, as stated in the test procedure, is inconsistent with the TS017 in the OBC SRS Rev-B which states: “Flight Software shall support the dumping of the accumulated statistics via a system table dump operation.” The test procedure refers to “emergency RTS tables”. This term is not defined in the SRS or in the FP Performance Specification (FPPS). 2. Test Procedure Section 11.6, Test 6, Column3, indicates that the TMON table is to be dumped and differenced. This table is not defined in the SRS or in the FPPS. The comment at the bottom of page 151 seems to indicate that changing the “limit table” is a test objective. 3. The test does not show that RTS initiation, in response to failures, is in fact inhibited and that TMON testing of TLM points continues under Watch Mode. Test pass/fail relies solely on the Enable/Disable flag indication. If this flag is incorrect, the test is not valid.",11/10/04ProjectA - TIM - 1413,"OBC Software Test Procedures S912-TP4920, Rev-A, Script TS_test(), Test#4, Does Not Fully Verify the Linked SRS Requirement",3,"The test objective is to verify TS003. TS003: Flight Software shall support at least 256 telemetry monitor points. Issue: The test only shows that the first and last monitor in the allowed set is active and can be be enabled and disabled. This does not verify that all 256 monitors can be enabled and active at the same time as required by TS003. In addition, the test pass/fail relies on the correctness of the ""enable/disable"" indication. Since ProjectA FP will use over 200 TMONs, testing should verify that the entire set of 256 can be supported by the software.",11/10/04ProjectA - TIM - 1412,Potential for Incomplete Verification of OBC C&DH SRS Requirement TS001,3,"Script TS_test(), page 143, states: ""REQUIREMENT TESTS ; --satisfies requirement TS01 (IV&V note: this should be TS001) ; Flight Software shall provide a table driven telemetry monitoring function capable of extracting data from any valid combination of CCSDS telemetry packets and constructing the required monitor point. ; The fact that the deployment process is working (as of now 02/01/2000), verifies this requirement."" Issue: The statement, ""The fact that the deployment process is working (as of now 02/01/2000), verifies this requirement."" is unclear. The statement that ""working in 2002"" does not imply that ""it is working"" for the ProjectA version of TS given that the telemetry, the monitors, etc. have changed since 2002. The statement is not adequate as a replacement for formal verification of TS001. Note: TS001 is equivalent to L4-SROBC-254",11/9/04ProjectA - TIM - 1411,Information Missing From ProjectA OBC C&DH Flight Software Test Procedures S912-TP4920 Rev-A,4,"Issues; 1. Section 4: The specific versions of the two referenced documents are not defined. The test procedure should be in concert with the requirement source document. 2. Section 4: The FP Performance Specification is not referenced yet it appears in Script_TS (), Test #1. Because the FP Performance Specification contains TS requirement like statements, both the this document and the SRS should be used in concert in deriving test cases for TS functions. 3. Appendix A: The test procedure does not state which of the test environments will be used to run Script TS_test().",11/9/04ProjectA - TIM - 1410,"OBC Software Test Procedures S912-TP4920, Rev-A, Script TS_test(), Test#2, Does Not Fully Verify the Linked SRS Requirements",3,"OBC Software Test Procedures S912-TP4920, Rev-A, Script TS_test(), Test#2: Test Description: 8.6 Telemetry Monitoring and Statistics Test This test verifies the following TS functions: · the requirements for the Telemetry and Statistics task · that the software can monitor and track statistics on 256 indiviual telemetry points · that an RTS can be initiated by a monitor point value crossing a pre-defined threshold for a defined number of consecutive times This test does not prove that the data in the statistics table is correct and complete. There are no pass/fail for the six items identified in TS016 (L4-SROBC-272 through L4-SROBC-278). Apparently, only monitor point 0 is involved in this test. The test should show that data from all 256 monitors is correct and can be dumped when commanded. Note that the OBC C&DH SRS, Rev-B, did not contain requirement TS015. The 11/02/2004 DOORS archive shows only 26 requirements for TS. It appears that ""015"" was either inadvertantly skipped in Rev. B or the heritage requirement was deleted for ProjectA.",11/8/04ProjectA - TIM - 1409,"OBC Software Test Procedures S912-TP4920, Rev-A, Script TS_test(), Test#1, Does Not Fully Verify the Linked SRS Requirements",3,"OBC C&DH SRS requirements TS006, 021, 022, 023, 027 are not verified as claimed by this test. TS022 points to the Fault Protection Performance Specification for a definition of derived TMONs. There are many such TMONs associated with OBC; however, this test does not address them.",11/8/04ProjectA - TIM - 1407,Inconsistent Attitude Stability Requirements for Science Mode,3,"The attitude stability requirement under section 3.2.3.9 Attitude Stability in the ACS Performance Spec (S912-PF4610 Revision C) states that (L4-ACS-352) ""In Science mode in the asteroid orbits the ACS shall be able to maintain pointing stability of the spacecraft attitude reference (navigation base) to within 75 micro-rads / second 3-sigma radial (X and Y) error."" However, the pointing stability requirement in L3-SFS-105 in the Level 3 Spacecraft and Flight System Requirements (SCFSRD, S912-GR 3400, JPL-D-25870), (11/2/04 DOORS version) states that the X and Y errors should be less than 60 micro-rads / second. L3-SFS-105: During science operations, the Spacecraft System shall be able to limit the Flight System's roll (X) and pitch (Y) rate errors to less than 60 microrad/sec (3 sigma) for a period of at least 30 seconds. L4-ACS-352: In Science mode in the asteroid orbits the ACS shall be able to maintain pointing stability of the spacecraft attitude reference (navigation base) to within 75 micro-rads / second 3-sigma radial (X and Y) error.",11/2/04ProjectA - TIM - 1406,Inconsistent Attitude Determination Algorithm in ACS P-Spec and DN-ProjectA-ACS-005,3,"The attitude determination performance requirements under section 3.2.2.1 Primary Attitude and Rate Determination in the ACS Performance Spec (S912-PF4610 Revision C) states that it shall utilize one of two Kalman filters to estimate the inertial attitude of the spacecraft in the Earth-Mean-Equator 2000 reference frame and the spacecraft body rates from the star tracker and IRU data. The six-state Kalman filter is shown in Figure 7 and the three-state Kalman filter is shown in Figure 8. However, in section 1.3 Kalman Filter Logic in the design note DN-ProjectA-ACS-005, ""Attitude Determination System Design and Analysis for ProjectA"", only the six-state Kalman filter is described. In section 1.3.3.3.1 Gyro Bias or Angular Momentum Update, if gyro is not available the angular momentum correction is obtained from the last three elements of the state vector in the six-state Kalman filter. There seems to be an inconsistency in the ACS design relevant to use of the three-state Kalman filter. The three-state Kalman filter is not included in the DN-ProjectA-ACS-005 design note.",11/2/04ProjectA - TIM - 1405,Questionable pointing error results,3,"The maximum attitude pointing errors during momentum unloading period are listed in Table 6 in DN-ProjectA-ACS-014. In the Table the Y axis pointing error for target pointing mode with gyros under BOL is 0.078 degrees while the Y axis pointing error for the same mode without gyros is 0.065 degrees, which is smaller than 0.078 degrees. Similarly, the Z axis pointing error without gyros is better than that with gyros. The Y axis pointing error without gyros under EOL is better than that with gyros. The attitude determination errors with gyros should be smaller than those without gyros, which are part of the pointing errors. It seems that the simulation results are questionable. Table 6: Unloading Time and Maximum Attitude Pointing Errors Case Case Description Unloading Amount (N-m-s) Unloading Time (sec) Requirement (degrees) Maximum Attitude Pointing Errors (degrees) X or X’ Axis Y Axis Z or Z’ Axis X or X’ Axis YAxis Z or Z’ Axis 1 Target Point, BOL, Gyros [3.9 2.7 3.3] 538 0.1 0.1 0.1 0.057 0.078 0.046 2 Target Point, BOL, Gyroless [2.0 4.6 3.3] 622 0.1 0.1 0.1 0.062 0.065 0.032 3 DeltaVEngine, BOL, Gyroless [3.9 0.0 3.9] 2432 0.344 0.344 5.44 0.123 0.184 0.032 4 Target Point, EOL, Gyros [2.1 4.6 3.3] 580 0.1 0.1 0.1 0.049 0.077 0.033 5 Target Point, EOL, Gyroless [3.8 2.7 3.2] 554 0.1 0.1 0.1 0.049 0.058 0.049 6 DeltaVEngine, EOL, Gyroless [3.9 0.0 3.8] 2432 0.344 0.344 5.44 0.037 0.222 0.033",10/19/04ProjectA - TIM - 1404,Questionable pointing accuracy results,2,"The steady-state results of the pointing accuracy for target pointing mode are listed in Table 9 in DN-ProjectA-ACS-007. The pointing accuracies for Gyroless & RWA are much better than those for Gyros & RWA, except for the pitch channel in BOL. The attitude determination errors with gyros should be smaller than those without gyros, which are part of the pointing errors. It seems that the simulation results are questionable. Table 9: Steady-state results over two hours Pointing Accuracy (degrees) Total Jet Propellant Roll Pitch Yaw On Time (s) Usage (g) Gyros & BOL 0.0028 0.0039 0.0023 0.0 0.0 RWA EOL 0.0025 0.0014 0.0026 0.0 0.0 Gyroless BOL 0.0007 0.0054 0.0004 0.0 0.0 & RWA EOL 0.0010 0.0008 0.0002 0.0 0.0 Gyroless BOL 0.0746 0.0702 0.0772 15.6 6.9 & Odd Jet EOL 0.0661 0.1112 0.0745 21.2 2.4 Gyroless & BOL 0.0714 0.0892 0.0735 18.7 8.3 Even Jets EOL 0.0664 0.1004 0.0765 27.0 3.1",10/18/04ProjectA - TIM - 1403,Unclear explanation of angular rate command,3,"In section 1.5 of DN-ProjectA-ACS-008, it states that the quantity ( Kp x angle error ) may be interpreted as an angular rate command. The rational behind this statement is unclear. The angular rate command can be calculated by the attitude commanding algorithm and is available for the controller.",10/14/04ProjectA - TIM - 1402,Missing rate command in Simulink control system model,3,"Simulink control system model for RCS is shown in Figure 1 of DN-ProjectA-ACS-012. In the figure true attitude rate is fed into Kr, which is the rate gain. However, in general practice rate error is expected to feed into Kr. The jet control system block diagram in Figure 4 of DN-ProjectA-ACS-006 shows that the rate error is used for control. It seems that the rate command is missing.",10/8/04ProjectA - TIM - 1401,Two different sets of control gains for RCS are specified,3,"The ACS control gains for RCS are listed in Table 4 in the design note DN-ProjectA-ACS-006 Rev C. However, in the design note DN-ProjectA-ACS-012 Rev Initial, RCS control design and analysis are documented also. Table 7 in the design note DN-ProjectA-ACS-012 lists the control gains for three axes. The numbers in Table 4 and Table 7 are significantly different. It is not clear which set of control gains will be implemented in the final flight software. +=============+===============+=======================+=================+=======+ DN-ProjectA-ACS-012 Table 7. Control system parameters Parameter X axis Y axis Z axis Kp (1/sec2) .00073 0.0089 0.00043 Kr (1/sec) .041 0.14 .031 Ki (1/sec3) 3.5e-6 .00014 2.7e-6 omega_f (Hz.) .059 0.30 0.059 +=============+===============+=======================+=================+=======+ DN-ProjectA-ACS-006 Table 4. Linear Control Analysis Parameters (Spacecraft Deployed) FSW Value Parameter Cmdble Units X Y Z Description omega_c N Hz .0017 .0030 .0017 Bandwidth (Jet) Kp Y 1/sec2 1.1409e-4 3.5531e-4 1.1409e-4 Proportional Gain (Jet) Kd Y 1/sec 0.0203 .03769 0.0203 Derivative Gain (Jet) Ki Y 1/sec3 3.559e-8 7.1180e-7 3.559e-8 Integral Gain (Jet) Intg_limit Y radsec 0.05 1.0 0.05 Integral Limit (Jet) omega_f N Hz .0272 .114 .0272 Filter Break Frequency",10/8/04ProjectA - TIM - 1400,Inconsistent performance results in Table 3 of DN-ProjectA-ACS-009,3,"In DN-ProjectA-ACS-009 the simulation results of the ACS for the science mode are listed in Table 3. Attitude control errors, attitude estimation errors, attitude pointing errors, rate control errors, rate estimation errors, and rate pointing errors are summarized for 8 test cases. The rate pointing errors are much smaller than either rate control errors or rate estimation errors. This is unusual. In Section 4.3 Performance, the error definitions are included and state that ""control errors are defined as the difference between the commanded and estimated values, estimation errors are the difference between the estimated and true values, while the pointing errors are the difference between the commanded and true values, representing the total error"". Pointing errors should include both control errors and estimation errors and therefore pointing errors should be larger than either of them. The plots in Appendix A for rate pointing errors are consistent with the results in Table 3. +================+===============+==================+=====================+ Table 3. Steady-State Performance Summary (3 sigma Errors) Case Axis Att. Att. Att. Rate Rate Rate Cntrl Est. Pntng Cntrl Est. Pntng asec asec asec asec/sec asec/sec asec/sec 1 X 14.92 9.12 18.56 3.67 3.67 0.176 Y 4.34 6.24 7.96 3.66 3.64 0.286 Z 14.23 4.65 15.26 3.66 3.66 0.214 2 X 13.47 9.12 13.68 3.67 3.66 0.191 Y 4.11 6.24 7.88 3.66 3.65 0.319 Z 12.76 4.65 13.92 3.64 3.64 0.238 3 X 14.80 9.01 15.82 3.71 3.67 0.554 Y 4.25 6.31 7.88 3.68 3.67 0.287 Z 16.15 4.94 16.84 3.69 3.65 0.504 4 X 12.12 9.02 17.24 3.69 3.65 0.476 Y 3.99 6.32 7.82 3.66 3.65 0.320 Z 13.18 4.78 13.95 3.68 3.65 0.487 5 X 8.37 9.53 13.03 3.63 3.63 0.167 Y 4.17 6.12 7.76 3.71 3.70 0.286 Z 13.46 4.44 14.41 3.66 3.66 0.213 6 X 7.88 9.54 12.85 3.66 3.65 0.183 Y 3.93 6.13 7.67 3.70 3.69 0.318 Z 12.54 4.38 13.42 3.66 3.65 0.228 7 X 8.47 9.48 12.97 3.70 3.69 0.166 Y 4.16 6.08 7.68 3.66 3.65 0.287 Z 12.99 4.47 13.90 3.65 3.64 0.208 8 X 7.94 9.49 12.77 3.67 3.67 0.183 Y 3.92 6.07 7.60 3.63 3.61 0.319 Z 11.86 4.43 12.96 3.65 3.65 0.215",10/8/04ProjectA - TIM - 1399,Inconsistent control laws,3,"The design and performance of the target pointing mode is documented in DN-ProjectA-ACS-007. A simulation was developed with Matlab to test ACS performance in the target pointing mode. The Matlab code is listed in Appendix B, Appendix C, Appendix D, Appendix E, and Appendix F. The control gains Kd, Kp, and Ki for the jets and the RWA in the Matlab code are implemented in the Matlab function “adcs” listed in Appendix D at page 23, which is copied to here as follows: if atc.actuator == 0 % Jets (Rovner) atc.Kd = [0.041 0.14 0.031]'; atc.Kp = [0.00073 0.0089 0.00043]'; atc.Ki = [3.5e-6 1.4e-4 2.7e-6]'; lpf.A0 = [0.0019771 0.0028751 0.0019771]'; lpf.A1 = [ ... -1.91586195 -0.55031712 -1.91586195 -1.98584451 -1.77089189 -1.98584451 -1.99083471 -1.65645869 -1.99083471 ]'; lpf.A2 = ones(3, 3); lpf.B1 = [ ... -1.9890245 -1.83476776 -1.9890245 -1.97529083 -1.80606589 -1.97529083 -1.95830128 -1.78280671 -1.95830128 ]'; lpf.B2 = [ ... 0.99448675 0.97289451 0.99448675 0.97903949 0.89898641 0.97903949 0.95935526 0.80836658 0.95935526 ]'; elseif atc.actuator == 1 % RWA (Singh) atc.Kd = [3.0159e-002 1.0681e-001 3.0159e-002]'; atc.Kp = [2.2740e-004 2.8523e-003 2.2740e-004]'; atc.Ki = [1.8000e-006 3.5590e-005 1.8000e-006]'; The code shows that for the RWA the control gains Kd, Kp, and Ki are taken from Table 4 in DN-ProjectA-ACS-006 Rev C (3/2/04) “Attitude Control System Design and Analysis for ProjectA”. The control gains Kd, Kp, and Ki for the jets are taken from Table 7 in DN-ProjectA-ACS-012 Rev Initial (4/15/04) “Reaction Control System Design and Analysis for ProjectA”. The control gains in Table 7 are Kp, Kr, and Ki. According to the control system shown in Figure 1 of DN-ProjectA-ACS-012, the rate gain Kr is not exactly same as Kd in the Matlab code. In Figure 1 true attitude rate is fed into Kr. However, rate error is fed into Kd as shown in Figure 3 and Figure 4 in DN-ProjectA-ACS-006. The control torque calculation in the Matlab function “adcs” listed in Appendix D at page 26, is shown as follows: % Control torque atc.Tpid = est.I*(atc.Kd.*atc.wErr ... + atc.Kp.*atc.thetaErr ... + atc.Ki.*atc.integralErr); It seems that in the code Kr for the jets is fed with rate error instead of the attitude rate.",10/7/04ProjectA - TIM - 1398,Pointing accuracy of the attitude controller in target pointing mode with RCS does not meet the high level requirement,2,"Document #: DN-ProjectA-ACS-007 Rev Initial (4/13/04) ""ProjectA Target Pointing Mode Design and Analysis"" The pointing accuracy of the attitude controller specified in the requirement L3-SFS-2429 in the Level 3 Spacecraft and Flight System Requirements (SCFSRD, S912-Gr 3400, JPL-D-25870) is 1.780 mrad (0.102 degrees) for target pointing mode with RCS. The steady-state results of the pointing accuracy for target pointing mode with RCS are listed in Table 9. For pitch channel in EOL, the pointing accuracy is 0.1112 degrees, which is larger than 0.102 degrees. Table 10 lists the results for slews between targets. The pointing errors are much larger than the pointing accuracy in the requirement L3-SFS-2429. It is not clear that the requirement is applicable to the pointing errors for slews. +================+======================+======================+===========+ L3-SFS-2429 5.9.3.0-1 The attitude controller tolerance1 allocations are as follows: science mode 0.200 mrad target pointing mode, RWA 0.200 mrad target pointing mode, RCS 1.780 mrad delta V mode - X’ and Y’2 6.000 mrad delta V mode - Z’3 94.25 mrad 1) Does not include attitude determination or momentum unloads. 2) X’ and Y’ are the axes perpendicular to the thrust vector. 3) Z’ is the axis parallel to the thrust vector. Table 9: Steady-state results over two hours Pointing Accuracy (&#61616;) Total Jet On Time (s) Propellant Usage (g) Roll Pitch Yaw Gyros & RWA BOL 0.0028 0.0039 0.0023 0.0 0.0 EOL 0.0025 0.0014 0.0026 0.0 0.0 Gyroless & RWA BOL 0.0007 0.0054 0.0004 0.0 0.0 EOL 0.0010 0.0008 0.0002 0.0 0.0 Gyroless & Odd Jets BOL 0.0746 0.0702 0.0772 15.6 6.9 EOL 0.0661 0.1112 0.0745 21.2 2.4 Gyroless & Even Jets BOL 0.0714 0.0892 0.0735 18.7 8.3 EOL 0.0664 0.1004 0.0765 27.0 3.1 Table 10: Results with slews between targets Pointing Accuracy (&#61616;) Total Jet On Time (s) Propellant Usage (g) Roll Pitch Yaw Gyros & RWA BOL 0.36 0.20 0.39 0.0 0.0 EOL 0.54 0.37 0.59 0.0 0.0 Gyroless & RWA BOL 0.33 0.14 0.37 0.0 0.0 EOL 0.57 0.43 0.61 0.0 0.0 Gyroless & Odd Jets BOL 0.83 0.47 0.83 140.3 62.2 EOL 1.03 0.46 0.92 323.7 37.1 Gyroless & Even Jets BOL 0.31 0.25 0.75 127.2 56.3 EOL 0.70 0.40 1.05 308.9 35.4",10/6/04ProjectA - TIM - 1397,Inconsistent gain margins,2,"Document #: DN-ProjectA-ACS-006 Rev C (3/2/04) ""Attitude Control System Design and Analysis for ProjectA"" Table 6 in the Design Note lists the Gain Margin (GM) for the PID control with RWA under the variation in inertia and flexible mode frequencies. The GM for X channel in nominal is -10.59, -9.76 for +10% Isc, 10.61 for -10% Isc, -10.60 for +10% omega_f, and -10.59 for -10% omega_f. The GM changes from negative to positive with small inertia variation. The corresponding frequency omega_GM jumps from 0.01 to 0.09. A smooth variation of the GM is expected. There is no explanation in the document as to why this unexpected variation occured. Further, the negative GM raises the question about the system stability. The Bode plots for X channel in nominal are shown in Figure 9. It can be seen in the figure that the phase curve crosses 180 degrees line four times. Four GM numbers can be obtained. The first number is used in the table for all configurations except -10%Isc. Explanation is needed for the choice. Given this situation, it is uncertain that GM is a legitimate indicator of the stability of the closed-loop system.",10/6/04ProjectA - TIM - 1395,FC UIRD indicates FC cover may remain open following transition to Emergency Mode,4,"According to requirement L3 FCI-501 the FC camera covers should be closed whenever the instrument is not operational (hibernation/ safe/ standby/ emergency modes ). Requirements FCI-91 specifies that the FC should be able to tolerate an immediate shut-down with no warning, which presumably corresponds to the ""Emergency Mode” case conveyed by L3-FCI-213. However, according to diagram in Figure 3-8 (L3-FCI-210), the FC lens cover is left in an unknown state in Emergency Mode. FC can only transition out of Emergency mode following a S/C command to “Standby Mode,” which Figure 3-8 implies has no lens cover knowledge/control either. So the cover may remain open unnecessarily for a long time until the instrument is commanded by the ground from Standby Mode to “Safe Mode.” Additionally, L3-FCI-91 never explicitly states that ""Anomalous Condition Power Shutdown"" corresponds to an ""Emergency Power Shut Down"" condition, which inherently invokes the FC Emergency Mode. If this is the context of L3-FCI-91, it should state this explicitly. Currently, the only FC UIRD requirement that addresses Emergency Mode directly is L3-FCI-213. Referenced Requirements: [L3-FCI-501] To support the S/C FP actions described previously, the FC will support the requirements listed below. The FC shall safe itself if it does not receive indications of a healthy flight computer within 30 seconds of receiving such an indication (typically 3 samples). Note: safe indicates cover closed. The FC shall safe itself immediately, from any mode of operation, if commanded by the S/C (or ground). Reference section 3.9.1 for more information on FC Safe Mode and transitions. The Framing Camera shall be designed to survive a sudden loss of power with no warning. [L3-FCI-91] The Framing Cameras are considered non-essential loads on the main power bus. In the event of anomalous conditions (battery voltage drops below the low voltage limit), the SC will be driven into a safe condition. This will include turning off all the instrument power, except for survival heaters. If time permits, a shutdown warning will be sent over the 1553 bus to the instrument, which will in turn execute a safing macro (close cover, etc). No such warning is guaranteed, however, and all instruments must be tolerant of having power removed without warning. [L3-FCI-210] Fig 3-8 “Instrument Modes and Transitions” [L3-FCI-213] Transitions between FC Modes are caused mainly by S/C commands. In the case of a sudden Emergency Power Shut Down, the Instrument is in Emergency mode. The DPU may provide sub-modes, e.g. imaging mode is subdivided. The transition between DPU sub-modes is handled autonomously within the DPU SW.",9/24/04ProjectA - TIM - 1394,Incomplete definition of the keep out zone for the FC in requirement L3-FCI-506,4,"Figure 3-16 (L3-FCI-32) defines the FC keep out zone as a Field of View (FOV). L3-FCl-506 specifies that the MOS will control the keep out zone as a function of sun distance, and also that ""the S/C will safe the FC if an intrusion occurs."" If the keepout zone is a configurable parameter and not just a FOV, it is unclear how the spacecraft will use the information to determine possible Sun intrusions. L3-FCl-506 and Figure 3-16 can not be completely tested as written. Referenced Requirements: [L3-FCI-32] Figure 3-16 shows the Sun Keep-Out FOV: this figure defines the solar keep-out zone. [L3-FCl-506] The S/C shall monitor estimated sun position with respect to pre-defined FC keep out zones. The S/C will safe the FC if an intrusion occurs. The MOS will control the keep out zone if it changes as a function of sun distance.",9/24/04ProjectA - TIM - 1393,Purpose and intent of FC dual operations not defined by FC UIRD,3,"FC UIRD requirement L3-FCI-11 specifies that the two FC cameras are ""redundant"" sub-systems; L3-FCI-131 indicates that dual operation of the cameras shall be possible. However, the L2 fault protection requirement, L2-FPR-139 precludes dual operation of redundant hardware elements, unless approved by the Project Manager. Consequently, unless the required approval has been received, L3-FCI-131 conflicts with L2-FPR-139. The project should ensure that the implied deviation from the project level requirement was authorized. However, if the project considers L3-FCI-131 valid, then there seems to be a requirement missing from the FC UIRD that sufficiently describes the purpose and intent for dual operations of the FCs. Such a requirement would most likely drive additional L3 requirements. For example, if the intent is to alternate filters between cameras, then this should be specified in order to accomplish this in an effective and efficient manner. Consequently, this area needs additional consideration to ensure mission goals are attainable. Referenced Requirements: [L3-FCI-11] Two identical camera systems, including data processing units, will be delivered to provide redundancy for optical navigation, mission-critical imaging science and topography. One camera head consists of the housing, refractive lens system, filter-wheel, front door, focal plane, and readout electronics with 2.5 kg total mass and typical power consumption of 4W (short peak of 7 W). [L3-FCI-131] The two FC instruments shall be designed for dual cold redundancy operations, i.e. all functions of the two FC shall be identical. Dual operation of the cameras shall be possible. [L2-FPR-139] The ProjectA Project shall only swap to redundant hardware elements for fault recovery actions in order to assure health/ safety. Violations shall be approved by the Project Manager.",9/24/04ProjectA - TIM - 1392,Incomplete quantitative detection limits in L3-PSR-111,3,"The goal stated for the FC to determine the ""presence"" of olivine and pyroxene (as well as their compositional variations) cannot be quantified without traceable references. Referenced Requirement: [L3-PSR-111] Each FC shall provide a clear filter and at least three color filters, with a goal to determine the presence of olivine and pyroxene, as well as their compositional variations.",9/24/04ProjectA - TIM - 1391,"Unclear intent of adverb ""clearly"" in telemetry requirement L3-PSR-59",5,"During the implementation of science instruments telemetry, the adverb ""clearly"" in requirement L3-PSR-59 is likely to be ignored. If a particular type of formatting is needed, it should be specified. Referenced Requirement: [L3-PSR-59] In its engineering telemetry each Science Instrument shall clearly indicate whether or not it is in its Safe Mode.",9/24/04ProjectA - TIM - 1390,Image motion compensation incompletely defined by PSRD,3,"Additional details are needed in requirement L3-PSR-100 for making this requirement traceable and verifiable. If image motion compensation is needed, a reference to suitable analysis should be also included or made traceable. Requirement L3-PSR-100 can be traced back to requirement L2-PRD-269 which is identical with the exception of the note on image motion compensation. The pointing errors are defined in L3-SFS-2138, but this requirement only identifies random pointing errors with null time average. Systematic errors (such as ""image motion compensation"") are not traceable and not testable. Referenced Requirements: [L3-PSR-100] Each FC shall be able to image a resolved object at 3AU from the Sun with an albedo of 0.1, at a solar incidence angle of up to 45 deg, with an integration time of less than 0.5 seconds, with a signal-to-noise ratio of greater than 50 in at least 3 filters. (Note: when using filters, image motion compensation may be required to achieve L1 requirement of SNR of 50 over 80% of the surface). [L2-PRD-269] Allocation: The payload system shall be able to image an object at 3AU from the Sun with an albedo of 0.1, at a solar incidence angle of up to 45 deg, with an integration time of less than 0.5 seconds, with a signal-to-noise ratio of greater than 50 in at least three filters. [L3-SFS-2138] Following standard practice, the errors within each pointing budget shall be grouped into three temporal categories corresponding to their frequency content. The errors within each category are root sum squared (RSS), and the three RSS totals are then summed to arrive at the total error. Static Errors are constant errors (bias). This category includes applicable alignment errors and uncertainties from Ground Operations through launch, and shall include zero G, launch shift, and hygroscopic effects, and alignment measurement uncertainties. Quasi-static Errors include those errors with frequencies slow enough that they can be removed through calibration (< 3 microHz). This category includes all alignment changes from post-launch through the beginning of science operations, and shall include the effects of thermal distortion. Slow Dynamic Errors are those errors with frequency content between 3 microHz and the controller bandwidth (5Hz). All alignment changes during a science interval (i.e. one orbit). The alignment changes shall include thermal distortion. Fast Dynamic Errors are those errors whose frequencies are above the controller bandwidth.",9/24/04ProjectA - TIM - 1389,Flag reset not traceable between EngCntrl-TRD and EngCntrl-S/C ICD for XTHRSTON and XGRIDCLR,3,"The TRD (section 3.3.7.3.2 -Multiple Recycles) identifies a multiple recycle flag that shall remain set until cleared by the XTHRSTON command, however the flag is not mentioned either in the EngCntrl/Spacecraft ICD or the EngCntrl SRS. Referenced EngCntrl TRD Section: 3.3.7.3.2 Multiple Recycles In the event the thruster does not recover normally from a recycle and 20 recycles accumulate within 80 seconds, the EngCntrl shall set the multiple recycle flag and reprogram the discharge current to the cutback level of 4.0 A. The multiple recycle flag shall remain set until cleared by the XTHRSTON or XGRIDCLR command, defined in DD-510, EngCntrl-Spacecraft ICD.",9/24/04ProjectA - TIM - 1388,"Ambiguous symbol ""?P"" referenced multiple times in EngCntrl TRD",5,"The EngCntrl TRD contains nine occurrences of the undefined notation ""?P"", which is possibly just an editorial artifact or file conversion problem; however, the absence of more accurate notation (e.g. delta P) or a description describing the intent of this notation, the wording of the requirement remains unclear and impossible to test completely. The unclear notation appears in Section 3.4.2.1 Steady State XFS control items 4 and 5, in Section 3.4.6 ""Fault protection Set Points,"" and in Section 3.4.3.1 item 2 "" Autonomous Fault protection."" Referenced EngCntrl TRD Section: 3.4.2.1 Steady State XFS control 5. Compare PAc obtained in step 4. above with PA Required obtained in step 3. If PAc is greater than PA Required plus some pre-set ?P that indicates leaking up-stream valves, then fault protection is invoked. If not, then proceed with step 6. 6. Again compare PAc obtained in step 4. above with PA Required obtained in step 3. If PAc is less than PA Required minus some pre-set ?P that indicates stuck-closed upstream valves, then fault protection is invoked. If not, then proceed with step 7. 3.4.6 Fault protection Set Points During normal XFS regulator operation, the fault protection trigger points shall be set at 2.0 psi above and 0.2 psi below the nominal required plenum tank pressure. When plenum tank pressures are changed, these set points shall be adjusted to avoid inadvertently triggering fault protection. This shall be handled such that when the thruster set-point is being changed, until the new plenum tank pressure has been reached (to within some tolerance smaller than the fault protection ?P) the fault protection trigger points shall be changed such that they are ?P above the higher of the two plenum tank pressure set points and ?P below the lower of the two plenum tank pressure set points. 3.4.3.1 Autonomous Fault protection The EngCntrl shall autonomously detect and respond to the following faults within the XFS: 2. Internal leakage of LV2, SV5, SV6, SV7 or SV8, or SV4, or failure of LV2, SV5, SV6, SV7 or SV8 to operate. Indication: Pressure in plenum tank below nominal by ?P (0.2 psi) Response: 1. Close LV2 2. Open LV3 3. Operate in single plenum mode using single plenum column of throttling table, normal steady-state control algorithm, and the selected main flow regulator.",9/24/04ProjectA - TIM - 1387,Incomplete failure conditions during cathode conditioning procedure stated by EngCntrl TRD,4,"EngCntrl TRD Section 3.3.2.2, which is dedicated to the fault recovery of the cathode conditioning procedure, specifies that there is only one failure that need to be detected by the system (""The only failure mode to be detected in this operation is an open cathode heater). EngCntrl/Spacecraft ICD Section 6.3.1.2.3.2, which is dedicated to command restrictions , seems to identify additional faults detected during the cathode conditioning procedure. These faults include cases where the PPU loses either high voltage or low voltage power. If these cases represent additional faults detected during the cathode conditioning procedure beyond that listed by the EngCntrl TRD, then both referenced documents should be made consistent. Referenced EngCntrl TRD Section: 3.3.2.2 Fault Recovery The only failure mode to be detected in this operation is an open cathode heater. A cathode heater will be considered open if the output voltage a cathode heater power supply is in excess of 9.2V and the output current is less than 3.0A. In the event of this failure, the EngCntrl shall exit the cathode conditioning procedure and set a heater failure flag in the PPU telemetry. In the event of a heater short circuit, it is likely that the thruster will not start in the thruster ignition procedure, and this failure will be dealt with at that time. Heater failures are generally non-recoverable; therefore, no recovery procedures are specified at this time. Referenced EngCntrl/Spacecraft ICD Section: 6.3.1.2.3.2 Command Restrictions. The EngCntrl shall only accept a XCATHCND command when the Operational software is in the STANDBY mode. A XCATHCND command issued when the EngCntrl is in any mode other then STANDBY shall result in the EngCntrl rejecting the command. The XCATHCND command shall only be issued after the PPU is enabled with both the low voltage and high voltage power turned on. If the PPU loses either high voltage or low voltage power during Cathode Condition procedure, the algorithm shall wait for the voltage to be reapplied and then shall restart the procedure. If a PPU recycle occurs during Cathode Condition, the procedure is terminated.",9/24/04ProjectA - TIM - 1386,Inaccurate table of contents in the EngCntrl TRD,5,"The table of content and the text of the document need some editorial refinements: - sections 3.3.7, 3.3.8 are not listed - Figure 5-1 appears repeated three times - Figure 5-1 is mislabeled",9/24/04ProjectA - TIM - 1385,The use of English units in EngCntrl TRD may need to be revised,4,"SC&FSRD requirement L3-SFS-2093 indicates that the ""Flight System shall use SI units…exceptions to this policy will be considered if implementation is cost prohibitive such as in the use of existing equipment and design documented in English units."" Although not necessarily inconsistent with this policy, the EngCntrl TRD references the English units ""psi"" and ""psia"" 16 times to characterize operating parameters of the Engine. Unlike rocket engines, ion propulsion systems do not have a large user base outside the scientific community. This inherently limits the implementation of ion propulsion systems to space flight applications where trajectories are calculated in SI units. Consequently, the project may want to reassess the long-term implications associated with maintaining consistent unit conversions throughout numerous calculations over the long and complex trajectory. Referenced Requirement: [L3-SFS-2093] The Flight System shall use SI units during the design, fabrication, test, launch and operations of the mission. Exceptions to this policy will be considered if implementation is cost prohibitive such as in the use of existing equipment and design documented in English units. All units used in all specifications and drawings shall be clearly identified.",9/24/04ProjectA - TIM - 1384,CHECKSUM in progress handling inconsistency between EngCntrl SRS and EngCntrl-S/C ICD,5,"According to EngCntrl/Spacecraft ICD Section 6.3.2.2.2, the XCALCKSM command should always be executable. However, the EngCntrl SRS Section 3.4.6.2.1 specifies that an error message should be generated and the command ignored if a CHECKSUM is in progress. Referenced Sections: EngCntrl/Spacecraft ICD 6.3.2.2.2: Command Restrictions: The EngCntrl shall be able to execute this command at anytime EngCntrl SRS: 3.4.6.2.1 Checksum Calculation In Progress Check The Bootloader shall indicate a CHECKSUM IN PROGRESS error if the Idle Process is calculating the Operational software checksum when a XCALCKSM command is received and the command will be ignored.",9/24/04ProjectA - TIM - 1383,EngCntrl Software Design Review manual referenced by EngCntrl-S/C ICD missing traceable references,5,"EngCntrl S/C ICD Section 6.3.1.2.4.1 indicates that the ""EngCntrl Software Design Review manual"" provides ""a complete description of the engine startup, throttling, and steady state control algorithms""; however, this manual does not appear in Section 2, ""Applicable Documents."" This specification should be updated with the JPL document ID associated with this manual, and Section 2 of the ICD should be updated accordingly. Referenced EngCntrl S/C ICD Section: 6.3.1.2.4.1 Command Description The XTHRSTON command shall start a procedure for turning on a thruster. The Thrust Control procedure is documented in the EngCntrl Software Requirements Specification, JPL D-27118. A complete description of the engine startup, throttling, and steady state control algorithms is provided in the EngCntrl Software Design Review manual.",9/23/04ProjectA - TIM - 1382,Unclear delta P signing for command XPAMCLUT in EngCntrl-S/C ICD,4,"According to EngCntrl/Spacecraft ICD Section 6.3.1.4.2.1, the XPAMCLUT command loads one line of data into a pressure set-point correction lookup table. The table values represent pressure value corrections as a function of temperature that must be added or subtracted to a given measured pressure. Table 6-31 ""XPAMCLUT Command Format,"" indicates these values range from 0 to 6553, implying these values are always positive. However, nothing in this table seems to indicate whether the pressure value corrections are added or subtracted. Referenced Section: 6.3.1.4.2.1 Command Description Table 6-29 Lookup Table Format Similarly, P0 through P15 represents the pressure range over which the transducers are corrected. DP0,0 through DP15,15 represent the delta pressure to be added or subtracted to the measured pressure for a given pressure/temperature combination. All values programmed into the table are in counts, where T0 through T15 have the same units as TP1 through TP6, and all pressures (P0 through P15, DP0,0 through DP15,15) have the same units as PA1 through PA6. Table 6-31 XPAMCLUT Command Format",9/23/04ProjectA - TIM - 1381,Both English and SI units used for XTHROTAB command parameters in EngCntrl-S/C ICD,4,"SC&FSRD requirement L3-SFS-2093 indicates that the ""Flight System shall use SI units…exceptions to this policy will be considered if implementation is cost prohibitive such as in the use of existing equipment and design documented in English units."" Although not necessarily inconsistent with this policy, EngCntrl/Spacecraft ICD Section 6.3.1.4.1.1 provides the description for the XTHROTAB command, which includes Table 6-28 ""XTHROTAB Command Format."" This table provides word numbers 10, 11, and 12 in terms of English units (i.e. PSI/bit). Unlike rocket engines, ion propulsion systems do not have a large user base outside the scientific community. This inherently limits the implementation of ion propulsion systems to space flight applications where trajectories are calculated in SI units. Consequently, the project may want to reassess the long-term implications associated with maintaining consistent unit conversions throughout numerous calculations over the long and complex trajectory. Referenced EngCntrl ICD Section: Table 6 28. XTHROTAB Command Format 10 MAINFLOW 0 to 4095 Main Flow Pressure, 1 LSB = (0.040780276) (PSI/bit) 11 CATHFLOW 0 to 4095 Cathode Flow Pressure, 1 LSB = (0.040780276) (PSI/bit) 12 SNGLFLOW 0 to 4095 Single Flow Pressure, 1 LSB = (0.040780276) (PSI/bit) Referenced L3 SC&FSRD Requirement: [L3-SFS-2093] The Flight System shall use SI units during the design, fabrication, test, launch and operations of the mission. Exceptions to this policy will be considered if implementation is cost prohibitive such as in the use of existing equipment and design documented in English units. All units used in all specifications and drawings shall be clearly identified.",9/23/04ProjectA - TIM - 1380,Incomplete restrictions for the Cathode Condition Command in EngCntrl SRS and EngCntrl-S/C ICD,3,"EngCntrl/Spacecraft ICD Section 6.3.1.2.3.2 indicates that prior to executing an XCATHCND command the PPU must be enabled with power to both the high and low voltages; however, if during the Cathode Condition Procedure, the PPU loses either high voltage (HV) or low voltage (LV), the algorithm should wait for the voltage to be reapplied before restarting automatically. A time-out waiting period is not specified and without it, it is unclear when and how the EngCntrl will stop waiting. Also, the EngCntrl SRS does not prescribe a check on the PPU HV - LV state before entering the Cathode Condition procedure-start step; therefore, the procedure has no way of distinguishing a power loss (with automatic restart) from a command issued incorrectly when the power status is off. Referenced Section: EngCntrl/Spacecraft ICD: 6.3.1.2.3.2 Command Restrictions The EngCntrl shall only accept a XCATHCND command when the Operational software is in the STANDBY mode. A XCATHCND command issued when the EngCntrl is in any mode other then STANDBY shall result in the EngCntrl rejecting the command.",9/23/04ProjectA - TIM - 1379,The SRS - EngCntrl requirements deviations from Deep Space 1 are incomplete,4,"Chapter 4 in the SRS is intended to cover requirements on Architecture, Initialization, Processing, Telemetry, Bootloder/Operational SW System Safe Procedure, Operational SW Engine Mode Procedures, Idles processes and Fault Protection. All the eight sections are under development and are incomplete. References from the ICD and TRD to the SRS document can not be traced.",9/23/04ProjectA - TIM - 1378,XSCRBMEM and XSRBMEM commands intent unclear and inconsistently defined in EngCntrl SRS,3,"EngCntrl/Spacecraft ICD Section 6.2.4 ""Bootload Software Commands,"" identifies the following Bootload Software command: XSRBMEM - Enable Memory Refresh/Memory Scrub function Section 6.2.5 ""Operational Software Commands,"" identifies the following similar command, but for the Operational Software: XSCRBMEM - Perform memory scrub on selected memory region, will refresh EEPROM This implies that the enable for the memory scrub command is only valid during the Bootload process; whereas, the memory scrub command itself is only valid during execution of the operational software. However, subsequent sections of the ICD seem to contradict this assumption. Section 6.3.1 OPERATIONAL SOFTWARE COMMANDS, contains the detailed description (i.e. in Section 6.3.1.5.9.1 Command Description) for the command, ""XSCRBMEM."" Then Section 6.3.2 BOOTLOAD COMMANDS (i.e. in Section 6.3.2.6.1 Command Description), includes a seemingly different command with the same name. This command is not included in Section 6.2.4 ""Bootload Software Commands""; and the ""XSRBMEM"" command referenced by Section 6.2.4 is not included in Section 6.3.2 BOOTLOAD COMMANDS. This implies there may have been a simple typo in Section 6.3.2 (i.e. in Section 6.3.2.6.1 Command Description), where ""XSCRBMEM"" should have actually been ""XSRBMEM"" instead. However, again this assumption proves uncertain, since the descriptions for these commands are essentially the same except one is relative to the Bootload Software, while the other is relative to the Operational Software. These cases considered collectively raises questions over the intent and necessity of both an enable command for the memory scrub command and the command itself, as well as which modes of software execution these commands are valid. The referenced Sections of the EngCntrl/Spacecraft ICD should be reassessed and rewritten as necessary to capture the intended and necessary memory scrub functionality relative to the applicable modes of software execution. Although not considered a technical issue, the section numbers referenced by Table 6-3 ""Bootload Software Command Summary,"" all reference Section 5 when they should reference Section 6 instead. Similarly, the section references for Table 6-4 ""EngCntrl Operational Software Command Summary,"" are all blank. Therefore, these tables should be completed and updated accordingly. Referenced Sections: EngCntrl/Spacecraft ICD: Section 6.2.4 Bootload Software Commands Extracted from Table 6-3: Bootload Software Command Summary Command: XSRBMEM Command: Description Enable Memory Refresh/Memory Scrub function Section: 5.3.2.6 Section 6.2.5 Operational Software Commands Extracted from Table 6-4: EngCntrl Operational Software Command Summary Command: XSCRBMEM Command Description: Perform memory scrub on selected memory region, will refresh EEPROM Section: (Blank) 6.3.1 OPERATIONAL SOFTWARE COMMANDS 6.3.1.5.9 XSCRBMEM 6.3.1.5.9.1 Command Description The XSCRBMEM command shall initiate a background task to perform a single memory scrub of the entire SRAM and EEPROM memory space. The memory scrub task shall only utilize the unused CPU time that is available during each 1Hz iteration of the Operational Software main control loop. The memory scrub operation cannot be stopped once initiated and shall end either when all the SRAM and EEPROM memory space have been successfully scrubbed or when an EDAC error in memory is encountered. A XSCRBMEM command received while the memory scrub operation is busy will be rejected and logged as an error. Table 6-44: XSCRBMEM Command Format 6.3.2 BOOTLOAD COMMANDS 6.3.2.6 XSCRBMEM 6.3.2.6.1 Command Description The XSCRBMEM command shall initiate a background task to perform a single memory scrub of the entire SRAM and EEPROM memory space. The memory scrub task shall only utilize the unused CPU time that is available during each 1Hz iteration of the Bootloader Software main control loop. The memory scrub operation cannot be stopped once initiated and shall end either when all the SRAM and EEPROM memory space have been successfully scrubbed or when an EDAC error in memory is encountered. A XSCRBMEM command received while the memory scrub operation is busy or the calculate checksum operation is busy will be rejected and logged as an error. Table 6-49: XSCRBMEM Command Format",9/23/04ProjectA - TIM - 1377,"Inconsistent power-off handling during ""start step"" of Cathode Condition Procedure stated in EngCntrl SRS",3,"According to EngCntrl/SC ICD Section 6.3.1.2.3.2, the PPU must be enabled with both low and high voltage powers on, before the XCATHCND command can be issued. EngCntrl SRS Section 3.7.3.7.2.1 contains a block diagram for the start (step 1) of the Cathode Condition Mode, seems consistent with the ICD by checking the PPU power state before continuing. If the check fails, then the process skEngine to the end of step: the same point ultimately reached if step 1 is successful. This implies that in either case, the process continues onto the next step (step 2). However, this seems contrary to Section 3.7.3.7.1 “Procedure Diagram” of the SRS, which implies that transitioning from step 1 to step 2 is contingent on “POWER OK” state. This diagram seems more consistent with the diagram provided by Section 3.7.3.7.4.1 “PPU Power Fault” of the SRS, which implies that if the power check fails during the start step, then the step repeats until the power levels are within range. Aside from these inconsistencies, the SRS never seems to sufficiently address the handling of a PPU power fault that occurs during the step 1 of the Cathode Condition Mode. Referenced Sections: EngCntrl/SC ICD: 6.3.1.2.3.2 Command Restrictions. The EngCntrl shall only accept a XCATHCND command when the Operational software is in the STANDBY mode. A XCATHCND command issued when the EngCntrl is in any mode other then STANDBY shall result in the EngCntrl rejecting the command. The XCATHCND command shall only be issued after the PPU is enabled with both the low voltage and high voltage power turned on. If the PPU loses either high voltage or low voltage power during Cathode Condition procedure, the algorithm shall wait for the voltage to be reapplied and then shall restart the procedure. If a PPU recycle occurs during Cathode Condition, the procedure is terminated. EngCntrl SRS: 3.5.1 Telemetry Collection 3.5.1.1 Analog Telemetry Channels The EngCntrl Flight Software shall collect data digitized analog data from the EngCntrl and XFS using the Analog Controller of the CPU board. 3.5.1.1.1 Analog Data Channels Collected Source Channels EngCntrl 5v, +12v, -12v power monitors 3.5.1.5 PPU Data Process 3.5.1.5.2 High Voltage The EngCntrl Flight Software shall indicate the High Voltage is ON if the measured line voltage is greater than or equal to 50v, otherwise the EngCntrl Flight Software shall indicate the High Voltage is OFF. 3.5.2 Telemetry Update 3.5.2.2.4.1 Error Count The EngCntrl Flight software shall update the Error Count in the EngCntrl telemetry data buffer, packet 0. 3.5.2.2.4.2 Error History The EngCntrl Flight software shall update the Error History list in the EngCntrl telemetry data buffer, packet 0. 3.7.3 Mode Procedures 3.7.3.7 Cathode Condition Mode The Operational software shall perform a Cathode Condition procedure upon transitioning the Engine to the CATHODE CONDITION mode. 3.7.3.7.1 Procedure Diagram 3.7.3.7.2.1 Start (Step 1) The following diagram defines the sequence of checks and commands performed by the Start step of the Cathode Condition procedure. <Summarized from BLOCK DIAGRAM> PPU Slice Power On and High Voltage Power On? IF OFF END STEP 3.7.3.7.4.1 PPU Power Fault When in the Start step, the Cathode Condition Procedure shall repeat until the PPU power levels are in range as indicated by the PPU data processing performed by the Telemetry Update sequence step. When not in the Start step, the Cathode Condition Procedure shall indicate an error and restart the procedure if the PPU power levels are out of range as indicated by the PPU data processing performed by the Telemetry Update sequence step.",9/23/04ProjectA - TIM - 1376,"Fault flag - ""open cathode heater"" not flowed down to EngCntrl SRS",3,"According to EngCntrl/Spacecraft ICD Section 3.3.2.2 ""Fault Recovery,"" there should be an ""open cathode heater flag"" included in telemetry. However, this fault does not seem to have been flowed down to the telemetry section of the EngCntrl SRS. Referenced EngCntrl/Spacecraft ICD Section: 3.3.2.2 Fault Recovery The only failure mode to be detected in this operation is an open cathode heater. A cathode heater will be considered open if the output voltage a cathode heater power supply is in excess of 9.2V and the output current is less than 3.0A. In the event of this failure, the EngCntrl shall exit the cathode conditioning procedure and set a heater failure flag in the PPU telemetry.",9/23/04ProjectA - TIM - 1375,Requirement for XMEMPOKE commands missing from EngCntrl SRS and EngCntrl-S/C ICD,3,"EngCntrl SRS Section 4.3.2 mentions the command XMEMPOKE for the Bootloader software as a deviation from the Deep Space 1 design; however, a corresponding requirement/command description is missing from EngCntrl SRS Section 3 ""Requirements"" in Section 6.2.4 of the EngCntrl/Spacecraft ICD. Referenced EngCntrl SRS Section: 4.3.2 XMEMPOKE New command for the Bootloader software",9/23/04ProjectA - TIM - 1374,Inconsistent MEMORY SCRUB IN PROGRESS handling when commanding XSTARTSW stated in EngCntrl SRS and EngCntrl-S/C ICD,3,"EngCntrl/Spacecraft ICD Section 6.3.2.3.2 indicates that the EngCntrl ""shall be able to execute the (XSTARTSW) command anytime"" and it does not mention possible on-going memory scrub operations. However, EngCntrl SRS Section 3.4.6.3.2 indicates that a MEMORY SCRUB IN PROGRESS condition received while attempting to execute an XSTARTSW command will result in an error and the memory scrub operation will be terminated. The inconsistency between the SRS and the ICD should be resolved. Referenced Sections: EngCntrl/Spacecraft ICD: 6.3.2.3.2. Command Restrictions - The EngCntrl shall be able to execute this command at anytime EngCntrl SRS: 3.4.6.3.2 Memory Scrub In Progress Check The Bootloader shall indicate a MEMORY SCRUB IN PROGRESS error if the Idle Process is currently scrubbing the CPU memory and will terminate the memory scrub operation.",9/23/04ProjectA - TIM - 1373,Termination of memory scrub inconsistent in EngCntrl-S/C ICD and EngCntrl SRS,3,"EngCntrl/Spacecraft ICD Section 6.3.1.5.9 indicates that a memory scrub command (i.e. ""XSCRMEM"") cannot be terminated. However, EngCntrl SRS Sections 3.4.6.1.5, 3.4.6.3.2, and 3.4.6.2.3 describe cases where memory scrubbing actions are terminated prior to completion. The inconsistencies between the SRS and the ICD should be resolved. Referenced Sections: EngCntrl/Spacecraft ICD: 6.3.1.5.9..The memory scrub operation cannot be stopped once initiated and shall end either when all the SRAM and EEPROM memory space have been successfully scrubbed or when an EDAC error in memory is encountered. A XSCRBMEM command received while the memory scrub operation is busy will be rejected and logged as an error. EngCntrl SRS: 3.4.6.2.3 Memory Scrub In Progress Check The Bootloader shall indicate a MEMORY SCRUB IN PROGRESS error if the Idle Process is currently scrubbing the CPU memory and will terminate the memory scrub operation. The Bootloader software shall enable the Idle Process task to calculate the Operational software. 3.4.6.3.2 Memory Scrub In Progress Check The Bootloader shall indicate a MEMORY SCRUB IN PROGRESS error if the Idle Process is currently scrubbing the CPU memory and will terminate the memory scrub operation. 3.4.6.1.5 Memory Scrub In Progress Check The Bootloader shall indicate a MEMORY SCRUB IN PROGRESS error if the Idle Process is currently scrubbing the CPU memory and will terminate the memory scrub operation. The Bootloader software shall write the data specified in the XLOADCODE command.",9/23/04ProjectA - TIM - 1369,ProjectA L3 SC&FSRD Rqt: L3-SFS-2014 is not linked to L2 PRD rqts,3,"L3-SFS-2014, which is a HGA pointing accuracy requirement, has not been linked to any requirements in the DOORS module for the Level 2 Project Requirements Document (PRD). Referenced Requirements: [L3-SFS-2014] During HGA communication sessions, the Flight System shall be able to point the HGA, such that the HGA pointing accuracy is better than 3.49 mrad (0.2 deg) radial (3 sigma, zero-to-peak). Note, the accuracy is defined as the total difference between the commanded and actual pointing.",9/7/04ProjectA - TIM - 1368,ProjectA L3 SC&FSRD Rqt: L3-SFS-68 is not linked to L2 PRD rqts,3,"Requirement L3-SFS-68 has not been linked to any requirements in the DOORS module for the Level 2 Project Requirements Document (PRD). It is not clear which level 2 requirement in the PRD drives the solar arrays pointing accuracy requirement. Referenced Requirements: [L3-SFS-68] During normal operations and safe mode, the Flight System shall meet the load power requirements when the solar arrays are pointed to the sun with an accuracy of 0.1 rads (5.73 degrees), using the SADA rotation and ACS S/C pointing capability.",9/7/04ProjectA - TIM - 1367,L2-PRD-1541 is not linked to L3 SC&FS rqts,3,"The requirement L2-PRD-1541 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. L2-PRD-1541 is pointing knowledge requirement, which should be linked to the level 3 pointing knowledge requirement L3-SFS-2384. Referenced Requirements: [L2-PRD-1541] Allocation: The Spacecraft System shall be able to estimate, record, and telemeter the inertial attitude of the GRaND mounting reference, with a real-time pointing knowledge error of better than 4 mrad per axis (3 sigma, zero-to-peak). Note: The knowledge error is defined as the difference between the estimated and actual pointing. [L3-SFS-2384] The Spacecraft System shall be able to estimate, record, and telemeter the inertial attitude of the GRaND mounting reference, with a real-time pointing knowledge error of better than 4 mrad per axis (3 sigma, zero-to-peak). Note: The knowledge error is defined as the difference between the estimated and actual pointing.",9/7/04ProjectA - TIM - 1366,L2-PRD-1538 is not linked to L3 SC&FS rqts,3,Requirement L2-PRD-1538 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirements: [L2-PRD-1538] Allocation: The Spacecraft System shall provide a resolution of better than 0.005 mrad per axis in its pointing telemetry.,9/7/04ProjectA - TIM - 1365,L3-SFS-2384 is incorrectly linked to L2-PRD-1537,3,"Requirement L2-PRD-1537 is linked to the requirement L3-SFS-2384 in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. However, the requirement L3-SFS-2384 is pointing knowledge requirement. The requirement L2-PRD-1537 is pointing accuracy requirement, which should be linked to the level 3 pointing accuracy requirement L3-SFS-2011. Referenced Requirements: [L2-PRD-1537] Allocation: The Spacecraft System shall be able to point the GRaND mounting reference at a ground-prescribed inertial orientation, with an accuracy of better than 1 degree per axis (3 sigma, zero-to-peak). Note: The accuracy is defined as the total difference between the commanded and actual pointing. [L3-SFS-2384] The Spacecraft System shall be able to estimate, record, and telemeter the inertial attitude of the GRaND mounting reference, with a real-time pointing knowledge error of better than 4 mrad per axis (3 sigma, zero-to-peak). Note: The knowledge error is defined as the difference between the estimated and actual pointing. [L3-SFS-2011] The Spacecraft System shall be able to point the GRaND mounting reference at a ground-prescribed inertial orientation with an accuracy of better than 1 degree per axis (3 sigma, zero-to-peak). Note: The accuracy is defined as the total difference between the commanded and actual pointing.",9/7/04ProjectA - TIM - 1364,L2-PRD-1534 is not linked to L3 SC&FS rqts,3,Requirement L2-PRD-1534 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1534] Allocation: The Spacecraft System shall provide a resolution of better than 0.005 mrad per axis in its pointing commands.,9/7/04ProjectA - TIM - 1363,L3-SFS-2011 is incorrectly linked to L2-PRD-1317,3,"Requirement L2-PRD-1317 seems inappropriately traced to L3-SFS-2011 in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. L2-PRD-1317 is a project level requirement that is allocated within the PRD to several system level requirements including L2-PRD-1537. Since L2-PRD-1537 is directly related to L3-SFS-2011, the link between L2-PRD-1317 and L3-SFS-2011 should be removed and a new link between L2-PRD-1537 and L3-SFS-2011 should be created. Referenced Requirements: [L2-PRD-1317] Requirement: The ProjectA Project shall be able to point the GRaND boresight with a target-relative accuracy of better than 5 degrees per axis (3 sigma, zero-to-peak). Note: The accuracy is defined as the total difference between the actual target direction and actual pointing direction. [L2-PRD-1537] Allocation: The Spacecraft System shall be able to point the GRaND mounting reference at a ground-prescribed inertial orientation, with an accuracy of better than 1 degree per axis (3 sigma, zero-to-peak). Note: The accuracy is defined as the total difference between the commanded and actual pointing. [L3-SFS-2011] The Spacecraft System shall be able to point the GRaND mounting reference at a ground-prescribed inertial orientation with an accuracy of better than 1 degree per axis (3 sigma, zero-to-peak). Note: The accuracy is defined as the total difference between the commanded and actual pointing.",9/7/04ProjectA - TIM - 1362,L2-PRD-1517 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1517 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirements: [L2-PRD-1517] Allocation: The Spacecraft System shall provide a rate resolution of better than 0.25 microrad/sec per axis in its rate commands.,9/7/04ProjectA - TIM - 1361,L2-PRD-1502 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1502 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1502] Allocation: The Spacecraft System shall provide a rate resolution of better than 0.25 microrad/sec per axis in its rate commands.,9/7/04ProjectA - TIM - 1360,L2-PRD-1510 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1510 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1510] Allocation: The Spacecraft System shall provide a rate resolution of better than 0.25 microrad/sec per axis in its rate commands.,9/7/04ProjectA - TIM - 1359,L2-PRD-1507 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1507 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1507] Allocation: The Spacecraft System shall provide a rate resolution of better than 0.25 microrad/sec per axis for its rate commands.,9/7/04ProjectA - TIM - 1358,L2-PRD-1495 is not linked to L3 SC&FS rqts,4,"Requirement L2-PRD-1495 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1495] Requirement: During the Earth-Vesta Cruise and Vesta-Ceres Cruise Phases, the ProjectA Project shall be able to limit the target-relative motion of the Framing Camera boresight to less than 300 microrad/sec per axis (3 sigma, zero-to-peak), for intervals of up to 30 seconds. Note: This requirement supports longer duration exposures that will be used for optical navigation.",9/7/04ProjectA - TIM - 1357,L2-PRD-1498 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1498 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1498] Allocation: The Spacecraft System shall provide a rate resolution of better than 0.25 microrad/sec per axis in its rate commands.,9/7/04ProjectA - TIM - 1356,L2-PRD-1395 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1395 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1395] Allocation: The Spacecraft System shall provide a resolution of better than 0.005 mrad per axis in its pointing telemetry.,9/7/04ProjectA - TIM - 1355,L2-PRD-1391 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1391 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1391] Allocation: The Spacecraft System shall provide a resolution of better than 0.005 mrad per axis in its pointing commands.,9/7/04ProjectA - TIM - 1354,L2-PRD-1386 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1386 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1386] Allocation: The Spacecraft System shall provide a resolution of better than 0.005 mrad per axis in its pointing telemetry.,9/7/04ProjectA - TIM - 1353,L2-PRD-1382 is not linked to L3 SC&FS rqts,4,Requirement L2-PRD-1382 is not linked to any requirements in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. Referenced Requirement: [L2-PRD-1382] Allocation: The Spacecraft System shall provide a resolution of better than 0.005 mrad per axis in its pointing commands.,9/7/04ProjectA - TIM - 1352,ProjectA L3 SC&FSRD Rqt: L3-SFS-2431 specifies inaccurate attitude transient allocation,3,"The attitude transient allocation specified in the requirement L3-SFS-2431 is 0.300 mrad for RWA effects. However, according to the requirements L3-SFS-2052 and L3-SFS-2051, the error allocation for high frequency reaction wheel assembly, data latency, and attitude transient effects can be calculated by sqrt(0.31*0.31-0.13*0.13), which is equal to 0.2814 mrad. The attitude transient allocation should be less than 0.2814 mrad. Referenced Requirements: [L3-SFS-2431] The attitude transient allocations are as follows: RWA effects1 0.300 mrad Solar array stepping 0.100 mrad Momentum unloading 0.900 mrad Data latency (external torques) 0.001 mrad 1) Includes static and dynamic imbalance, zero speed crossing, data latency to drag torque variation, and data latency to output torque ripple, noise and quantization.",9/7/04ProjectA - TIM - 1351,ProjectA L3 SC&FSRD Rqt: L3-SFS-108 seems inaccurate,3,"In L3-SFS-108 rates are specified. The rate errors might be more appropriate than rates if rate commands are not zeros. Referenced Requirement: [L3-SFS-108] While it is acquiring opnav images, the Flight System shall be able to limit its roll (X), pitch (Y), and yaw (Z) rates to less than 250 microrad/sec (3 sigma) for a period of at least 30 seconds. Note: Optical navigation is the driver for this requirement.",9/7/04ProjectA - TIM - 1350,ProjectA L3 SC&FSRD Rqt: L3-SFS-2058 specifies an unnecessary RWA error,3,"Requirement L3-SFS-2058 states that the ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors, attitude determination errors, and high frequency reaction wheel assembly, data latency, and attitude transient effects. However, during RCS delta-V maneuvers, the ACS will only use the RCS as control effectors. RWA is not in use. Including high frequency reaction wheel assembly seems unnecessary. Referenced Requirement: [L3-SFS-2058] The RCS Pointing Accuracy budget shall be sub-allocated to the ACS, RCS, and Mechanical subsystems, as shown in the following table: TBD TABLE The ACS static/Quasi-Static allocations shall include the Star Tracker internal misalignments. The ACS Slow Dynamic allocation shall include Star Tracker low frequency, velocity aberration, and star catalog errors, as well as attitude control tolerance errors. The ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors, attitude determination errors, and high frequency reaction wheel assembly, data latency, and attitude transient effects. The Mechanical allocations shall include all alignment errors and uncertainties affecting the RCS Thruster to Star Tracker alignments and the IRU to Star Tracker alignments.",9/7/04ProjectA - TIM - 1349,ProjectA L3 SC&FSRD Rqt: L3-SFS-2057 is inaccurate,3,"Requirement L3-SFS-2057 states that the ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors, attitude determination errors, and high frequency reaction wheel assembly, data latency, and attitude transient effects. However, during the Engine thrusting, the ACS will only use the Engine as control effectors. RWA is not in use. Including high frequency reaction wheel assembly seems unnecessary. Referenced Requirements: [L3-SFS-2057] The Engine Pointing Accuracy budget shall be sub-allocated to the ACS, Mechanical and Engine subsystems, as shown in the table below. All errors are in mrad and are defined as 3 sigma, per axis, and zero to peak. _______________________________________________________ Subsystem Static/Quasi-Static Slow Dynamic Fast Dynamic _______________________________________________________ ACS n/a 6.00 1.03] Mechanical n/a 6.00 n/a Engine n/a 0.50 n/a _______________________________________________________ Note that there are no Static or Quasi-static allocations shown as they are to be calibrated out by the MDN team The ACS static/Quasi-Static allocations shall include the Star Tracker internal misalignments. The ACS Slow Dynamic allocation shall include Star Tracker low frequency, velocity aberration, and star catalog errors, as well as attitude control tolerance errors. The ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors, attitude determination errors, and high frequency reaction wheel assembly, data latency, and attitude transient effects. The Mechanical allocations shall include all alignment errors and uncertainties affecting the Engine thruster interface to Star Tracker alignment and the IRU to Star Tracker alignment. The Engine Slow Dynamic Errors shall include all alignment variations affecting the Engine thruster to Engine thruster interface.",9/7/04ProjectA - TIM - 1348,ProjectA L3 SC&FSRD Rqt: L3-SFS-2377 is inaccurate,3,"The numbers 0.10 and 14.00 in the requirement L3-SFS-2377 should be n/a according to the explanation under the numbers in the requirement. Referenced Requirement: [L3-SFS-2377] The GRaND Pointing Knowledge budget shall be sub-allocated to the ACS and Mechanical subsystems, as shown in the table below. All errors are in mrad and are defined as 3 sigma, per axis, and zero to peak. ______________________________________________________ Subsystem Static/Quasi-Static Slow Dynamic Fast Dynamic ______________________________________________________ ACS 0.10 0.15 0.13 Mechanical 14.00 1.60 n/a ______________________________________________________ Note that there are no Static or Quasi-static allocations shown as they are to be calibrated out by the VIR team. The ACS static/Quasi-Static allocations shall include the Star Tracker internal misalignments. The ACS Slow Dynamic allocation shall include Star Tracker low frequency, velocity aberration, and star catalog errors. The ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors and attitude determination errors. The Mechanical allocations shall include all alignment errors and uncertainties affecting the VIR to Star Tracker alignment and the IRU to Star Tracker alignment.",9/7/04ProjectA - TIM - 1347,ProjectA L3 SC&FSRD Rqt: L3-SFS-3153 is inconsistent with L2-PRD-1519,3,"Requirement L2-PRD-1519 is linked to the requirement L3-SFS-2153 in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. However, in L3-SFS-2153 rate errors are specified instead of rates in L2-PRD-1519. The rate errors might be more appropriate than rates if rate commands are not zeros. Referenced Requirements: [L2-PRD-1519] Allocation: The Spacecraft System shall be able to limit its yaw (Z) rate to less than 250 microrad/sec (3 sigma, zero-to-peak), for a period of at least 30 seconds. [L3-SFS-2153] During science operations, the Spacecraft System shall be able to limit the Flight System's yaw (Z) rate error to less than 250 microrad/sec (3 sigma) for a period of at least 30 seconds.",9/7/04ProjectA - TIM - 1346,ProjectA L3 SC&FSRD Rqt: L3-SFS-105 is inconsistent with L2-PRD-1504,3,"Requirement L2-PRD-1504 is linked to the requirements L3-SFS-105 in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. However, in L3-SFS-105 rate errors are specified instead of rates in L2-PRD-1504. The rate errors might be more appropriate than rates if rate commands are not zeros. Referenced Requirements: [L2-PRD-1504] Allocation: During the Vesta and Ceres Science Phases, the Spacecraft System shall be able to limit its roll (X) and pitch (Y) rates to less than 60 microrad/sec per axis (3 sigma, zero-to-peak), over intervals of up to two seconds. [L3-SFS-105] During science operations, the Spacecraft System shall be able to limit the Flight System's roll (X) and pitch (Y) rate errors to less than 60 microrad/sec (3 sigma) for a period of at least 30 seconds.",9/7/04ProjectA - TIM - 1345,ProjectA L3 SC&FSRD Rqt: L3-SFS-2153 is inconsistent with L2-PRD-720,3,"Requirement L2-PRD-720 is linked to the requirements L3-SFS-2153 and L3-SFS-108 in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. However, in L3-SFS-2153 rate errors are specified instead of rates in L2-PRD-720. The rate errors might be more appropriate than rates if rate commands are not zeros. Referenced Requirements: [L2-PRD-720] Allocation: The Spacecraft System shall be able to limit its yaw (Z) rate to less than 250 microrad/sec (3 sigma, zero-to-peak), over intervals of up to 30 seconds. [L3-SFS-2153] During science operations, the Spacecraft System shall be able to limit the Flight System's yaw (Z) rate error to less than 250 microrad/sec (3 sigma) for a period of at least 30 seconds.",9/7/04ProjectA - TIM - 1344,ProjectA L3 SC&FSRD Rqt: L3-SFS-105 is inconsistent with L2-PRD-718,3,"Requirement L2-PRD-718 is linked to the requirement L3-SFS-105 in the DOORS module for the Level 3 Spacecraft and Flight System Requirements Document. However, in L3-SFS-105 rate errors are specified in stead of rates in L2-PRD-718. The rate errors might be more appropriate than rates if rate commands are not zeros. Referenced Requirements: [L2-PRD-718] Allocation: During the Vesta and Ceres Science Phases, the Spacecraft System shall be able to limit its roll (X) and pitch (Y) rates to less than 60 microrad/sec per axis (3 sigma, zero-to-peak) for intervals of up to one second. [L3-SFS-105] During science operations, the Spacecraft System shall be able to limit the Flight System's roll (X) and pitch (Y) rate errors to less than 60 microrad/sec (3 sigma) for a period of at least 30 seconds.",9/7/04ProjectA - TIM - 1343,ProjectA Spacecraft and Flight System Requirement L3-SFS-2096: has no associated L4 traces,3,Requirement L3-SFS-2096 should flow down to the Uplink SRS. The Uplink SRS should state that the uplink data format shall be in accordance with appropriate CCSDS standards. There are no traces to any Level 4 sofware requirements to satisfy requirement L3-SFS-2096. Referenced Requirements: [L3-SFS-2096] The Flight System uplink and downlink data formats shall be in accordance with appropriate Consultative Committee for Space Data Systems (CCSDS) standards. The appropriate CCSDS standards will be identified in the Flight-Ground ICD.,9/7/04ProjectA - TIM - 1342,ProjectA OBC ACS Requirement ACS-AN001: Does not properly define when the AN software shall send ephemeris data to AC task,3,Requirement ACS-AN001 is incomplete as written. It may be possible that requirement ACS-AN001 should be rewritten to state that the AN software shall send ephemeris data to AC task every 300 seconds AFTER enabled by AC task. Referenced Requirement: [ACS-AN001] The AN software shall send ephemeris data to AC task every 300 seconds enabled by AC task.,9/7/04ProjectA - TIM - 1341,ProjectA OBC ACS Requirement ACS-AC098: The exact intent of the requirement is ambiguous,3,"The intent of requirement ACS-AC098 is not clear as written. The run-on sentence lends itself to multiple interpretations of the requirement. Requirement ACS-AC098 should be re-written to address the specific intent of the requirement. Referenced Requirement: [ACS-AC098] The software shall use proportional-integral-derivative (PID) controller for Target Pointing, Delta-V except for Thrust Vector Control (TVC), and Science Mode, proportional-derivative (PD) controller for Acquisition/Coarse Sun Pointing Mode, with only the derivative (rate) term for the Rate Nulling submode. The TVC has a separate controller as described in ACS Performance Specification section 3.2.2.3.",9/7/04ProjectA - TIM - 1340,ProjectA OBC ACS Requirement ACS-AC081: The exact intent of the requirement is ambiguous,3,"The intent of requirement ACS-AC081 is not clear as written. ""…for a specified time exceeds the maximum expected eclEnginee period."" is ambiguous. Requirement ACS-AC081 should be re-written to address the intent of the requirement. Referenced Requirement: [ACS-AC081] The ACS mode shall transition from Acquisition/Coarse Sun Pointing, Sun Pointing Submode to Sun Acquisition Submode when the Y and Z axis attitude errors exceed specified (table) values for a specified time or there is no Sun presence detected from any CSS 'eyes' for a specified time exceeds the maximum expected eclEnginee period.",9/7/04ProjectA - TIM - 1339,L2-FPR-5 does not appear to be satisfied by the linked requirements (L3-SFS-888 & L3-SFS-951),3,"With the ambiguity of L2-FPR-5, it is difficult to determine if The two traced requirements (L3-SFS-888 & L3-SFS-951) satisfy requirement L2-FPR-5. Referenced Requirements: [L2-FPR-5] The system design shall consider the use of proven reliable interface types where fault issues, etc. have already been addressed, e.g., 1553 data bus or other avionics standards. [L3-SFS-888] The Spacecraft design shall ensure that faults in nonessential circuitry do not propagate to essential functional elements (e.g. failure of a telemetry monitor circuit shall not propagate to the functional element whose performance is being monitored)."" [L3-SFS-951] The Spacecraft solar array input power to the Engine system shall be fused and switched.",9/7/04ProjectA - TIM - 1338,ProjectA L3 SC&FSRD Rqt: L3-SFS-698 is missing links to L4 C&DH SRS requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. Since L3-SFS-698 is concerned only with command errors, all the requirements that do not directly pertain to commanding in the L4 C&DH SRS should be removed from linkage. Thus, the requirements in categories S2, S3, TG, TC, TO, DS, TCS, TS, HS and MS should be removed from linkage. The requirements in category SC and CS should be retained. The presently linked category SM requirements should also be omitted and be replaced by the ones in section 5.7.9.1 labeled as ""SM General Requirements"". In addition, the requirements in category S1 should be linked which are labeled as ""HSS1 Task"". Referenced Requirements: [L3-SFS-698] The Flight Software shall have the ability to detect and report invalid opcodes and out of range errors for commands.",9/7/04ProjectA - TIM - 1337,ProjectA L3 SC&FSRD Rqt: L3-SFS-877 is missing links to L4 C&DH SRS requirements,4,"L3-SFS-877 addresses stored sequences. However, according to the traceability matix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-877 is not traced to any L4 C&DH SRS requirements in Section 5.7.9.2.1 ""Memory Loads"" and Section 5.7.9.2.2, ""Memory Dumps."" L3-SFS-877 should be traced to all applicable L4 C&DH SRS requirements in this section. Referenced Requirements: [L3-SFS-877] The Flight Software shall provide the capability to read out a list of the stored sequence and their sizes.",9/7/04ProjectA - TIM - 1336,ProjectA L3 SC&FSRD Rqt: L3-SFS-875 is missing links to L4 C&DH SRS requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-875 should also be linked to section 5.7.9.1 in the L4 C&DH SRS labeled as ""SM General Requirements"". It is in this section where requirements exist that describe the generation of event messages for faulty Software Manager commands. Such command errors include the mishandling of loads of sequences. Referenced Requirements: [L3-SFS-875] If the Flight Software is unable to load a sequence as commanded, the Flight Software shall notify the Ground System of the error.",9/7/04ProjectA - TIM - 1335,ProjectA L3 SC&FSRD Rqt: L3-SFS-873 does not flow down to the L4 C&DH SRS,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-873 is not covered in the L4 C&DH SRS. It should be covered in section 5.7.11.1 labeled as ""Telemetry and Statistics Monitoring"". Referenced Requirements: [L3-SFS-873] The Flight Software shall support retention of the current sequence memory content in CEU DRAM following a fault protection initiated reset that does not cycle power.",9/7/04ProjectA - TIM - 1334,ProjectA L3 SC&FSRD Rqt: L3-SFS-872 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. Since L3-SFS-872 concerns only data storage capacity, only sections 5.7.9.1, 5.7.9.2.1, 5.7.9.2.2 and 5.7.9.2.3 should be retained in linkage with the L4 C&DH SRS. The other sections in category SM, concerning table operations, should be removed from linkage. Referenced Requirements: [L3-SFS-872] The spacecraft shall provide 4 Mbytes of sequence and data storage capacity in DRAM for MOS use and 200 Kbytes in SRAM for the VMLFC application code.",9/7/04ProjectA - TIM - 1333,ProjectA L3 SC&FSRD Rqt: L3-SFS-849 has been deleted but still has linked requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. Since L3-SFS-849 has been deleted, all links to it should be removed in the L4 C&DH SRS. Referenced Requirements: [L3-SFS-849] Deleted in FGICD.",9/7/04ProjectA - TIM - 1331,ProjectA L3 SC&FSRD Rqt: L3-SFS-843 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-842 should only be mapped to sections 5.7.9.2.1 and 5.7.9.2.2 in the L4 C&DH SRS. These sections are labeled ""Memory Loads"" and ""Memory Dumps"". The other sections in category SM are irrelevant and should be removed from linkage. In addition, L3-SFS-842 should be linked to section 5.7.8.2 labeled as ""Data Storage"". This section pertains specifically to gathered telemetry data whereas the SM sections pertain to the storage of flight software in general, including telemetry data. Referenced Requirements: [L3-SFS-843] The Flight Software shall allow the transmission of stored data to be paused or aborted by command while in progress.",9/7/04ProjectA - TIM - 1330,ProjectA L3 SC&FSRD Rqt: L3-SFS-842 does not flow down to the L4 C&DH SRS,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-842 is not covered in the L4 C&DH SRS. It should be covered in section 5.7.8.1 of the L4 labeled as ""Telemetry Output"". Referenced Requirements: [L3-SFS-842] The Flight Software shall not interrupt downlink of telemetry based on the status of uplink lock.",9/7/04ProjectA - TIM - 1329,ProjectA L3 SC&FSRD Rqt: L3-SFS-831 is missing links to L4 C&DH SRS requirements,4,"L3-SFS-831 addresses the termination of command sequences. However, according to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-831 is not traced to any L4 C&DH SRS requirements in section 5.7.7.1 - Relative Time Sequences. L3-SFS-831 should be traced to all applicable L4 C&DH SRS requirements in this section. Referenced Requirements: [L3-SFS-831] The Flight Software shall be able to terminate a sequence with either a single command or single sequence instruction.",9/7/04ProjectA - TIM - 1328,ProjectA L3 SC&FSRD Rqt: L3-SFS-830 is missing links to L4 C&DH SRS requirements,4,"L3-SFS-830 addresses the termination of command sequences. However, according to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-830 is not traced to any L4 C&DH SRS requirements in section 5.7.7.1 - Relative Time Sequences. L3-SFS-830 should be traced to all applicable L4 C&DH SRS requirements in this section. Referenced Requirements: [L3-SFS-830] The Flight Software shall provide the capability to terminate a sequence regardless of its present state.",9/7/04ProjectA - TIM - 1327,ProjectA L3 SC&FSRD Rqt: L3-SFS-829 is missing links to L4 C&DH SRS requirements,4,"L3-SFS-829 addresses loading a sequence file and starting execution. However, according to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-829 is not traced to any L4 C&DH SRS requirements in section 5.7.7.1 - Relative Time Sequences. L3-SFS-829 should be traced to all applicable L4 C&DH SRS requirements in this section. Referenced Requirements: [L3-SFS-829] The Flight Software shall provide the capability to load a sequence file and start execution of the first function it contains as a single action (called ""autoexecute"").",9/7/04ProjectA - TIM - 1326,ProjectA L3 SC&FSRD Rqt: L3-SFS-2339 is missing links to L4 C&DH SRS requirements,4,"L3-SFS-2339 addresses modifying or replacing RTSs by the ground. However, according to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-2339 is not traced to any L4 C&DH SRS requirements in sections 5.7.9.2.1 - Memory Loads, 5.7.9.2.2 - Memory Dumps, and 5.7.9.2.3 - Memory Copies. L3-SFS-2339 should be traced to all applicable L4 C&DH SRS requirements in these sections. Referenced Requirements: [L3-SFS-2339] The Flight System shall allow the ground to modify or replace RTSs",9/7/04ProjectA - TIM - 1325,ProjectA L3 SC&FSRD Rqt: L3-SFS-2338 is missing links to L4 C&DH SRS requirements,4,"L3-SFS-2338 addresses providing RTSs. However, according to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-2338 is not traced to any L4 C&DH SRS requirements in section 5.7.7.1 - Relative Time Sequences. L3-SFS-2338 should be traced to all applicable L4 C&DH SRS requirements in this section. Referenced Requirements: [L3-SFS-2338] The Flight System shall provide RTSs using Orbital heritage flight software",9/7/04ProjectA - TIM - 1324,ProjectA L3 SC&FSRD Rqt: L3-SFS-825 is missing links to L4 C&DH SRS requirements,4,"L3-SFS-825 addresses calling onboard blocks. However, according to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-825 is not traced to any L4 C&DH SRS requirements in section 5.7.7.1 - Relative Time Sequences. L3-SFS-825 should be traced to all applicable L4 C&DH SRS requirements in this section. Referenced Requirements: [L3-SFS-825] The Flight System shall allow onboard blocks to be called by sequence instruction or command.",9/7/04ProjectA - TIM - 1323,ProjectA L3 SC&FSRD Rqt: L3-SFS-824 does not flow down to the L4 C&DH SRS,4,"L3-SFS-824 addresses sequence instructions. However, according to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-824 is not traced to any L4 C&DH SRS requirements in section 5.7.7.1 - Relative Time Sequences. L3-SFS-824 should be traced to all applicable L4 C&DH SRS requirements in this section. Referenced Requirements: [L3-SFS-824] The Flight System shall provide the capability for at least 64 arguments to be passed to a block within the sequence instruction that calls it.",9/7/04ProjectA - TIM - 1322,ProjectA L3 SC&FSRD Rqt: L3-SFS-823 is missing links to L4 C&DH SRS requirements,4,"L3-SFS-823 addresses relative-time sequences. However, according to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-823 is not traced to any L4 C&DH SRS requirements in section 5.7.7.1 - Relative Time Sequences. L3-SFS-823 should be traced to all applicable L4 C&DH SRS requirements in this section. Referenced Requirements: [L3-SFS-823] The Flight System shall support parameterized, reusable relative-time sequences (i.e., blocks). Blocks may accept parameters (a parameterized block), return a value (a block with a returned value), or both (a parameterized block with a returned value).",9/7/04ProjectA - TIM - 1320,ProjectA L3 SC&FSRD Rqt: L3-SFS-780 needs requirement links added and some removed,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. Since L3-SFS-780 is concerned only with commands, only the categories SB and SC should be kept in linkage to the L4 C&DH SRS. All other categories should be removed from linkage. SB and SC are labeled ""Software Bus"" and ""Relative Time Sequences"" respectively. Also, the category S1, which is uplink processing, should be linked to L3-SFS-780. Referenced Requirements: [L3-SFS-780] The Flight Software shall be able to process any command in the Command and Telemetry Dictionary",9/7/04ProjectA - TIM - 1319,ProjectA L3 SC&FSRD Rqt: L3-SFS-777 needs requirement links added and some removed,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-777, which concerns with the formatting of ground commands, should not be linked with the category CS requirements in the L4 C&DH SRS. These pertain to the checksum verifications of memory locations and do not have a direct connection with L3-SFS-777. Instead, all of the requirements in category S1, which concern uplink processing, should be linked to L3-SFS-777. It should also be linked to SC010. Referenced Requirements: [L3-SFS-777] The Flight Software shall accept Command Link Transfer Units (CLTU) data from the ground in the fromat described in the Command and Telemetry Dictionary.",9/7/04ProjectA - TIM - 1318,ProjectA L3 SC&FSRD Rqt: L3-SFS-761 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. The RTS commands are not too directly connected with the startup procedure conditions of L3-SFS-761. Therefore, all requirements in the category SC should be removed from linkage in the C&DH SRS. Referenced Requirements: [L3-SFS-761] The Flight Software shall include system startup procedures that contain default control capabilities sufficient to place the flight software into a safe and deterministic system configuration without any ground intervention following power-up or reset.",9/7/04ProjectA - TIM - 1317,ProjectA L3 SC&FSRD Rqt: L3-SFS-755 is missing a link to L4 C&DH SRS requirement SB010.,4,Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-755 should be linked to the L4 C&DH SRS requirement SB010. Referenced Requirements: [L3-SFS-755] The Flight Software shall monitor OBC utilization and telemeter for ground analysis.,9/7/04ProjectA - TIM - 1316,ProjectA L3 SC&FSRD Rqt: L3-SFS-754 needs requirement links added and some removed,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-754 is concerned only with the time tagging of telemetry packets, not how these packets are generated, stored or transmitted. Therefore, all L4 C&DH requirements in the categories of TG, TO, DS, TCS, TS HS CS and EV should be removed from linkage. However, in addition to the remaining requirements, TC005, TO008, TO009 TCS101 and TCS102 should be linked also. Referenced Requirements: [L3-SFS-754] General flight software telemetry packets shall be timed tagged to a minimum resolution of 1.0 seconds with respect to spacecraft time.",9/7/04ProjectA - TIM - 1315,ProjectA L3 SC&FSRD Rqt: L3-SFS-749 is missing several C&DH requirement links,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. The following L4 C&DH SRS requirements should be linked to L3-SFS-749: XB001, XB008 to XB010, XB013, S2004 to S2006, S3009, S3009.1, S3009.2, TG002 to TG004, TG006, TO001, TO006 to TO011, TO013, TO014, DS029, DS001 to DS006, DS008 to DS013, DS026. Referenced Requirements: [L3-SFS-749] The Flight Software shall support data collection and/or storage and transmission of all subsystem and science instrument telemetry.",9/7/04ProjectA - TIM - 1314,ProjectA L3 SC&FSRD Rqt: L3-SFS-2241 is missing C&DH requirement links,4,Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. The following requirements in the C&DH SRS should be linked to L3-SFS-224: S1001 and S1004. Referenced Requirements: [L3-SFS-2241] The Flight Software shall be capable of accepting uplinked CCSDS command frames at up to 2000 bits per second.,9/7/04ProjectA - TIM - 1313,ProjectA L3 SC&FSRD Rqt: L3-SFS-747 is missing several C&DH requirement links,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. The following C&DH SRS requirements should be linked to L3-SFS-747: SB001, SB005, SB006, SC013, SC014, SC014.1 to SC014.4, SC020, SM004, SM038, SM039, SM033 and CS007. Referenced Requirements: [L3-SFS-747] The Flight Software shall provide command accept and reject counters for subsystem tasks and interfaces.",9/7/04ProjectA - TIM - 1312,ProjectA L3 SC&FSRD Rqt: L3-SFS-746 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. SB003 and SB010 in the OBC C&DH SRS should be removed from linkage to L3-SFS-746. These two requirements, which relate to housekeeping data and CPU utilization, are not directly connected to L3-SFS-746 which involves real-time and stored commands. Referenced Requirements: [L3-SFS-746] The Flight Software shall provide command handling in the form of real-time command processing (distribution to subsystem functions and instruments), and stored capability (relative and absolute).",9/7/04ProjectA - TIM - 1310,ProjectA L3 SC&FSRD Rqt: L3-SFS-1740 has been deleted but still has linked requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. Since L3-SFS-1740 has been deleted, all requirements to it should be removed from linkage in the OBC C&DH SRS. These are the L4 requirements that are currently linked: DS001 to DS006, DS008 to DS027 and DS029. Referenced Requirements: [L3-SFS-1740] 10.2.4.2 Deleted",9/7/04ProjectA - TIM - 1309,ProjectA L3 SC&FSRD Rqt: L3-SFS-736 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. Since L3-SFS-736 is concerned only with memory retention, the requirements that relate to memory dumps, playback and retransmit of data should be removed from linkage in the OBC C&DH SRS. Thus, the following C&DH requirements should be removed from linkage: DS009, DS011 to DS015, DS018, DS019, DS021 to DS023, DS026 and DS027. Referenced Requirements: [L3-SFS-736] The Flight Software shall support DRAM memory retention following an OBC reset (I.e. do not overwrite old data).",9/7/04ProjectA - TIM - 1308,ProjectA L3 SC&FSRD Rqt: L3-SFS-735 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-735 is concerned only with memory storage. All requirements in the OBC C&DH SRS that relate to table operations, memory dump, playback and retransmit of data should be removed from linkage to L3-SFS-735. The requirements that are to be removed from linkage are as follows: DS009, DS011 to DS015, DS018, DS019, DS021 to DS023, DS026, DS027, SM004, SM006, SM007, SM011, SM013 to SM015, SM017, SM019 to SM032, SM036, SM042 to SM046. Referenced Requirements: [L3-SFS-735] The flight software shall manage an 8.0 Gigabit Bulk Memory Space to store information on the spacecraft including engineering, housekeeping, VML data, ephemeris data, thrust tables, and science data from the instruments..",9/7/04ProjectA - TIM - 1307,ProjectA L3 SC&FSRD Rqt: L3-SFS-734 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. L3-SFS-734 is concerned only with the storage of data in memory. All requirements relating to memory dumps, table operations, playback and retransmit of data do not have that much of a direct connection to L3-SFS-734. Therefore, these requirements should be removed from linkage in the OBC C&DH SRS. The requirements to be removed are as follows: DS009, DS011 to DS015, DS018, DS019, DS021 to DS023, DS026, DS027, SM006, SM007, SM011, SM013 to SM015, SM017, SM019 to SM024, SM034 to SM036, SM042 to SM046. Referenced Requirements: [L3-SFS-734] The Flight Software FSW shall support memory storage using partitions that are on-orbit configurable.",9/7/04ProjectA - TIM - 1306,ProjectA L3 SC&FSRD Rqt: L3-SFS-724 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. All of the RTS related requirements that link to L3-SFS-724 in the OBC C&DH SRS should be removed. These requirements are too general for them to be directly linked to L3-SFS-724. Therefore, the requirements SC010 to SC021 should be removed from linkage. Referenced Requirements: [L3-SFS-724] The Flight Software shall support control the UTC-relative execution time of a Flight System event to within 5 minutes.",9/7/04ProjectA - TIM - 1305,ProjectA L3 SC&FSRD Rqt: L3-SFS-704 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. All of the RTS related requirements can be removed from the trace of L3-SFS-704. These requirements are too general for them to have direct linkage with a requirement concerning Critical Inhibits. The following requirements should be removed: SC010 to SC014, SC014.1 to SC014.4, and SC015 to SC021. Referenced Requirements: [L3-SFS-704] The Flight Software shall support inhibits as required by the flight system for all critical events (Category B*), which could result in serious injury, ProjectA Flight System, damage, or in the unscheduled use of safing procedures. The total requirements is two inhibits (single fault tolerant). Inhibits include Reaction Wheels and IRU.",9/7/04ProjectA - TIM - 1304,ProjectA L3 SC&FSRD Rqt: L3-SFS-703 is linked to unnecessary requirements,4,"Note: The IV&V team generated this issue based on a traceability matrix created by the IV&V team from the traceability matrix provided by the L4 OBC C&DH SRS. L4 section numbers were correlated to the unique requirement identifiers in the SRS. L3 SC&FS RD section numbers were correlated to the corresponding L3 requirement DOORS IDs. All of the RTS related requirements can be removed from the trace of L3-SFS-703. These requirements are too general for them to have direct linkage with a requirement concerning Catastrophic Inhibits. The following requirements should be removed: SC010 to SC014, SC014.1 to SC014.4, and SC015 to SC021. Referenced Requirements: [L3-SFS-703] The Flight Software shall support inhibits as required by the flight system for all catastrophic events (Category A*) which could result in a fatal or disabling injury, total loss of the ProjectA Flight System or major facility damage. The total requirement is three inhibits (dual fault tolerant). Inhibits include Engine, RCS Thrusters, Solar Array Deployment and RF Transmit.",9/7/04ProjectA - TIM - 1303,ProjectA L3 SC&FSRD Rqt: L3-SFS-697 is linked to unnecessary requirements,4,"According to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-697 is traced to the following L4 OBC C&DH SRS sections: 5.7.9.2, Memory Operations 5.7.3, HSS2 TASK 5.7.4, HSS3 TASK 5.7.5, TELEMETRY GATHERER 5.7.6, TIME MANAGEMENT AND DISTRIBUTION 5.7.7.1, Relative Time Sequences 5.7.8.1, Telemetry Output 5.7.8.2, Data Storage 5.7.10.4, Heater On/Off FET Control 5.7.11.1, Telemetry and Statistics Monitoring 5.1.11.2, Health & Safety Task 5.1.11.3, Memory Scrub 5.1.11.4, Checksum 5.7.9.4, Memory Dwell & Diagnostics The L3 requirement should only be traced to those requirements that resulted from its flow-down. Therefore, only the L4 requirement links associated with table loads and table commits should be traced to L3-SFS-697. These requirements are: SM011, SM013, SM014, SM020, SM043, SM044, SM046, SM022, SM023 and SM024. The requirements that concern table dumps and checksums should be deleted from linkage. These requirements are SM015, SM042, SM035, SM017, SM019, SM021, SM021.1, SM021.2 and SM045. The benefits of a requirements traceability matrix depends largely on the quality and completeness of the traces established between each level of requirements. This can generally be defined as the extent to which traces exist between all parent requirements and the directly related flowed down requirement. Tracing entire sections of requirements to one parent requirement lends itself to “over-tracing.” Over-tracing represents a case where requirements may or may not be satisfied by the traced children, but where requirements are traced to several children that are not directly associated with the accomplishment of the functionality levied by the parent. This approach results in non-concise traceability, which compromises the ability a traceability matrix to support verification of requirements flow-down from design through test. Referenced Requirements: [L3-SFS-697] The Flight Software shall allow on-orbit modifications to operational heater set points by table commands.",9/7/04ProjectA - TIM - 1302,ProjectA L3 SC&FSRD Rqt: L3-SFS-696 is linked to unnecessary requirements,4,"According to the traceability matrix within L4 OBC C&DH SRS, the L3 SC&FSRD section corresponding to requirement L3-SFS-696 is traced L4 OBC C&DH SRS Section 5.7.9.3 “System Table Operations,” which comprises approximate 20 requirements. The L3 requirement should only be traced to those requirements that resulted from its flow-down. Therefore, only the L4 requirement links associated with table loads and table commits should be traced to L3-SFS-696. These requirements are: SM011, SM013, SM014, SM020, SM043, SM044, SM046, SM022, SM023 and SM024. The requirements that are concerned with table dumps and checksums should be deleted from linkage. These requirements are SM015, SM042, SM035, SM017, SM019, SM021, SM021.1, SM021.2, and SM045. The benefits of a requirements traceability matrix depends largely on the quality and completeness of the traces established between each level of requirements. This can generally be defined as the extent to which traces exist between all parent requirements and the directly related flowed down requirement. Tracing entire sections of requirements to one parent requirement lends itself to “over-tracing.” Over-tracing represents a case where requirements may or may not be satisfied by the traced children, but where requirements are traced to several children that are not directly associated with the accomplishment of the functionality levied by the parent. This approach results in non-concise traceability, which compromises the ability a traceability matrix to support verification of requirements flow-down from design through test. Referenced Requirements: [L3-SFS-696] The Flight Software shall allow on-orbit modifications to all primary function parameters used by ACS, including gains, inertias, timers, and limits.",9/7/04ProjectA - TIM - 1301,ProjectA L3 SC&FSRD Rqt: L3-SFS-876 is missing a link to L2-FGI-287,4,"L3-SFS-876 was previously linked with L2-FGI-289 which has been deleted. L3-SFS-876 should now be linked with to L2-FGI-287. Referenced Requirements: [L3-SFS-876] Sequences and blocks shall be detectable from the ground. This may be via overwriting the CRC information with zeroes. [L2-FGI-289] DELETED. (combined with 3.1.7.2-4) [L2-FGI-287] The spacecraft shall provide capabilities to allow the MOS to load sequences, delete sequences and request sequence buffer directory listings. Sequence deletions may be via overwriting the CRC information with zeroes. Directory listing may be done via memory dumps.",9/7/04ProjectA - TIM - 1300,ProjectA L3 SC&FSRD Rqt: L3-SFS-861functionality is no longer addressed by L2 requirements,4,"The link between L3-SFS-861 and L2-FGI-262 is no longer valid, since the parent is now marked ""DELTED."" Therefore, recommend evaluating whether L3-SFS-861 is still valid. If so, either L2-FGI-262 should be reinstated or the child should be mapped to another parent. Otherwise, L3-SFS-861 should also be deleted. Referenced Requirements: [L3-SFS-861] The Ground Segment shall provide ephemeris tables that internally identify the object, central-body, and time ranges for which, and over which, the ephemeris data pertains. [L2-FGI-262] DELETED.",9/7/04ProjectA - TIM - 1299,ProjectA L3 SC&FSRD Rqt: L3-SFS-840 is missing a link to L2-FGI-784,4,"The link between L3-SFS-840 and L2-FGI-218 is no longer valid, since the parent is now marked "" MOVED TO 3.1.2.3."" L3-SFS-840 should now be linked to L2-FGI-784. Referenced Requirements: [L3-SFS-840] The Flight Software, by MOS command, shall be capable of retransmitting a specified stored VCDU. [L2-FGI-784] The spacecraft, by MOS command, shall be capable of retransmitting one or more specified VCDUs. [L2-FGI-218] MOVED TO 3.1.2.3",9/7/04ProjectA - TIM - 1298,ProjectA L3 SC&FSRD Rqt: L3-SFS-834 is missing a link to L2-FGI-784,4,"The link between L3-SFS-834 and L2-FGI-182 is no longer valid, since the parent is now marked ""DELETED."" L3-SFS-834 should now be linked to L2-FGI-784 which states, ""The spacecraft, by MOS command, shall be capable of retransmitting one or more specified VCDUs"". Referenced Requirements: [L3-SFS-834] The spacecraft shall provide frame retransmission via commands specifying VR and sequence numbers. [L2-FGI-784] The spacecraft, by MOS command, shall be capable of retransmitting one or more specified VCDUs. [L2-FGI-182] DELETED",9/7/04ProjectA - TIM - 1297,ProjectA L3 SC&FSRD Rqt: L3-SFS-874 is Inconsistent with L2-FGI-287,4,"L3-SFS-874 is inaccurately being flowed down from L2-FGI-287. L3-SFS-874 implies that both sequence deletions and directory listings are accomplished by a memory dump. However, L2-FGI-287 indicates that only the directory listing is done with a memory dump - sequence deletions are performed by overwriting the CRC information with zeroes. These specifications should be made consistent. Also, the phrase ""sequence buffer"" should be inserted before the phrase ""directory listings"" in L3-SFS-874, (i.e. as it appears in L2-FGI-287) such that the child is at least as concise as the parent Referenced Requirements: [L3-SFS-874] The Flight Software shall provide capabilities to allow the MOS to load and delete sequences and request directory listings, all via memory dump. [L2-FGI-287] The spacecraft shall provide capabilities to allow the MOS to load sequences, delete sequences and request sequence buffer directory listings. Sequence deletions may be via overwriting the CRC information with zeroes. Directory listing may be done via memory dumps.",9/7/04ProjectA - TIM - 1296,ProjectA L2 FGICD Rqt: L2-FGI-349 functionality is missing in L3 SC&FSRD,4,"L2-FGI-349 has not been flowed down to L3 Spacecraft & Flight Systems Requirements Document (SC&FS RD). Recommend inserting requirement(s) to address this requirement in SC&FS RD Section 10.9 ""Time References"". Referenced Requirement: [L2-FGI-349] 8. The spacecraft shall format packet time tags using the unsegmented time code format in the CCSDS Time Code Formats standard listed in section 1.3.1 of this FGICD.",9/7/04ProjectA - TIM - 1295,ProjectA L2 FGICD Rqt: L2-FGI-778 is missing a link to L3-SFS-2339,4,"L2-FGI-778 is the same requirement as L3-SFS-2339. Consequently, a link should be added between these two requirements. Also, L3-SFS-2339 is currently linked to L2-FGI-531 which has been deleted and; therefore, the link should be removed. Referenced Requirements: [L2-FGI-778] The Flight System shall allow the ground to modify or replace RTSs. [L3-SFS-2339] The Flight System shall allow the ground to modify or replace RTSs",9/7/04ProjectA - TIM - 1294,ProjectA L2 FGICD Rqt: L2-FGI-777 is missing a link to L3-SFS-2338,4,"L2-FGI-777 is at least partially addressed by requirement L3-SFS-2338. Consequently, this child should be linked to L2-FGI-777. Also, recommend assessing whether additional links are necessary to satisfy this parent. Referenced Requirements: [L2-FGI-777] The Flight System shall provide RTSs for fault protection, fault recovery, and launch/initial-acquisition activities. [L3-SFS-2338] The Flight Software shall provide RTSs using Orbital heritage flight software.",9/7/04ProjectA - TIM - 1293,ProjectA L2 FGICD Rqt: Intent of L2-FGI-146 unclear with respect to L2-FGI-145,4,"The text of L2-FGI-146 is included within L2-FGI-145; however, the latter excludes the termination of the master thread. It's unclear whether the intent of L2-FGI-146 is to terminate all threads of execution including the master sequence or whether L2-FGI-145 simply represents a more complete requirement than L2-FGI-146, making L2-FGI-146 redundant to L2-FGI-145. Recommend clarifying the intent of L2-FGI-146 if it is referencing a command that is mutually excusive of the command referenced by L2-FGI-145. Otherwise, L2-FGI-146 should be deleted. Referenced Requirements: [L2-FGI-145] The spacecraft shall terminate all threads of VML execution except the master sequence thread upon command. The Master sequence is identified to the spacecraft via a global variable set by the ground. [L2-FGI-146] The spacecraft shall terminate all threads of VML execution upon command.",9/7/04ProjectA - TIM - 1292,ProjectA L3 SC&FSRD Rqt: L3-SFS-810 seems inconsistent with L3-SFS-809,4,"The text of L3-SFS-810 is included within L3-SFS-809; however, the latter excludes the termination of the master thread. It's unclear whether the intent of L3-SFS-810 is to terminate all threads of execution including the master sequence or whether L3-SFS-809 simply represents a more complete requirement than L3-SFS-810, making L3-SFS-810 redundant to L3-SFS-809. Recommend clarifying the intent of L3-SFS-810 if it is referencing a command that is mutually exclusive of the command referenced by L3-SFS-809. Otherwise, L3-SFS-810 should be deleted. Referenced Requirements: [L3-SFS-809] The Flight Software shall terminate all threads of execution except the master sequence thread upon command. The Master sequence is identified to the Flight Software via a global variable set by the ground. [L3-SFS-810] The Flight Software shall terminate all threads of execution upon command.",9/7/04ProjectA - TIM - 1291,ProjectA L3 SC&FSRD Rqt: L3-SFS-798 is Inconsistent with the deletion of L2-FGI-133,4,"Currently L2-FGI-133 is the only parent linked to L3-SFS-798; however, this L2-FGI-133 is marked as 'DELETED.' If this capability is no longer necessary, then L3-SFS-798 should also be deleted. Otherwise, either the deleted FGICD requirement should be reinstated or a new L2 requirement that flows down to L3-SFS-798 should be created and traced accordingly. Referenced Requirements: [L3-SFS-798] The Flight Software shall record the total number of uncorrectable uplink handling errors detected in the uplink telemetry [L2-FGI-133] DELETED",9/7/04ProjectA - TIM - 1290,ProjectA L3 SC&FSRD Rqt: L3-SFS-797 is Inconsistent with the deletion of L2-FGI-132,4,"Currently L2-FGI-132 is the only parent linked to L3-SFS-797; however, this L2-FGI-132 is marked as 'DELETED.' If this capability is no longer necessary, then L3-SFS-797 should also be deleted. Otherwise, either the deleted FGICD requirement should be reinstated or a new L2 requirement that flows down to L3-SFS-797 should be created and traced accordingly. Referenced Requirements: [L3-SFS-797] The Flight Software shall preserve the contents of the command history log through a Power On Reset. [L2-FGI-132] DELETED",9/7/04ProjectA - TIM - 1289,ProjectA L3 SC&FSRD Rqt: L3-SFS-796 is conveying inaccurate information on the most recently executed commands,4,"In L3-SFS-796, the phrase ""40 Mbits of recently executed commands"" should be changed to: ""40 Mbits of the most recently executed commands"". The statement is conveying inaccurate information without this modification. Referenced Requirements: [L3-SFS-796] The command history log shall store up to 40 Mbits of recently executed commands.",9/7/04ProjectA - TIM - 1288,ProjectA L2 PRD Rqt: L2-PRD-831 requirements trace is Incomplete.,4,"Currently, L2-PRD-831 is not linked to the Level 3 SC&FS RD DOORS module. L3-SFS-205 and L3-SFS-841 both address the flight systems capability to remain receptive to uplinked commands/data at all times during mission, which is directly applicability to L2-PRD-831. Therefore, links should be added between the parent requirement, L2-PRD-831 and the two children requirements, L3-SFS-205 and L3-SFS-841. Referenced Requirements: [L2-PRD-831] Allocation: The Spacecraft System shall remain receptive to commands at all times during the mission. [L3-SFS-205] The Spacecraft shall be configured to receive command data at all times. [L3-SFS-841] The Flight Software shall be configure to receive uplink data at any time following processor initialization",9/7/04ProjectA - TIM - 1287,ProjectA L3 SC&FSRD Rqt: L3-SFS-732 is Inconsistent with L2-FGI-312,4,"The FGICD requirement L2-FGI-312, from which L3-SFS-732 flows down, does not specify any Flight Software functions. L2-FGI-312 is stated thus: "" MOS shall operate the Reaction Control Subsystem (RCS) as required for the Flight System to complete the baseline mission"". Therefore, L3-SFS-732 should be removed from the Flight Software section and be inserted in section 6 which is the RCS section. The ""Flight Software"" phrase in the requirement should be changed to match the FGICD. Referenced Requirements: [L3-SFS-732] The Flight Software shall support operation of the Reaction Control Subsystem (RCS) as required for the Flight System to complete the baseline mission.",9/7/04ProjectA - TIM - 1286,ProjectA L3 SC&FSRD Rqt: L3-SFS-724 is Inconsistent with L2-PRD-756.,4,"The phrase ""during cruise phases"" should be inserted here in L3-SFS-724 as it is in L2-PRD-756. Also, the word ""support"" should be deleted. Referenced Requirement: [L3-SFS-724] The Flight Software shall support control the UTC-relative execution time of a Flight System event to within 5 minutes.",9/7/04ProjectA - TIM - 1285,ProjectA L3 SC&FSRD Rqt: L3-SFS-705 is Inconsistent with L2-PRD-215.,4,"Currently, L3-SFS-705 is linked to L2-PRD-215. L2-PRD-215 requires a pointing knowledge accuracy of 1 mrad per axis; whereas, L3-SFS-705 only provides a pointing knowledge accuracy of 1.5 mrad per axis making the parent L2 requirement stricter than the child L3 requirement. Recommend determining the actual pointing knowledge accuracy required to accomplish mission and updating both requirements accordingly. Referenced Requirements: [L3-SFS-705] The Flight Software shall include the following ancillary engineering data in its telemetry: Flight System pointing knowledge, accurate to 1.5 mrad (3 sigma), recorded at least once per second [L2-PRD-215] Allocation: The Flight System shall include the following ancillary engineering data in its telemetry: Spacecraft pointing knowledge (i.e. the estimated orientation of the spacecraft reference frame), accurate to 1 mrad per axis (3 sigma, zero-to-peak), recorded at least once per second",9/7/04ProjectA - TIM - 1284,ProjectA L2 PRD Rqt: L2-PRD-565 is missing flowdown to the L3 SC&FSRD,4,"L2-PRD-565 has not been flowed down to the L3 SC&FS RD. Recommend adding requirement(s) to L3 SC&FS RD Section 10.11, ""Onboard Ephemeris"" to address this functionality. Referenced Requirement: [L2-PRD-565] Allocation: The Spacecraft System shall be able to accept thrust profiles that are uplinked outside of the backbone sequence.",9/7/04ProjectA - TIM - 1279,ProjectA Spacecraft and Flight System Req L3-SFS-94: has no associated L4 traces,3,"ProjectA Spacecraft and Flight System Req L3-SFS-94: has no accociated L4 traces. Requirement L3-SFS-94 states: ""The spacecraft shall provide a capability to derive the spacecraft attitude quaternion during applicable mission phases.""",8/27/04ProjectA - TIM - 1278,L3-SFS-2427: Incomplete attitude determination accuracy requirement,4,"In Requirement L3-SFS-2427, the attitude determination error for target pointing and delta V modes without IRUs is specified. However, the attitude determination error for target pointing with IRUs is not specified. Section 3.1.3.3 Target Pointing Mode in the ACS Performance Spec (S912-PF4610 Revision B) indicates that the IRUs are used in target pointing mode to provide the attitude and rate reference. A requirement should be added to specify the attitude determination error for target pointing with IRUs. Referenced Requirement: [L3-SFS-2427] The attitude determination error allocations are as follows: science mode, RWA, 2 IRUs: 0.100 mrad target pointing mode, RWA, no IRUs: 0.250 mrad target pointing mode, RCS, no IRUs: 0.450 mrad delta V mode, no IRUs: 0.450 mrad",8/26/04ProjectA - TIM - 1277,Unclear attitude determination accuracy requirement,4,"The Requirement L3-SFS-2427 specifies attitude determination performance for different modes. L3-SFS-2425 specifies high frequency spatial errors for Star Tracker. For science mode, the attitude determination error 0.100 mrad and Star Tracker high frequency spatial error 0.075 mrad meet the 0.13 mrad Pointing Knowledge budget allocation for the ACS specified in the requirements L3-SFS-1984, L3-SFS-2054, and L3-SFS-2377. However, it is unclear how the attitude determination error 0.450 mrad for target pointing and delta V modes is derived. Referenced Requirements: [L3-SFS-2427] The attitude determination error allocations are as follows: science mode, RWA, 2 IRUs: 0.100 mrad target pointing mode, RWA, no IRUs: 0.250 mrad target pointing mode, RCS, no IRUs: 0.450 mrad delta V mode, no IRUs: 0.450 mrad [L3-SFS-2425] The star tracker error allocations are as follows: internal alignment knowledge(1): 0.100 mrad slow dynamic(2): 0.150 mrad high-frequency spatial(3): 0.075 mrad 1) Includes error in measuring the boresight alignment relative to the unit alignment cube as well as any shifts in alignment that occur during S/C integration and test, launch, and post-launch operations. 2) Includes low-frequency, velocity aberration correction, and star catalog errors 3) Includes centroiding errors [L3-SFS-2054] The VIR Pointing Knowledge budget shall be sub-allocated to the ACS and Mechanical subsystems, as shown in the table below. All errors are in mrad and are defined as 3 sigma, per axis, and zero to peak. Subsystem Static/Quasi-Static Slow Dynamic Fast Dynamic ACS n/a 0.15 0.13 Mechanical n/a 0.50 n/a Note that there are no Static or Quasi-static allocations shown as they are to be calibrated out by the VIR team. The ACS static/Quasi-Static allocations shall include the Star Tracker internal misalignments. The ACS Slow Dynamic allocation shall include Star Tracker low frequency, velocity aberration, and star catalog errors. The ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors and attitude determination errors. The Mechanical allocations shall include all alignment errors and uncertainties affecting the VIR to Star Tracker alignment and the IRU to Star Tracker alignment.",8/26/04ProjectA - TIM - 1276,Unclear attitude control tolerance requirement,4,"The attitude controller tolerance specified in the requirement L3-SFS-2429 is 0.200 mrad for science mode and target pointing mode with RWA. The number can be derived by using the pointing accuracy 0.25 mrad in the requirement L3-SFS-2052 and the pointing knowledge 0.15 mrad in the requirement L3-SFS-2051. However, it is unclear how the attitude controller tolerance 1.780 mrad for target pointing mode with RCS is derived. Referenced Requirements: [L3-SFS-2429] The attitude controller tolerance(1) allocations are as follows: science mode: 0.200 mrad target pointing mode, RWA: 0.200 mrad target pointing mode, RCS: 1.780 mrad delta V mode - X' and Y'(2): 6.000 mrad delta V mode - Z'(3): 94.250 mrad 1) Does not include attitude determination or momentum unloads. 2) X' and Y' are the axes perpendicular to the thrust vector. 3) Z' is the axis parallel to the thrust vector. [L3-SFS-2051] The Framing Camera Pointing Knowledge budget shall be sub-allocated to the ACS and Mechanical subsystems, as shown in the table below. All errors are in mrad and are defined as 3 sigma, per axis, and zero to peak. Subsystem Static/Quasi-Static Slow Dynamic Fast Dynamic ACS n/a 0.15 0.13 Mechanical n/a 0.35 n/a Note that there are no Static or Quasi-static allocations shown as they are to be calibrated out by the FC team. The ACS static/Quasi-Static allocations shall include the Star Tracker internal misalignments. The ACS Slow Dynamic allocation shall include Star Tracker low frequency, velocity aberration, and star catalog errors. The ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors and attitude determination errors. The Mechanical allocations shall include all alignment errors and uncertainties affecting the Framing Camera to Star Tracker alignment and the IRU to Star Tracker alignment. [L3-SFS-2052] The Framing Camera Pointing Accuracy budget shall be sub-allocated to the ACS and Mechanical subsystems, as shown in the table below. All errors are in mrad and are defined as 3 sigma, per axis, and zero to peak. Subsystem Static/Quasi-Static Slow Dynamic Fast Dynamic ACS 0.10 0.25 0.34 Mechanical 1.48 0.35 n/a The ACS Static/Quasi-Static allocations shall include the Star Tracker internal misalignments. The ACS Slow Dynamic allocation shall include Star Tracker low frequency, velocity aberration, and star catalog errors, as well as attitude control tolerance errors. The ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors, attitude determination errors, and high frequency reaction wheel assembly, data latency, and attitude transient effects. The Mechanical allocations shall include all alignment errors and uncertainties affecting the Framing Camera to Star Tracker alignment and the IRU to Star Tracker alignment.",8/26/04ProjectA - TIM - 1275,Inconsistent attitude control tolerance requirement,4,"The attitude controller tolerance specified in the requirement L3-SFS-2429 is 6.000 mrad for X and Y in delta V mode and 94.25 mrad for Z in delta V mode. However, the Engine pointing accuracy requirement in L3-SFS-2057 states that the ACS slow dynamic allocation is 6.00 mrad per axis, which includes Star Tracker low frequency, velocity aberration, and star catalog errors, as well as attitude control tolerance errors. Therefore, the attitude controller tolerance for the delta V mode specified in the requirement L3-SFS-2429 should be less than 6.000 mrad for X, Y, and Z axes. Referenced Requirements: [L3-SFS-2429] The attitude controller tolerance (1) allocations are as follows: science mode: 0.200 mrad target pointing mode, RWA: 0.200 mrad target pointing mode, RCS: 1.780 mrad delta V mode - X' and Y'(2): 6.000 mrad delta V mode - Z'(3): 94.250 mrad 1) Does not include attitude determination or momentum unloads. 2) X' and Y' are the axes perpendicular to the thrust vector. 3) Z' is the axis parallel to the thrust vector. [L3-SFS-2057] The Engine Pointing Accuracy budget shall be sub-allocated to the ACS, Mechanical and Engine subsystems, as shown in the table below. All errors are in mrad and are defined as 3 sigma, per axis, and zero to peak. Subsystem Static/Quasi-Static Slow Dynamic Fast Dynamic ACS n/a 6.00 1.62 Mechanical n/a 6.00 n/a Engine n/a 0.50 n/a Note that there are no Static or Quasi-static allocations shown as they are to be calibrated out by the MDN team The ACS static/Quasi-Static allocations shall include the Star Tracker internal misalignments. The ACS Slow Dynamic allocation shall include Star Tracker low frequency, velocity aberration, and star catalog errors, as well as attitude control tolerance errors. The ACS Fast Dynamic allocation shall include Star Tracker high frequency spatial errors, attitude determination errors, and high frequency reaction wheel assembly, data latency, and attitude transient effects. The Mechanical allocations shall include all alignment errors and uncertainties affecting the Engine thruster interface to Star Tracker alignment and the IRU to Star Tracker alignment. The Engine Slow Dynamic Errors shall include all alignment variations affecting the Engine thruster to Engine thruster interface.",8/26/04ProjectA - TIM - 1274,Invalid L3 SCFSRD Paragraph numbers used in ACS SRS RTM Appendix A,4,"The ACS SRS Requirements Traceability Matrix in Appendix A contains invalid paragraph numbers from the L3 Spacecraft and Flight Systems Requirement Document (SCFSRD). Specifically, the following paragraph numbers listed in the L3 Req # column of the ACS SRS Appendix A are inconsistent with the L3 SCFSRD currently in the DOORS database: 10.11.1.1 Spacecraft Position 10.11.1.2 Solar System Bodies 10.11.1.3 Engine Thrust Vector 10.11.1.4 Target Vector 10.11.2 Ephemeris Uplink 10.11.3 Reference Frame 10.11.4 Reference Epoch 10.11.5 Spacecraft State 10.11.6 Solar System Body State 10.11.7 Ephemeris Tables 10.11.8 Ephemeris Table Contents 10.11.9 Uplink of Ephemeris Information (PRD 9.1.6.3) 10.11.10 Pointing to Stored Body Ephemeris (PRD 9.1.6.4) 10.11.11 Engine Thruster Pointing Commands The use of invalid paragraph numbers affects the accuracy of the ACS SRS RTM, because paragraph numbers 10.11.2 - 10.11.11 are valid paragraphs in the current SCFSRD; however the requirements associated with these paragraph numbers are not the same as what is shown in the ACS SRS RTM.",8/6/04ProjectA - TIM - 1273,Inconsistent slew capability requirement,4,"Inconsistent slew capability requirements for use of RWAs. The slew capability requirement in the ACS Performance Spec (S912-PF4610 Revision B) on page 29 states that an average slew rate of 5.24 milli-rads / second shall be achievable using thrusters. However, the slew capability requirement in L3-SFS-2116 in the Level 3 Spacecraft and Flight System Requirements (SCFSRD, S912-Gr 3400, JPL-D-25870), (6/7/04 DOORS version) states that the “ACS shall be able to rotate about any axis at an average rate of up to 0.3 deg/sec. The ACS shall be able to achieve this using the RWAs or the RCS.” The use of RWAs is not included in the ACS Performance Spec.",8/5/04ProjectA - TIM - 1272,Inconsistent attitude control accuracy requirement,4,"The attitude control accuracy for RCS, TVC, and momentum control as specified in the ACS Performance Specification does not match the number provided in the Level 3 Spacecraft and Flight System Requirements (SCFSRD, S912-Gr 3400, JPL-D-25870), (7/15/04 DOORS version). The attitude control accuracy requirement for RCS Control in the ACS Performance Spec (S912-PF4610 Revision B) on page 26 states that in Delta-V mode, RCS submode, the thruster controller shall have a control accuracy of 6.0 milli-rads 3-sigma per lateral axis and 100 milli-rads 3-sigma about the thrust axis. The attitude control accuracy requirement for TVC in the ACS Performance Spec (S912-PF4610 Revision B) on page 27 states that during Engine burns control accuracy about the thrust axis using either RWAs or thrusters as the actuators shall be 100 milli-rads 3-sigma. The attitude control accuracy requirement for Momentum Control in the ACS Performance Spec (S912-PF4610 Revision B) on page 28 states that while unloading momentum the ACS shall maintain a pointing accuracy of 1.75 milli-rads 3-sigma per axis while in Target Pointing mode, and 100 milli-rads 3-sigma about the thrust axis while in Delta-V mode, Engine submode. However, the attitude control tolerance requirement L3-SFS-2429 in the SCFSRD shows that the control tolerance about the thrust axis is 94.25 mrad. 100 mrad should be replaced by a number less than or equal to 94.25 mrad.",8/5/04ProjectA - TIM - 1271,Inconsistent attitude determination accuracy requirement,4,"The attitude determination accuracy does not match the number in the Level 3 Spacecraft and Flight System Requirements (SCFSRD, S912-Gr 3400, JPL-D-25870), (7/15/04 DOORS version). The attitude determination accuracy requirement in the ACS Performance Spec (S912-PF4610 Revision B) on page 22 states that the attitude determination accuracy, i.e., the algorithmic performance, shall be 0.10 milli-rad 3-sigma per axis when gyros are available and 0.75 milli-rad 3-sigma per axis when gyros are not available. However, the attitude determination performance requirement L3-SFS-2427 in the SCFSRD shows that the error is 0.450 mrad for target pointing and delta V modes without IRUs. The 0.75 mrad specification should be replaced by a number less than or equal to 0.45 mrad.",8/5/04ProjectA - TIM - 1270,UPL HLP Command Set Not Consistently Defined,3,"The HLP command definitions in the UPL Card SRS, Section OV4-UPC007, do not accord with those identified in the FP Performance Specification, Tables 4-1 and 4-2. For example both references identify the ACE Safehold On HLP command but the SRS contains commands (e.g., ACE LVPS Power Control A-On / B-Off) that are not found in the FP Performance Specification. It is unclear which document contains the correct and complete set of HLP commands.",7/12/04ProjectA - TIM - 1269,ProjectA OBC SuROM Req SU017: The exact intent of the requirement is ambiguous,4,"ProjectA OBC SuROM Flight Firmware Requirements Specification - Requirement SU017 states: ""The Flight Software exception log shall fill each entry until it reaches the last entry (23); all subsequent entries are written in the same location."" It is not clear as to what is meant by "" all subsequent entries are written in the same location"". IV&V suggests providing details of the statement ""subsequent entries are written in the same location"". The exact intent of this requirement is ambiguous in that it is not clear whether or not all entries in the exception log are overwritten after the last entry is filled or just the last entry is overwritten.",7/7/04ProjectA - TIM - 1268,ProjectA OBC SuROM Req SU022: The various Boot Descriptor copies are not defined.,4,"ProjectA OBC SuROM Flight Firmware Requirements Specification - Requirement SU022 states: ""Flight Software Startup shall continuously cycle through the various Boot Descriptor copies until a successful boot is accomplished."" Requirement SU022 is incomplete. The term ""various Boot Descriptor"" does not provide enough detail. All of the Boot Descriptor copies should be identified.",7/7/04ProjectA - TIM - 1267,ProjectA OBC SuROM Req SU004: What Flight Software Startup shall load is not defined.,4,"ProjectA OBC SuROM Flight Firmware Requirements Specification - Requirement SU004 states: ""Depending on the value of externally driven discrete inputs, Flight Software Startup shall load the Boot Loader, Operating System, and/or Flight Software images into the SRAM."" The ""and/or"" adds a level of confusion to the requirement. There can be multiple interpretations. It is not clear if the Boot Loader, Operating System, and Flight Software images can all be loaded at the same time, independently, or in what combination. Requirement SU004 should be rewritten to state what combinations are acceptable to be loaded into the SRAM.",7/7/04ProjectA - TIM - 1261,C&DH SRS Rqt: OS017 missing OS-specific responsibility relative to the FSW exception log,4,Issue: OS017 and SU017 are the same requirement. OS017 should specify the OS-specific responsibility relative to the Flight Software exception log. Referenced Requirements: Referenced C&DH SRS Requirement: [OS017] The Flight Software exception log shall fill each entry until it reaches the last entry (23); all subsequent entries are written in the same location. SuROM SRS Requirement: [SU017] The Flight Software exception log shall fill each entry until it reaches the last entry (23); all subsequent entries are written in the same location.,7/7/04ProjectA - TIM - 1259,C&DH SRS Rqt: OS013 and its subrequirements missing OS-specific responsibility,4,"Issue: OS013 and its sub-requirements OS013.1, OS013.2, OS013.3, OS013.4, OS013.5, OS013.6, OS013.7, OS013.8, OS013.9, and OS013.10 were the same as SU013 and its sub-requirements in Rev. A of the respective SRSs. SU013 and its sub-requirements have been updated, while OS013 remains unchanged in Rev. B of the respective SRSs. The updates to SU013 and its sub-requirements imply that SuROM is responsible for trapping processor interrupts and making an exception log entry, but is no longer responsible for providing any additional response. In addition to providing the same functionality as SuROM, OS013 and its sub-requirements still indicate that the OS is responsible for responding to each type of interrupt with a specific action. The specific responsibilities of the OS FSW tasks should be defined by OS013 and its subrequirements for the redundant aspects of the previously referenced set of requirements in order to clearly delineate the responsibilities for each task. If this detail is provided elsewhere, OS013 should be updated with the appropriate reference. Referenced Requirements: C&DH SRS Requirements: [OS013] Flight Software shall trap processor interrupts, make an Exception Log entry, and respond according to the following Exception/Required Action Tables: [OS013.1] System Reset Interrupt COLD_RESTART [OS013.2] Machine Check Interrupt Suspend Offending Task [OS013.3] Data Storage Interrupt Suspend Offending Task [OS013.4] Instruction Storage Interrupt Suspend Offending Task [OS013.5] External Interrupt INTERRUPT SERVICE [OS013.6] Alignment Interrupt Suspend Offending Task [OS013.7] Program Interrupt Suspend Offending Task [OS013.8] Floating-Point Unavailable Intrpt Suspend Offending Task [OS013.9] Supervisor Call Interrupt Restart as Cold Boot [OS013.10] Floating-Point Exception Intrpt Currently Masked? SuROM SRS Requirements: [SU013] Flight Software shall trap the processor interrupts and make an Exception Log entry: [SU013.1] System Reset Interrupt [SU013.2] Machine Check Interrupt [SU013.3] Data Storage Interrupt [SU013.4] Instruction Storage Interrupt [SU013.5] External Interrupt [SU013.6] Alignment Interrupt [SU013.7] Program Interrupt [SU013.8] Floating-Point Unavailable Interrupt [SU013.9] Supervisor Call Interrupt [SU013.10] Floating-Point Exception Interrupt Currently Masked",7/7/04ProjectA - TIM - 1257,C&DH SRS Rqt: OS006 missing maximum number of FSW images,4,"Issue: OS006 seems incomplete as written. The requirement implies that multiple copies of the flight software image exist, but the SRS never indicates the allowable number of images. Note: OS006 is similar to SU006. Referenced C&DH SRS Requirement: [OS006] For the Operating System, Flight Software startup procedures shall select for loading, the first copy of this image that completes verification without error.",7/7/04ProjectA - TIM - 1256,ProjectA OBC C&DH Req HS001: The number of times the health monitoring function shall request data is not defined.,4,"ProjectA OBC C&DH Flight Software Requirements Specification - Requirement HS001 states: ""Flight Software associated with the software health monitoring function shall periodically request and collect software execution status and housekeeping data from a predetermined list of Flight Software components."" Requirement HS001 is incomplete. The term ""periodically"" does not provide enough detail. The actual number of times the health monitoring function shall request and collect software execution status and housekeeping data from a predetermined list of Flight Software components should be specified.",7/7/04ProjectA - TIM - 1254,SuROM SRS Rqt: SU104 missing SuROM-specific responsibility,4,"Issue: SU104 and DI004 are the same requirement. SU0104 should specify the specific Hardware Diagnostics tests reported by the SuROM module, especially if this is considered a mission requirement. Referenced Requirements: SuROM SRS Requirement: [SU104] The results of the Hardware Diagnostics tests conducted during nominal operations shall be inserted into the designated portion of telemetry streams. C&DH SRS Requirement: [DI004] The results of the Hardware Diagnostics tests conducted during nominal operations shall be inserted into the designated portion of telemetry streams.",7/7/04ProjectA - TIM - 1253,SuROM SRS Rqt: SU0103 missing SuROM-specific responsibility,4,"Issue: SU0103 and DI003 are the same requirement. SU0103 should specify the storage of the Hardware Diagnostics test results relative to the SuROM module, especially if this is considered a mission requirement. Referenced Requirements: SuROM SRS Requirement: [SU103] The results of Hardware Diagnostics tests conducted during start-up shall be stored in fixed memory locations that will not be modified by processor resets. C&DH SRS Requirement: [DI003] The results of Hardware Diagnostics tests conducted during start-up shall be stored in fixed memory locations that will not be modified by processor resets",7/7/04ProjectA - TIM - 1252,"SuROM SRS Rqt: SU019 missing SuROM responsibility relative to ""machine error interrupt services""",4,"Issue: SU019 and OS019 are the same requirement. SU019 should specify the SuROM-specific ""machine error interrupt services."" Referenced Requirements: [SU019] Machine error interrupt services shall leave the processor in a known repeatable state. No service routine will be designed to skip command execution. [OS019] All machine error interrupt services shall leave the processor in a known repeatable state. No service routine will be designed to skip command execution.",7/7/04ProjectA - TIM - 1251,SuROM SRS Rqt: SU018 and its subrequirements missing SuROM-specific responsibility,4,"Issue: SU018, and its subrequirement SU018.1 are the same as OS018 and its subrequirement. SU018 and its subrequirement should specify the SuROM-specific responsibilities for satisfying this requirement. Referenced Requirements: [SU018] If sufficient RAD6000 and LIO processing resources are operable, restart operations shall progress to completion in SuROM Diagnostic (Monitor) Mode or Normal Mode. [SU018.1] Unless physically unavoidable, errors detected during startup processes shall not cause the restart processes to terminate before reaching their commanded termination location. [OS018] If sufficient RAD-6000 and LIO processing resources are operable, restart operations shall progress to completion in SuROM Diagnostic (Monitor) Mode or Normal Mode. [OS018.1] Unless physically unavoidable, errors detected during startup processes shall not cause the restart processes to terminate before reaching their commanded termination location.",7/7/04ProjectA - TIM - 1250,SuROM SRS Rqt: SU017 missing SuROM responsibility relative to the FSW exception log,4,Issue: SU017 and OS017 are the same requirement. SU017 should specify the SuROM-specific responsibility relative to the Flight Software exception log. Referenced Requirements: SuROM SRS Requirement: [SU017] The Flight Software exception log shall fill each entry until it reaches the last entry (23); all subsequent entries are written in the same location. C&DH SRS Requirement: [OS017] The Flight Software exception log shall fill each entry until it reaches the last entry (23); all subsequent entries are written in the same location.,7/7/04ProjectA - TIM - 1249,"SuROM SRS Rqt: SU016 usage of the phrase ""RAD-6000 processor exception data"" non-determinate",4,"Issue: SU016 and OS016 are the same requirement. SU016 should specify the SuROM-specific ""RAD-6000 processor exception data"" that the SuROM module will store in a log. Referenced Requirements: SuROM SRS Requirement: [SU016] Flight Software shall store RAD6000 processor exception data in a log. C&DH SRS Requirement: [OS016] Flight Software shall store RAD-6000 processor exception data in a log.",7/7/04ProjectA - TIM - 1248,SuROM SRS Rqt: SU013 missing SuROM responsibility relative to the FSW exception log,4,"Issue: SU013 and its sub-requirements SU013.1, SU013.2, SU013.3, SU013.4, SU013.5, SU013.6, SU013.7, SU013.8, SU013.9, and SU013.10 were the same as OS013 and its sub-requirements in Rev. A of the respective SRSs. SU013 and its sub-requirements have been updated, while OS013 remains unchanged in Rev. B of the respective SRSs. The updates to SU013 and its sub-requirements imply that SuROM is responsible for trapping processor interrupts and making an exception log entry, but is no longer responsible for providing any additional response. In addition to providing the same functionality as SuROM, OS013 and its sub-requirements still indicate that the OS is responsible for responding to each type of interrupt with a specific action. The specific responsibilities of the SuROM FSW task should be defined by SU013 and its subrequirements for the redundant aspects of the previously referenced set of requirements in order to clearly delineate the responsibilities for each task. If this detail is provided elsewhere, the parent requirements should be updated with the appropriate reference. Referenced Requirements: SuROM SRS Requirements: [SU013] Flight Software shall trap the processor interrupts and make an Exception Log entry: [SU013.1] System Reset Interrupt [SU013.2] Machine Check Interrupt [SU013.3] Data Storage Interrupt [SU013.4] Instruction Storage Interrupt [SU013.5] External Interrupt [SU013.6] Alignment Interrupt [SU013.7] Program Interrupt [SU013.8] Floating-Point Unavailable Interrupt [SU013.9] Supervisor Call Interrupt [SU013.10] Floating-Point Exception Interrupt Currently Masked OBC C&DH SRS Requirements: [OS013] Flight Software shall trap processor interrupts, make an Exception Log entry, and respond according to the following Exception/Required Action Tables: [OS013.1] System Reset Interrupt COLD_RESTART [OS013.2] Machine Check Interrupt Suspend Offending Task [OS013.3] Data Storage Interrupt Suspend Offending Task [OS013.4] Instruction Storage Interrupt Suspend Offending Task [OS013.5] External Interrupt INTERRUPT SERVICE [OS013.6] Alignment Interrupt Suspend Offending Task [OS013.7] Program Interrupt Suspend Offending Task [OS013.8] Floating-Point Unavailable Intrpt Suspend Offending Task [OS013.9] Supervisor Call Interrupt Restart as Cold Boot [OS013.10] Floating-Point Exception Intrpt Currently Masked?",7/7/04ProjectA - TIM - 1247,SuROM SRS Rqt: SU006 missing maximum number of number of boot loader images,4,"SU006 seems incomplete as written. The requirement implies that multiple copies of the boot loader image exist, but the SRS never indicates the allowable number of images. Note: SU006 is similar to OS006 . Referenced SuROM SRS Requirement: [SU006] For the Boot Loader from remote EEPROM, Flight Software startup procedures shall select for loading the first copy of the Boot Loader image that completes verification without error.",7/7/04ProjectA - TIM - 1246,"SuROM SRS Rqt: SU002 usage of the phrase ""known state"" non-determinate",4,"Issue: SU002 contains the phrase ""known state,"" which does not seem to provide sufficient detail to support implementation. This requirement should specify the specific hardware components and initialization states following a restart/reset relative to the SuROM's responsibilities. Also, since C&DH requirement OS002 is identical to SU002, additional detail should be added to delineate these two requirements. Referenced Requirements: SuROM SRS Requirement: [SU002] Flight Software shall reset/restart and initialize all Flight Computer hardware components on the processor board to a known state. C&DH SRS Requirement: [OS002] Flight Software shall reset/restart and initialize all Flight Computer hardware components on the processor board to a known state.",7/7/04ProjectA - TIM - 1245,ProjectA OBC C&DH Req SM036: The number of memory locations is not defined.,4,"ProjectA OBC C&DH Flight Software Requirements Specification - Requirement SM036 states: ""Flight Software shall accept and execute a Dump Memory in Event command, that returns in an event message the data resident in a limited number of memory locations."" Requirement SM036 is incomplete. ""limited number of memory locations"" does not provide enough detail. The range or actual number of memory locations should be specified.",7/7/04ProjectA - TIM - 1242,ProjectA OBC C&DH Req DS012: Applicable function to which the 1553 slot is allocated is not defined.,4,"ProjectA OBC C&DH Flight Software Requirements Specification - Requirement DS012 states: ""The OBC-C&DH software shall accept and execute a STOP_RECORDER_PLAYBACK command, which aborts the playback and/or retransmissions of the specified Virtual Recorders. Note that this command performs different functions when the Virtual Recorder is in CONTINUOUS_PLAYBACK mode."" The term ""different functions"" needs to be specified. A requirement is missing. A requirement should be written to specify the exception case for executing the STOP_RECORDER_PLAYBACK command to ensure that the different functionality is implemented and tested.",7/6/04ProjectA - TIM - 1241,ProjectA OBC C&DH Req TO014 is redundant with DS025,4,"ProjectA OBC C&DH Flight Software Requirements Specification - Requirement TO014 is redundant with DS025. Both requirements state the following: ""The OBC-C&DH software shall accept and execute a SWAP_FILTER factor command, which will swap filter factors for the 2 specified application id's for the filter table currently in use."" The requirement does not define what specific functionality is required to be implemented in the Telemetry Output and Data Storage components of the FSW to support acceptance and execution of a SWAP_FILTER factor command.",7/6/04ProjectA - TIM - 1240,ProjectA OBC C&DH Req TC002: Applicable function to which the 1553 slot is allocated is not defined.,4,"ProjectA OBC C&DH Flight Software Requirements Specification - Requirement TC002 states: ""Flight Software shall send the time of the next 1 Hz pulse to the Framing Camera/Mapping Spectrometer instrument via the 1553 bus, prior to the 1553 slot allocated to this function (currently at 0 milliseconds)."" Requirement TC002 is incomplete. The term ""this function "" does not refer to the specific function. The requirement is not complete as written,Requirement TC002 should identifying the applicable function to which the 1553 slot is allocated.",7/6/04ProjectA - TIM - 1238,ProjectA OBC C&DH Req S3009: Read frequency maximum value that avoids FIFO overflow is not defined.,4,"ProjectA OBC C&DH Flight Software Requirements Specification - Requirement S3009 states: ""S3 task shall read Gamma Ray and Neutron Detector (GRAND) telemetry, MUC GRAND TLM FIFO, with a read frequency that avoids FIFO overflow."" The requirement is not complete as written, because the actual read frequency maximum value that avoids FIFO overflow is not defined.",7/6/04ProjectA - TIM - 1234,ProjectA OBC C&DH Req OS017: The exact intent of the requirement is ambiguous,4,"ProjectA OBC C&DH Flight Software Requirements Specification - Requirement OS017 states: ""The Flight Software exception log shall fill each entry until it reaches the last entry (23); all subsequent entries are written in the same location."" It is not clear as to what is meant by "" all subsequent entries are written in the same location"". IV&V suggests providing details of the statement ""subsequent entries are written in the same location"". The exact intent of this requirement is ambiguous in that it is not clear whether or not all entries in the exception log are overwritten after the last entry is filled or just the last entry is overwritten.",7/6/04ProjectA - TIM - 1232,ProjectA OBC C&DH Req OS006: Intended Image to be selected for loading is not specified,4,"ProjectA OBC C&DH Flight Software Requirements Specification - Requirement OS006 states: ""For the Operating System, Flight Software startup procedures shall select for loading, the first copy of this image that completes verification without error."" Requirement OS006 does not define the Intended Image to be selected for loading. ""this image"" does not specify the actual intended image to be selected for loading.",7/6/04ProjectA - TIM - 1231,Dump Memory in Event command in C&DH SRS should give same details as in FSW CDR,5,"Requirement SM036 in the C&DH SRS states: ""Flight Software shall accept and execute a Dump Memory in Event command, that returns in an event message the data resident in a limited number of memory locations"". According to the FSW CDR package, 16 bytes of data are placed in the event message represented as ASCII characters. This fact can now be placed in the requirement above in place of the limited number of memory locations that it states.",7/6/04ProjectA - TIM - 1230,Incomplete OBC C&DH and Uplink Card SRS Requirements for Fault Protection,2,"The ProjectA FP Requirements where provided in an Excel sheet containing updated FP requirements in May 2004. This Excel sheet seems to provide new/updated FP requirements for OBC C&DH and Uplink Card SRSs. Some of these requirements are repeats of existing SRS requirements and others are new requirements. The majority of the changes are directed at the Uplink Card SRS. Apparently, Orbital intends to place these requirements in the CM system; however, it is unclear if the SRSs will be updated. At the present time software FP related requirements are not complete in the OBC C&DH and Uplink Card SRSs. Reference #3 contains FP requirements. In addition, there are implied FP requirements stated in the briefing charts from the FP CDR, the FSW CDR and the Project CDR. For example, an important function, autonomous redundancy management, is discussed in the Project CDR (FP section)but this subject does not appear in any of the Revision B SRSs.",7/5/04ProjectA - TIM - 1228,The Load Memory command in SRS not described as in FSW CDR,3,"Requirement SM002 in the OBC C&DH SRS states: ""Flight Software shall accept and execute a Load Memory command to load SRAM, DRAM, EEPROM, and Working Buffer Flight Computer memory locations"". This requirement is in partial conflict with the FSW CDR package of 5/26/04. According to the CDR material on page 336, the Load Memory command loads only SRAM directly. In order to load DRAM, the Transfer Memory command should be used after SRAM is first loaded. Also, in order to load EEPROM, the Write EEPROM command should be used instead of Load Memory.",7/2/04ProjectA - TIM - 1227,C&DH SRS must state how a Virtual Recorder is specified,3,"Requirement DS011 in the OBC C&DH states: ""The OBC-C&DH software shall accept and execute a START_RECORDER_PLAYBACK command which starts an initial playback of the specified DATASET for the specified Virtual Recorder"". It is not stated in this requirement or in any of the preceding requirements as to how a particular Virtual Recorder is to be specified. The CLOSE_DATASET command identifies a particular dataset in a particular Virtual Recorder but there is no indication of how that Virtual Recorder is to be specified. These same comments also apply to DS010 and DS010.2",7/2/04ProjectA - TIM - 1222,The Virtual Recorder mechanism should be defined in C&DH SRS,4,"Requirement DS027 in the OBC C&DH SRS states: ""The OBC-C&DH software shall implement TBD Virtual Recorders in DRAM"". It should be explained in the requirement what function the Virtual Recorder performs and how it relates to a VCDU. The VCDU, or virtual channel data unit, apparently is the reformatting of telemetry data into groups that belong to a channel which is defined by the software. The Virtual Recorder is assumed to record these VCDUs in some fashion which should be explained in the requirement above.",7/1/04ProjectA - TIM - 1221,L3 to L4 FP - Incomplete SRS Requirements for Storing Exception Logs,3,"L3-SFS-992, Section 11.5.25: The Spacecraft shall store an exception log detailing software processing status in the event of a run-time error causing the flight computer to reset. Traced to: ProjectA, S912-SRS4920 - OBC C&DH, 5.7.1.2, Exceptions ProjectA, S912-SRS4921 - OBC SuROM, 5.7.2, Exceptions Issue: The two linked SRS sections state the requirement for logging exception data; however, the specific data is not defined. One would expect that similar requirements would be found in the UPL Card SRS and in the ACE and Uplink BootROM SRS, they are not.",7/1/04ProjectA - TIM - 1220,Incomplete SRS Requirements for Uplink Card to Store a Log of Hi/Low Water Marks,4,"L3.11.5.22. The Spacecraft FP shall store a log of hi/low water marks for data being monitored which can be downlinked in real time telemetry. ProjectA, S912-SRS4920 - OBC C&DH, 5.7.11.1, Telemetry and Statistics Monitoring ProjectA, S912-SRS4420 - Uplink Card, 5.7.9.3, Telemetry and Statistics Monitoring Issue: UPL Card SRS 5.7.9.3 contains numerous sub-requirements, none of which address the L3 requirement.",7/1/04ProjectA - TIM - 1219,"Incomplete SRS Requirements for Rejecting Iinvalid Commands, and Terminating Sequences",3,"L3-SFS-987, Section 11.5.20: The Spacecraft shall reject all invalid commands, and shall terminate any sequence that issues an invalid command. Definition: An invalid command is defined as being a command checksum failure, other aspects will be covered by the ground system Traced to: ProjectA, S912-SRS4920 - OBC C&DH, 5.7.7.1, Relative Time Sequences ProjectA, S912-SRS4970 - VML, 5.7.4, VM004 – VM Task Command Requirements Issue: VM004 contains three sub-requirements, none of which address the L3 requirement. This L3 should be linked to the UPL card SRS also.",6/30/04ProjectA - TIM - 1218,Incomplete SRS Requirements for Monitored Telemetry Stored in DRAM,3,"L3.11.5.19. The Spacecraft FP monitored telemetry shall be stored in spacecraft mass memory (DRAM) for later transmition. ProjectA, S912-SRS4920 - OBC C&DH, 5.7.8.2, Data Storage Issue: The linked OBC C&DH section contains numerous sub-requirements, none of which address the storage of FP monitored telemetry in DRAM.",6/30/04ProjectA - TIM - 1217,The playback of recorded data not fully explained in C&DH SRS,4,"In the C&DH SRS, requirement DS009 states: ""Commands to start a playback shall distinguish between playback and retransmit"". Apparently, playback is the first transmission of recorded data as opposed to retransmit. This explanation should be inserted in the requirement to remove the confusion over the meaning of playback. Thus, DS009 should be restated as: ""Commands to start a playback, which is the first transmission of recorded telemetry data, shall distinguish between playback and retransmit"".",6/30/04ProjectA - TIM - 1216,Incomplete SRS Requirements for Generating Event Messages,3,"L3-SFS-979, Section 11.5.12: Spacecraft FP shall generate messages for every significant event observed (by UL or OBC monitors) and for every subsequent response. The message shall include at a minimum the monitor id, threshold, and monitor value. Traced to: ProjectA, S912-SRS4920 - OBC C&DH, 5.7.11.1, Telemetry and Statistics Monitoring ProjectA, S912-SRS4420 - Uplink Card, 5.7.9.3, Telemetry and Statistics Monitoring Issue: The linked SRS sections contain numerous sub-requirements. The L3 requires at least three message components; the linked SRSs do not address them completely. The SRSs do not identify the totality of the event messages to be generated or their contents.",6/30/04ProjectA - TIM - 1215,Incomplete SRS Requirements for Accommodating Processor Resets During Mission-Critical Events,3,"L3.11.5.7. The Spacecraft FSW shall be designed to accommodate processor resets during mission-critical events, such as launch and solar array deployments. ProjectA, S912-SRS4420 - Uplink Card, 5.7.9.1, Redundant Uplink Card Communications ProjectA, S912-SRS4420 - Uplink Card, 5.7.9.3, Telemetry and Statistics Monitoring ProjectA, S912-SRS4420 - Uplink Card, 5.7.9.4, Relative Time Sequences Issue: The linked UPL Card sections contain numerous sub-requirements, none of which specifically address the intent of the L3 requirement.",6/30/04ProjectA - TIM - 1214,Incomplete SRS Requirements for Range Checking to Detect Failed or Corrupted Sensor Data,3,"L3.11.5.6. The Spacecraft FP shall perform range checking to detect failed or corrupted sensor data where redundant sensors are used. ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.1, Fault Detection, Isolation, and Recovery (FDIR) The linked OBC ACS section contains numerous sub-requirements, none of which address the intent of the L3 requirement.",6/30/04ProjectA - TIM - 1213,Incomplete SRS Requirements for Memory Scrub at a Ground Selectable Rate,3,"L3.11.5.5. The Spacecraft shall perform memory scrub of static memory at a ground selectable rate, to detect and correct single bit flEngine. ProjectA, S912-SRS4920 - OBC C&DH, 5.7.11.3, Memory Scrub The linked SRS section contains numerous sub-requirements, none of which state the requirement to “scrub at a ground selectable rate”.",6/30/04ProjectA - TIM - 1211,Telemetry filter parameters not defined in C&DH SRS,3,"Requirement TO007 states: ""The OBC-C&DH software shall provide the capability to filter telemetry data (by Application-ID) based on packet sequence number. If X is zero, the packet will not be stored. If X is greater than zero, the packet will be recorded if and only if the Sequence Number of the packet modulo X is less than N"". In this statement N and X are not being defined. The sequence number can be confused with N but, apparently, they are different since the sequence number modulo X is being compared to N. According to the Flight Software CDR of May 26, 2004, these parameters come from a filter table, a fact which should be stated in the requirement above. Also, the CDR states that there are three parameters, not two as it is stated in the requirement. The three parameters are N, X and O and these should be stated and defined in the requirement also. Another check should be made on the exact algorithm that is being employed. The FSW CDR describes the algorithm as ""first N out of X packets starting at offset O"". This may not match the description in the requirement above which states that the ""Sequence Number of the packet modulo X"" is to be less than N. Requirement TO008 should likewise be corrected with whatever algorithm and parameters are appropriate for that requirement. Also, requirements DS005 and DS006 deserve similar comments because they are analogous to TO007 and TO008 for data storage instead of telemetry.",6/30/04ProjectA - TIM - 1210,CM Requirement Missing in RMS Issue: EV005,2,The following requirement is found within the ProjectA OBC C&DH Flight Software Requirements Specification (Rev A and Rev B) but not within RMS: [EV005] Each Event Message shall be available for inclusion in Real-Time Telemetry.,6/30/04ProjectA - TIM - 1209,Incomplete SRS Requirements for Monitors to Handle Temporarily Missing Inputs,3,"L3.11.5.3. The Spacecraft FP monitors shall be designed to tolerate and continue functioning in situations where inputs are temporarily missing and respond accordingly. ProjectA, S912-SRS4920 - OBC C&DH, 5.7.11.1, Telemetry and Statistics Monitoring Issue: The linked OBC C&DH 5.7.11.1 contains numerous sub-requirements. Although they state various requirements for FP monitors, none address the requirement to handle “inputs that are temporarily missing”.",6/30/04ProjectA - TIM - 1208,CM Requirement Missing in RMS Issue: SU210,2,The following requirement is found within the ProjectA OBC SuROM Flight Firmware Requirements Specification (Rev A and Rev B) but not within RMS: [SU210] The SuROM Monitor Mode shall support a command that causes an initialization of SuROM telemetry data.,6/30/04ProjectA - TIM - 1207,CM Requirement Missing in RMS Issue: ACS-AN007,2,"The following requirement is found within the ProjectA OBC ACS Flight Software Requirements Specification (Rev A and Rev B) but not within RMS: [ACS-AN007] AN software shall generate synchronous telemetry to support ground monitoring and analysis of both spacecraft performance and ACS software performance. This telemetry includes, at a minimum: o FDIR Status, o Ephemeris and Thruster telemetry packets sent to AC, o Table management status telemetry o Statistic telemetry.",6/30/04ProjectA - TIM - 1206,CM Requirement Missing in RMS Issue: DWN-UPL203.12,2,The following requirement is found within the ProjectA Uplink Card Software Requirements Specification but not within RMS: [DWN-UPL203] The Uplink FSW shall maintain a status message containing the following parameters: [DWN-UPL203.12] 1553 Status.,6/30/04ProjectA - TIM - 1205,Incomplete SRS Requirements for Modifying ACS Monitor Thresholds & Persistances,4,"L3-SFS-936, Section 11.2.6. All Spacecraft ACS performance and component monitor thresholds and persistances shall be in-flight modifiable via commands or table/parameter loads. Traced to: ProjectA, S912-SRS4920 - OBC C&DH, 5.7.9.3, System Table Operations ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.1, Fault Detection, Isolation, and Recovery (FDIR) Issue: OBC C&DH 5.7.9.3 provides for manipulation of tables; presumably, this will allow modification of thresholds and persistances. However, this reference provides for “generic” type functionality and does not specifically address the ACS monitors. OBC ACS 5.7.1.1 does not address the topic of ""modifying thresholds and persistances"".",6/30/04ProjectA - TIM - 1204,Incomplete SRS Requirements for Providing ACS Health & Status,4,"L3.11.2.3 The spacecraft shall provide health status on all ACS components when active. ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.4, Attitude Control Electronics (ACE) Data ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.5, Star Trackers (STR) Issue: The referenced SRS sections contain numerous sub-requirements, some of which infer the existence of this data, but none specifically state the requirement to “provide health status”.",6/30/04ProjectA - TIM - 1202,Incomplete SRS Requirements for Enabling Monitors,4,"L3. 11.1.44. Spacecraft FP shall autonomously enable all monitors required for critical unit health and safety including after critical unit resets or boot-ups. Critical unit definition: Components that are required to maintain a power/thermal safe environment allowing operator communication (e.g. CEU, ACE, PDU, HVEA, IRU, RCS, TWTA, SDST). ProjectA, S912-SRS4920 - OBC C&DH, 5.7.11.1, Telemetry and Statistics Monitoring Issue: The linked OBC 5.7.11.1 contains numerous sub-requirements, and while it defines “tools” that may be used to implement the L3 requirement, none of the SRS requirements specifically address the intent of the parent L3 (“--- autonomously enable --- after critical unit resets or boot-ups“). Critical units are not defined in the SRS.",6/30/04ProjectA - TIM - 1201,Inconsistency in Requirements/Design for Fail Operational,4,"It is unclear if the L2 requirement is being implemented in the fault protection software requirements/design. Referenced Requirements/Design Specs: [L2-FPR-7] The ProjectA Spacecraft shall fail safe for critical faults and shall have the ability to fail operational for specific non-critical faults. Definition: critical faults are those that may endanger s/c health if not responded to, where that response interrupts normal operations or impairs execution of future (pre-loaded) operational sequences. Slide #3 in the Project CDR, FP Section states: Fault Protection Design Concept Fail safe: no time-critical sequences requiring fail operational (launch is event critical) Slide #6 in the Project CDR, FP Section states: The ProjectA spacecraft shall fail safe for critical faults and have the ability to fail operational for specific non-critical faults. The FP Performance Specification, Section 2.1, states' ""The Flight System is not required to fail operational for most faults"".",6/30/04ProjectA - TIM - 1199,Missing L3 to L4 Traceability Links,2,"The following L3 sections/requirements have no linked SRS requirements/children. These L3 requirements imply a full or partial software implementation. Several of the L3 requirements are ""new for ProjectA"". 11.1.11, 11.1.27, 11.1.28, 11.1.30, 11.1.31, 11.1.33, 11.1.34, 11.1.35, 11.1.36, 11.1.38, 11.1.39, 11.1.40, 11.1.41, 11.1.47. 11.2.4, 11.2.5. 11.3.6. 11.4.3, 11.4.17. 11.5.1, 11.5.17, 11.5.23, 11.5.24. 11.6.3, 11.6.4, 11.6.5. 11.7.5, 11.7.6, 11.7.10, 11.7.13. 11.8.4. 11.9.2.",6/29/04ProjectA - TIM - 1198,Incomplete SRS Requirements for Executing Ground Commands,3,"L3-SFS-922, section 11.1.37. The Spacecraft shall execute any ground commands it receives while FP responses are in progress, and after responses are complete. Traced to: ProjectA, S912-SRS4920 - OBC C&DH, 5.7.7.1, Relative Time Sequences ProjectA, S912-SRS4420 - Uplink Card, 5.7.9.4, Relative Time Sequences Issue: OBC 5.7.7.1 sub-requirement SC011 states, “Flight Software shall execute the requested RTS upon receipt of the real-time command (START_RTS directive) from either the ground or another on-board software application.”. Beyond this statement there is no mention in either reference about “executing ground commands while FP responses are in progress”. The linked SRS references do not fully address the intent of the parent L3. UPL Card SRS 5.7.9.4 contains numerous sub-requirements, none of which seem to specifically address the parent L3.",6/29/04ProjectA - TIM - 1197,CM Requirement Missing in RMS Issue: SU209,2,"The following requirement is found within the ProjectA OBC SuROM Flight Firmware Requirements Specification but not within RMS: Referenced Requirement: [SU209] The SuROM Monitor Mode shall support the ability to ""boot"" the OBC application software from either SRAM or EEPROM.",6/29/04ProjectA - TIM - 1196,CM Requirement Missing in RMS Issue: SU208,2,"The following requirement is found within the ProjectA OBC SuROM Flight Firmware Requirements Specification but not within RMS: Referenced Requirement: [SU208] The SuROM Monitor Mode shall support a command that requests the calculation of a CCITT-16 CRC for any SRAM, EEPROM, or DRAM memory range. The CRC value is placed in normal SuROM telemetry.",6/29/04ProjectA - TIM - 1195,CM Requirement Missing in RMS Issue: SU207,2,"The following requirement is found within the ProjectA OBC SuROM Flight Firmware Requirements Specification but not within RMS: [SU207] The SuROM Monitor Mode shall support a ""POKE"" command, placing specified data into SRAM or DRAM.",6/29/04ProjectA - TIM - 1194,CM Requirement Missing in RMS Issue: ACS-AN006,2,"The following requirement is found within the ProjectA OBC ACS Flight Software Requirements Specification but not within RMS: [ACS-AN006] AN software shall accept AN task commands which initialize, activate, inhibit, or otherwise control the individual AN task software processes. These commands are: o Initialize, o Enable/Disable telemetry packet generation, o DRAM table management commands, o Reset Telemetry Statistics.",6/29/04ProjectA - TIM - 1193,CM Requirement Missing in RMS Issue: ACS-AN005,2,The following requirement is found within the ProjectA OBC ACS Flight Software Requirements Specification but not within RMS: [ACS-AN005] AC software shall propagate the spacecraft ephemeris every ACS control cycle (5 Hz).,6/29/04ProjectA - TIM - 1192,CM Requirement Missing in RMS Issue: ACS-AN004,2,"The following requirement is found within the ProjectA OBC ACS Flight Software Requirements Specification but not within RMS: [ACS-AN004] A newly uplinked ephemeris table shall be verified using a ""continuity"" check. The new table shall not be used if continuity is out of range.",6/29/04ProjectA - TIM - 1191,CM Requirement Missing in RMS Issue: ACS-AN003,2,The following requirement is found within the ProjectA OBC ACS Flight Software Requirements Specification but not within RMS: [ACS-AN003] AN software shall send thruster vector data and thruster schedule data to AC task every 300 seconds after enabled by AC task.,6/29/04ProjectA - TIM - 1190,CM Requirement Missing in RMS Issue: ACS-AN002,2,The following requirement is found within the ProjectA OBC ACS Flight Software Requirements Specification but not within RMS: [ACS-AN002] AN software shall perform ephemeris and thruster table management.,6/29/04ProjectA - TIM - 1189,CM Requirement Missing in RMS Issue: ACS-AN001,2,The following requirement is found within the ProjectA OBC ACS Flight Software Requirements Specification but not within RMS: [ACS-AN001] The AN software shall send ephemeris data to AC task every 300 seconds enabled by AC task.,6/29/04ProjectA - TIM - 1188,CM Requirement Missing in RMS Issue: ACS-AC105,2,The following requirement is found within the ProjectA OBC ACS Flight Software Requirements Specification but not within RMS: [ACS-AC105] The ACS software shall support telemetry required to report onboard RCS and Engine thruster activity to the MOS.,6/29/04ProjectA - TIM - 1187,CM Requirement Missing in RMS Issue: DWN-UPL203.11,2,The following requirement is found within the ProjectA Uplink Card Software Requirements Specification but not within RMS: [DWN-UPL203.11] Command Timeout.,6/29/04ProjectA - TIM - 1186,CM Requirement Missing in RMS Issue: DWN-UPL203.10,2,The following requirement is found within the ProjectA Uplink Card Software Requirements Specification but not within RMS: [DWN-UPL203.10] Uplink Reset Count.,6/29/04ProjectA - TIM - 1185,CM Requirement Missing in RMS Issue: DWN-UPL203.9,2,The following requirement is found within the ProjectA Uplink Card Software Requirements Specification but not within RMS: [DWN-UPL203.9] OBC WDT Status.,6/29/04ProjectA - TIM - 1184,CM Requirement Missing in RMS Issue: DWN-UPL203.8,2,The following requirement is found within the ProjectA Uplink Card Software Requirements Specification but not within RMS: [DWN-UPL203.8] OBC Monitor Status.,6/29/04ProjectA - TIM - 1181,CM Requirement Text Issue: Proj CDR differs from RMS/SRS DS029,2,The RMS text and the SRS text are the same for requirement number DS029. However the Project CDR text for requirement number DS029 does not agree with the SRS or RMS. This indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: Referenced Requirements: RMS and OCB C&DH SRS: [DS029] The OBC-C&DH software shall implement 8 Virtual Recorders in DRAM. Project CDR: [DS029] The OBC-C&DH software shall implement 10 Virtual Recorders in DRAM.,6/29/04ProjectA - TIM - 1180,Incomplete/Incorrect OBC C&DH SRS Command Verification Requirement,4,"The SRS and the CDR material do not agree on the criteria needed to verify each command. It appears that the SRS is incomplete and/or inconsistent with the CDR material. Referenced Requirement/Design Spec: [SC013] Prior to the execution of each individual RTS command, the Flight Software shall verify the validity of the following command parameters: RTS command length, and Embedded command checksum The FSW CDR, slide 383, states: o Where appropriate, individual tasks share some of the burden of fault detection - Telemetry filtering (including range checking and handling missing packets) - Command Rejection (incorrect App ID, incorrect Function Code, invalid parameters",6/29/04ProjectA - TIM - 1178,Incomplete/Incorrect OBC C&DH SRS Checksum Requirement,4,"The FSW CDR, slide 377 states: Checksum task continuously checksums regions of OBC SRAM. The Regions are: 1. Code, Static Data (Tables), and EEPROM 2. Each region is broken into segments 3. Each region can be enabled/disabled 4. Checksums are initialized at start-up or when a region is enabled; initialized checksums are used for comparison on future passes Issue: The OBC SRS, Section 5.7.11.4 does not fully address Items 2 and 3 in that it does not state that EEPROM and static tables can be ""broken into segments"".",6/28/04ProjectA - TIM - 1177,Timing command needs to be described in the C&DH SRS,5,"Requirement TC001 of the C&DH SRS states: ""Flight Software shall accept and execute a JAM_SECONDS command to jam the seconds field of the spacecraft clock"". It should be explained that the JAM_SECONDS command, received from the ground, sets the seconds field of the spacecraft clock to the value in the command. This explanation appears on page 444 of the FSW CDR package of 5/26/04.",6/28/04ProjectA - TIM - 1175,OBC C&DH SRS Not Referenced as Providing 1553 Bus FP,4,"L3.11.1.25. Spacecraft FP shall respond to all credible 1553 bus failures. ProjectA, S912-SRS4420 - Uplink Card, 5.7.9, Fault Protection Issue: The FP CDR charts (e.g., page 53) show that the OBC is also involved in responding to 1553 bus faults.",6/28/04ProjectA - TIM - 1174,SRS Does Not Include Complete Requirements for Initializing to Safe State,3,"L3-SFS-909, Section 11.1.24: The Flight System shall initialize to a safe state following initial powerup, component reset or switch or recovery from Phoenix mode. Safe State: prevent powering previously failed unit, use of actuators while mated, monitor separation and initiate separation sequence and transition to Safe Mode when appropriate. Traced to: ProjectA, S912-SRS4920 - OBC C&DH, 5.7.1.1, Startup Processing ProjectA, S912-SRS4920 - OBC C&DH, 5.7.11.1, Telemetry and Statistics Monitoring ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.2, Processor Power-on/Restart ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.8.1.4, Autonomous Transition Requirements Issue: OBC C&DH 5.7.1.1. The closest child requirement appears to be OS001 - Flight Computer startup applications shall place the spacecraft into a safe system configuration without any ground intervention following power-up or a temporary power bus fault (cold-boot). This sub-requirement does not address “component reset or switch” or “recovery from Phoenix Mode”. Note, the term “Phoenix Mode” is not defined in the SRS. OBC 5.7.11.1. This section contains numerous sub-requirements. It deals with monitors, responses and controlling them. It does not address “flight system initialization to a safe state following -----“ ASC 5.7.1.2. This section contains 5 sub-requirements: none of which address the intent of the parent L3. It addresses ACS unique power on/reset requirements. ACS 5.7.1.8.1.4. A default set of components shall be powered and selected for use upon transition to Acquisition/Coarse Sun Pointing Rate Nulling Submode. This refers to ACS components, is not specific which are powered, and does not address the full intent of the L3. In summary, separately, and together, the linked SRS requirements do not fully address the parent L3.",6/28/04ProjectA - TIM - 1173,More details needed in the Loopback Register Write command in C&DH SRS,4,"Requirement S2001 in the C&DH SRS states: ""S2 task shall be able to receive a Downlink Card Loopback Register Write command from the Software Bus and send the command via the S2 serial interface to the Downlink Card"". This command is assumed to write the data that is being telemetered to the ground in a register for verification purposes. This fact should be explained in the requirement. Also, the register to which it writes can reside either in the downlink card, OBC or elsewhere. It needs to specify where it resides. It also needs to specify whether the register is a single register or multiple registers and what happens if subsequent data attempts to override its contents.",6/28/04ProjectA - TIM - 1172,SRS Does Not Include Requirements for Preventing Two Bus Controllers,4,"L3. 11.1.26. Spacecraft design or FP shall prevent or respond to the scenario where both OBCs are powered and configured as 1553 bus controllers. ProjectA, S912-SRS4420 - Uplink Card, 5.7.9, Fault Protection Issue: UPL 5.7.9 contains numerous sub-requirements and there is no mention of “preventing both OBCs from being configured as bus controllers”. This section addresses monitors, responses and other generic FP related requirements. While Section 5.7.9 may provide for the “tools” needed to accomplish this function, the linked SRS section does not address the intent of the L3.",6/28/04ProjectA - TIM - 1170,SRSs Do Not Contain Safe Mode Exit Constraint,3,"L3-SFS-902, section 11.1.17: The Flight System shall not exit Safe Mode until either (1) Normal operations entry is initiated by ground command, or (2) A subsequent fault results in flight computer reset/swap. Traced to: ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.8.1.3, Commanded Transition Requirements ProjectA, S912-SRS4420 - Uplink Card, 5.7.9, Fault Protection Issue: OBC ACS 5.7.1.8.1.3 does not mention exit from Safe Mode; therefore, this reference is invalid. Uplink Card 5.7.9 contains numerous sub-requirements and there is no mention of Safe Mode in the entire section. The L3 constraint on Safe Mode exit is not addressed by either of the referenced SRSs. Item (2) in L3 11.1.17 is not consistent with the FP L2 specification, which states that exit from Safe Mode, can only be accomplished by ground command (L2 FPR-65).",6/28/04ProjectA - TIM - 1169,Missing FSW Requirements to Implement ATLO and Launch Safety Constraints,2,"L3. 11.1.11 The Flight System shall initialize, upon powerup or reset of any electronic assemblies, to a state which does not violate any safety constraints for ATLO and Launch. Issue: There are no SRS requirements linked to this L3. The FSW undoubtedly has a role in preventing safety constraint violations. In this case the L3 places additional restrictions that apply during ATLO and launch. The SRS should reflect these restrictions.",6/28/04ProjectA - TIM - 1167,Powering Off Both OBCs,3,"L3.11.1.9 The Spacecraft FP shall not allow autonomous actions to result in powering off both OBCs (neither active). ProjectA, S912-SRS4420 - Uplink Card, 5.7.2.11.4.4, Standard Format PCC Commands Issue: Section 5.7.2.11.4.4 is not present in the UPL card SRS (should be 5.7.2.1.1.1). However, OV4-UPC007.B6.07 (PCC HLP Function: CEU A-OFF, B-OFF.) seems to provide a command that can power off both CEUs (and OBCs). There appears to be no specific UPL Card SRS FSW requirement that prevents an autonomous “power off” of both OBCs.",6/28/04ProjectA - TIM - 1166,Processing Uplinked Commands,3,"L3-SFS-792, section 10.6.3.5: The Flight Software shall allow execution of uplinked commands while an onboard sequence is executing. Traced to: ProjectA, S912-SRS4920 - OBC C&DH, 5.7.7.1, Relative Time Sequences ProjectA, S912-SRS4420 - Uplink Card, 5.7.9.4, Relative Time Sequences ProjectA, S912-SRS4970 - VML, 5.7.1, VM001 - VM Task Interface Requirements Issue: The referenced SRS sections contain numerous sub-requirements. A review of all the sub-requirements indicates that none of the three linked SRS addresses the intent of the parent L3 requirement.",6/28/04ProjectA - TIM - 1165,OBC Monitoring Separation Signals,4,"L3-SFS-762, section 10.4.2: The Flight Software shall support a startup configuration of safe mode such that the OBC is monitoring separation and controlling basic ACS functions and is the bus controller. Traced to: ProjectA, S912-SRS4920 - OBC C&DH, 5.7.1.5, 1553 Bus Controller (XB) ProjectA, S912-SRS4920 - OBC C&DH, 5.7.7.1, Relative Time Sequences ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.8.1.4, Autonomous Transition Requirements ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.8.1.4.1, ACS-AC075 ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.8.2.1, Launch Mode ProjectA, S912-SRS4920 - OBC C&DH, 5.7.1.5.1, XB011 Issue: The referenced SRS sections do not fully address the intent of the L3: “support a startup configuration of safe mode such that the OBC is monitoring separation and controlling basic ACS functions and is the bus controller”. The linked SRS sections do not mention the requirement to “monitor the separation signals”, yet the ACS SRS (5.7.1.8.1.3) states that the C&DH provides ACS with a separation indication. OBC C&DH 5.7.7.1 addresses RTSs and this appears to be the mechanism by which ""separation"" is monitored (based on the CDR and FP Performance Specification material). Note: the term “safe mode” is not found in the OBC C&DH or ACS SRSs, Sections 5.7. Section 5.7.1.5.1 do not exist in the OBC C&DH SRS.",6/28/04ProjectA - TIM - 1164,Requirements in OBC C&DH SRS concerning 1553 bus selection need clarification,4,"'Requirements XB005 and XB006 in the OBC C&DH SRS state the selection of the ""1553 preferred bus side(A or B)"". Since there are two redundant 1553 buses on the spacecraft, the phrase ""preferred bus side"" is giving an ambiguous meaning. It can mean the selection of a capability on a single bus or it can mean the selection of one bus out of the two redundant buses. This ambiguity should be removed by clearly stating which selection is intended. Referenced Requirements: [XB005] The OBC C&DH software shall provide a command to globally select the 1553 preferred bus side (A or B). This command affects all RT's on the 1553 bus. [XB006] The OBC C&DH software shall provide a command to select the 1553 preferred bus side(A or B) for a single RT.",6/28/04ProjectA - TIM - 1163,"FSW Does Not Support ""Inhibits"" as Required by the SFS L3",3,"1.) L3, 10.1.8.1 The Flight Software shall support inhibits as required by the flight system for all catastrophic events (Category A*) which could result in a fatal or disabling injury, total loss of the ProjectA Flight System or major facility damage. The total requirement is three inhibits (dual fault tolerant). Inhibits include Engine, RCS Thrusters, Solar Array Deployment and RF Transmit. ProjectA, S912-SRS4920 - OBC C&DH, 5.7.7.1, Relative Time Sequences ProjectA, S912-SRS4920 - OBC C&DH, 5.7.11.1, Telemetry and Statistics Monitoring ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.6.2, Generate Thruster Commands Issue #1: The two referenced OBC C&DH paragraphs contain numerous sub-requirements. A review of all the sub-paragraphs shows no specific FSW requirements that provide for three inhibits. (Note: OBC C&DH 5.7.1.1, OS001, simply states, “--place the spacecraft into a safe system configuration --“). It is possible that RTSs can serve this purpose but the RTS requirements are somewhat ""generic"" in content and do not specifically address this topic. The OBC ACS referenced paragraph has four sub-requirements, none of which addresses “inhibits”. The referenced SRS requirements do not fully address the intent of the L3. --------------- 2.) L3, 10.1.8.2. The Flight Software shall support inhibits as required by the flight system for all critical events (Category B*), which could result in serious injury, ProjectA Flight System, damage, or in the unscheduled use of safing procedures. The total requirements are two inhibits (single fault tolerant). Inhibits include Reaction Wheels and IRU. ProjectA, S912-SRS4920 - OBC C&DH, 5.7.7.1, Relative Time Sequences ProjectA, S912-SRS4920 - OBC C&DH, 5.7.11.1, Telemetry and Statistics Monitoring ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.1, Fault Detection, Isolation, and Recovery (FDIR) ProjectA, S912-SRS4930 - OBC ACS, 5.7.1.6.1, Generate RWA Commands Issue #2: The two referenced OBC C&DH paragraphs contain numerous sub-requirements; hence, it is unclear which requirements are pertinent. A review of all the sub-paragraphs shows no specific FSW requirements that provide for two inhibits. OBC ACS 5.7.1.1 has ten sub-requirements, none of which addresses the need for inhibits. OBC ACS 5.7.1.6.1 contains 5 sub-requirements, none of which address the need for inhibits. The referenced SRS requirements do not address the intent of the L3.",6/28/04ProjectA - TIM - 1162,CM of unique requirement identifiers: UBM vs. UMB,2,"1. The ""ACE and Uplink Boot ROM Firmware Requirements Specification"" contains requirements referred to as UMB026 - UMB032. The RMS output file ""L4 to L3_Requirements_Updated_Polished.xls"" refers to these same requirements as UBM026 - UBM032. The ""UMB"" prefix from the SRS is not consistent with the ""UBM"" prefix in RMS. 2. The ""ACE and Uplink Boot ROM Firmware Requirements Specification"" and the RMS output file ""L4 to L3_Requirements_Updated_Polished.xls"" refer to requirement UMB025 with the ""UMB"" prefix which is inconsistent with the ""UBM"" prefix used in the surrounding requirements. The two instances above indicate the existence of a configuration management issue relative to the Level 4 SRS requirements.",6/28/04ProjectA - TIM - 1161,CM Requirement Heritage Issue: ACS-AC105,5,"Requirement ACS-AC105 is present in the SRS, however it does not contain a heritage entry in Appendix B. 5.7.1.6.2 Generate Thruster Commands ACS-AC105 The ACS software shall support telemetry required to report onboard RCS and Engine thruster activity to the MOS.",6/28/04ProjectA - TIM - 1159,L4 requirement concerning XB Bus Controller not accurate,5,"The OBC C&DH requirement XB011 states: ""The OBC-C&DH software shall configure the OBC 1553 upon FSW initialization as Bus Controller"". The wording of this requirement implies that the 1553 is being configured as Bus Controller along with the OBC. However, the fact is that only the OBC can be configured as Bus Controller of the 1553 bus, meaning the 1553 should not itself be called a Bus Controller. The spacecraft has two redundant 1553 buses where only one of them can be selected as the active bus at any given time. There are also two OBC computers where, although not clearly explained in the artifacts, one of them can be selected as the Bus Controller on the active bus and the other one can be made a remote terminal on the same bus, not on the other bus. Thus, the requirement above should probably be rephrased as follows: ""The OBC-C&DH software shall configure the OBC upon FSW initialization as either Bus Controller or a Remote Terminal of the 1553 bus"".",6/25/04ProjectA - TIM - 1158,CM Requirement Text Issue: VM001.1,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [VM001.1] Sequence Execution Capabilities: VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 10 (ten) Virtual Machines, capable of executing on-board blocks and sequences. VML SRS: [VM001.1] Sequence Execution Capabilities: VM Task shall integrate the Virtual Machine Language Flight Component (VMLFC) with ProjectA Flight Software. The VMLFC shall be configured with 12 (twelve) Virtual Machines, capable of executing on-board blocks and sequences.",6/24/04ProjectA - TIM - 1157,CM Requirement Text Issue: UBM010,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [UBM010] The Boot program shall reset/restart 69R000 hardware components and initialize them to a known state. UPLC SRS: [UBM010] The Boot program shall reset/restart 69R000 hardware components and initialize them to some known state.",6/24/04ProjectA - TIM - 1156,CM Requirement Text Issue: SU020,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [SU020] Flight Software shall accept an initialization parameter block via ground command, including Spacecraft ID (Default=0x75), VCDU RS Code(Default=0x4D47), VCDU Size (Default=1084), Downlink Card VCDU Rate (Default=1 per second), Uplink Card VCDU Rate (Default= 1 per 4 seconds), Time (Default=0), with no Insert Zone, and RT-Primary, where the Spacecraft ID and RT-Primary values are stored in EEPROM memory. SuROM SRS: [SU020] Flight Software shall accept an initialization parameter block via ground command, and/or from Uplink Card directly during OBC cold boot, including Spacecraft ID (Default=0x75), VCDU RS Code(Default=0x4D47), VCDU Size (Default=444), Downlink Card VCDU Rate (Default=1 per 378 second), Uplink Card VCDU Rate (Default= 1 per 378 seconds), Time (Default=0), with no Insert Zone, and RT-Primary, where the Spacecraft ID and RT-Primary values are stored in nonvolatile memory.",6/24/04ProjectA - TIM - 1155,CM Requirement Duplicate Issue: SRC-UPC002,2,"RMS and the SRS contain 2 Requirements each with the same requirement ID number assigned (SRC-UPC002), which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS and UPLC SRS: [SRC-UPC002] The Uplink FSW shall process the function codes in a Local PCC command in accordance with the following: [SRC-UPC002] The Uplink FSW shall write the contents of the HLP Extended Code Field into a hardware defined I/O address prior to writing the HLP command into the HLP Control register if the HLP command is HLP_GRPA_2.",6/24/04ProjectA - TIM - 1154,CM Requirement Text Issue: OV4-UBM006,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [OV4-UBM006] The Boot/Monitor shall support a Copy function which copies from Instruction space or Data space to EEPROM. UPLC SRS: [OV4-UBM006] The Boot/Monitor shall support a Copy function which copies from Instruction space to Data space only.",6/24/04ProjectA - TIM - 1153,CM Requirement Text Issue: OV4-UBM001,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [OV4-UBM001] The Boot program shall start the Boot Monitor function if 3 or more space characters (20 hex) are transmitted to the 69R000 onboard UART within 0.75 (± 0.25) seconds of resetting the microprocessor. UPLC SRS: [OV4-UBM001] The Boot program shall start the Boot Monitor function if 3 or more space characters (20 hex) are presented to the 69R000 onboard UART within 0.75 (± 0.25) seconds of resetting the microprocessor.",6/24/04ProjectA - TIM - 1152,Erroneous requirement in telemetry of consumable (hydrazine mass),5,"The available amount of hydrazine cannot be determined with the precision of 5% when the consumable is almost all used. Section 8.1.1.8 reported below is incorrect leaving the requirement incomplete. 8.1.1.8 Satisfier Allocation: The Flight System shall telemeter information that is sufficient to estimate the remaining hydrazine mass to within 10 kg or 5%, whichever is smaller.",6/24/04ProjectA - TIM - 1151,CM Requirement Duplicate Issue: DWN-SC021,2,"RMS and the SRS contain 2 Requirements each with the same requirement ID number assigned (DWN-SC021)which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS and the UPLC SRS [DWN-SC021] The Flight Software shall pause or restart execution of an RTS on command. [DWN-SC021] Flight Software shall interpret the RTS time-tag as the number of seconds to delay ""relative"" to the previous RTS command execution, or, in the case of the first command in a sequence, the number of seconds to delay after the receipt of the RTS execution request.",6/24/04ProjectA - TIM - 1150,CM Requirement Text Issue: ACS-AD004,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AD004] The AD software shall verify IRU and Star Tracker data validity status before using the data. ACS SRS: [ACS-AD004] The AD software shall verify IRU and Star Tracker data validity before using the data.",6/24/04ProjectA - TIM - 1149,CM Requirement Text Issue: ACS-AD002,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AD002] The AD software for three-state Kalman Filter shall receive as input: Measured Rates derived from Corrected Inertial-to-Tracker Quaternions from STR1 and STR2 at 5 Hz, Estimated Rates. ACS SRS: [ACS-AD002] The AD software for three-state Kalman Filter shall receive as input: Measured Rates derived from Corrected Inertial-to-Tracker Quaternions from STR1 and/or STR2 at 1 Hz, and Estimated Rates.",6/24/04ProjectA - TIM - 1148,CM Requirement Text Issue: ACS-AD001,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AD001] The AD software for six-state Kalman Filter shall receive as input: Estimated IRU Rates, Corrected Inertial-to-Tracker Quaternions from STR1 and STR2, Propagated Quaternion. ACS SRS: [ACS-AD001] The AD software for six-state Kalman Filter shall receive as input: Estimated IRU Rates, Corrected Inertial-to-Tracker Quaternions from STR1 and/or STR2, and Propagated Quaternion.",6/24/04ProjectA - TIM - 1147,CM Requirement Text Issue: ACS-AC104,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC104] The AC software shall record the total test failure count for each FDC test. ACS SRS: [ACS-AC104] The ACS software shall be able to record onboard RCS and Engine thruster activity at a varying and settable precision, and report this activity to the ground segment. This is another case where the same requirement ID was assigned to two entirely different requirement statements.",6/24/04ProjectA - TIM - 1146,CM Requirement Text Issue: ACS-AC098,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC098] The software shall use proportional-integral-derivative (PID) controller for Target Pointing, Delta-V, and Science Mode, and proportional-derivative (PD) controller for Acquisition/Coarse Sun Pointing Mode. ACS SRS: [ACS-AC098] The software shall use proportional-integral-derivative (PID) controller for Target Pointing, Delta-V except for Thrust Vector Control (TVC), and Science Mode, proportional-derivative (PD) controller for Acquisition/Coarse Sun Pointing Mode, with only the derivative (rate) term for the Rate Nulling submode. The TVC has a separate controller as described in ACS Performance Specification section 3.2.2.3.",6/24/04ProjectA - TIM - 1145,CM Requirement Text Issue: ACS-AC097,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC097] Three-state Kalman Filter shall be used in Delta-V and Science Mode, executing at 5 Hz, if attitude and rate determination is using only star tracker data. ACS SRS: [ACS-AC097] Three-state Kalman Filter shall be used in Delta-V and Science Mode, executing at 1 Hz, if attitude and rate determination is using only star tracker data.",6/24/04ProjectA - TIM - 1144,CM Requirement Text Issue: ACS-AC095,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC095] Three-state Kalman Filter shall be used in Target Pointing Mode, executing at 5 Hz, if attitude and rate determination is using only star tracker data. ACS SRS: [ACS-AC095] A three-state Kalman Filter shall be used in Target Pointing Mode, executing at 1 Hz, if attitude and rate determination is using only star tracker data.",6/24/04ProjectA - TIM - 1143,CM Requirement Text Issue: ACS-AC094,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC094] Six-state Kalman Filter shall be used in Target Pointing Mode, executing at 1 Hz, if attitude and rate determination is using star tracker and IRU data. ACS SRS: [ACS-AC094] A six-state Kalman Filter shall be used in Target Pointing Mode, executing at 1 Hz, if attitude and rate determination is using star tracker and IRU data.",6/24/04ProjectA - TIM - 1142,CM Requirement Text Issue: ACS-AC089,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC089] Transition to Science or Delta-V Mode shall be disallowed if spacecraft loss of attitude reference as defined in ACS Performance Specification section 3.2.4.6. ACS SRS: [ACS-AC089] Transition to Science or Delta-V Mode shall be rejected if spacecraft loss of attitude reference is detected.",6/24/04ProjectA - TIM - 1141,CM Requirement Text Issue: ACS-AC088,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC088] Transition to Target Pointing Mode shall be rejected if there is Kalman Filter divergence. ACS SRS: [ACS-AC088] Transition to Target Pointing Mode shall be rejected if Kalman Filter diverges.",6/24/04ProjectA - TIM - 1140,CM Requirement Text Issue: ACS-AC087,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC087] Transition to Target Pointing Mode shall be rejected if spacecraft loss of attitude reference as defined in ACS Performance Specification section 3.2.4.6. ACS SRS: [ACS-AC087] Transition to Target Pointing Mode shall be rejected if spacecraft loss of attitude reference is detected.",6/24/04ProjectA - TIM - 1139,CM Requirement Text Issue: ACS-AC084,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC084] Transition from Science or Delta-V Mode to Acquisition/Coarse Sun Pointing Rate Nulling Submode shall be: (1) autonomous, via detection of Kalman Filter divergence or loss of attitude reference defined in ACS Performance Specification section 3.2.4.6 for a specified time, or (2) explicit, via ground-command. ACS SRS: [ACS-AC084] Transition from Science or Delta-V Mode to Acquisition/Coarse Sun Pointing Rate Nulling Submode shall be: (1) autonomous, via detection of Kalman Filter divergence or loss of attitude reference for a specified time, or (2) explicit, via ground-command.",6/24/04ProjectA - TIM - 1138,CM Requirement Text Issue: ACS-AC083.4,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC083.4] Loss of attitude reference defined in ACS Performance Specification section 3.2.4.6. ACS SRS: [ACS-AC083.4] Loss of attitude reference.",6/24/04ProjectA - TIM - 1137,CM Requirement Text Issue: ACS-AC083.2,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC083.2] Body rate errors exceed a specified value for a specified time. ACS SRS: [ACS-AC083.2] Invalid ephemeris.",6/24/04ProjectA - TIM - 1136,CM Requirement Text Issue: ACS-AC083.1,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC083.1] Attitude errors exceed a specified value for a specified time. ACS SRS: [ACS-AC083.1] Attitude errors or body rate errors exceed a specified value for a specified time.",6/24/04ProjectA - TIM - 1135,CM Requirement Text Issue: ACS-AC074,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC074] The software shall allow commanded transitions between Target Pointing Mode and Delta-V Mode or Science Mode. ACS SRS: [ACS-AC074] The software shall allow commanded transitions between Target Pointing Mode, Delta-V Mode or Science Mode.",6/24/04ProjectA - TIM - 1134,CM Requirement Text Issue: ACS-AC068,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC068] AC software shall perform mode transition FDIR defined in ACS performance specification section 3.2.4.7 and 3.1.3.2.4. ACS SRS: [ACS-AC068] AC software shall perform mode transition FDIR defined in ACS performance specification section 3.1.3.6 and 3.1.3.2.4.",6/24/04ProjectA - TIM - 1133,CM Requirement Text Issue: ACS-AC064,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC064] The ACS Software shall generate a status message and send it to the instrument every 1Hz. ACS SRS: [ACS-AC064] The ACS Software shall generate an ancillary telemetry packet.",6/24/04ProjectA - TIM - 1132,L3-PSR-39: Negative requirement untestable.,5,L3-PSR-39 is unverifiable as written. L3-PSR-39 The Science Instruments shall not require an atypical power-up procedure following sudden removal of power.,6/24/04ProjectA - TIM - 1131,CM Requirement Text Issue: ACS-AC061,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC061] SAD commands shall be output to the ACE in all ACS modes, except Launch Mode. ACS SRS: [ACS-AC061] SAD commands shall be output to the ACE in all ACS modes.",6/24/04ProjectA - TIM - 1130,CM Requirement Text Issue: ACS-AC060,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC060] ACS FSW shall generate Solar Array commands to maintain proper orientation of the solar arrays for power generation. ACS SRS: [ACS-AC060] ACS FSW shall generate Solar Array Commands to maintain proper orientation of the solar arrays for power generation at 1 Hz.",6/24/04ProjectA - TIM - 1129,CM Requirement Text Issue: ACS-AC059,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC059] A 1Hz update command shall be output to both Star Trackers at 5 Hz. ACS SRS: [ACS-AC059] A linear velocity update command shall be output to both Star Trackers at 1 Hz.",6/24/04ProjectA - TIM - 1128,CM Requirement Text Issue: ACS-AC049,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC049] The spacecraft rate from each STR shall be converted to the spacecraft body frame. ACS SRS: [ACS-AC049] The spacecraft rate from each STR shall be converted to the body frame.",6/24/04ProjectA - TIM - 1127,CM Requirement Text Issue: ACS-AC048,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC048] The following items in STR telemetry shall be checked to ensure data validity: status, temperature, and quaternion data. ACS SRS: [ACS-AC048] The following items in STR telemetry shall be checked to ensure data validity: status, and quaternion data.",6/24/04ProjectA - TIM - 1126,CM Requirement Text Issue: ACS-AC036,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC036] The last valid CSS data shall be used when CSS data is declared invalid. ACS SRS: [ACS-AC036] The last valid CSS data shall be used for that processing cycle when CSS data is declared invalid.",6/24/04ProjectA - TIM - 1125,CM Requirement Text Issue: ACS-AC021,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC021] The AC software shall verify received ACS command data is within specific (table) values for commands defined in requirements ACS-AC020.5 and ACS-AC020.8. ACS SRS: [ACS-AC021] The AC software shall verify received ACS command data is within specific (table) values for commands defined in requirements ACS-AC020.4 and ACS-AC020.10.",6/24/04ProjectA - TIM - 1124,CM Requirement Text Issue: ACS-AC020.9,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC020.9] Enable or disable autonomous thruster momentum control. ACS SRS: [ACS-AC020.9] ACS Momentum Control Commands: o Enable/Disable autonomous momentum control o Enable/Disable momentum adjust o Momentum command o Set momentum error limit threshold commands o Momentum torque magnitude command",6/24/04ProjectA - TIM - 1123,CM Requirement Text Issue: ACS-AC020.8,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC020.8] Apply +X rotation in Rate Nulling or Sun Pointing submode: Rate (radians/second), Timer (seconds). ACS SRS: [ACS-AC020.8] ACS Jet Commands: o Set Jet Pulse Period, o Set DeltaV Jet Seconds, o Stationkeep Pulse Period",6/24/04ProjectA - TIM - 1122,CM Requirement Text Issue: ACS-AC020.5,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC020.5] Enable ground control of actuators: RWA Speed (set RWA speed bias, or set RWA speed output), RWA Torque (set RWA torque output), Thruster Commands, Engine engines Commands, Engine gimbal Commands, Solar Array Commands. ACS SRS: [ACS-AC020.5] Enable ground control of actuators: o RWA Speed (set RWA speed bias, or set RWA speed output), o RWA Torque (set RWA torque output), o Thruster Commands, o Engine Commands, o Solar Array Commands.",6/24/04ProjectA - TIM - 1121,CM Requirement Text Issue: ACS-AC020.4,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC020.4] Set AC control mode: Launch Mode, Acquisition/Coarse Sun Pointing Mode - Rate Nulling Submode, Acquisition/Coarse Sun Pointing Mode - Sun Acquisition Submode, Acquisition/Coarse Sun Pointing Mode - Sun Pointing Submode, Target Pointing Mode - Attitude Steering Submode, Target Pointing Mode - Inertial Target Submode, Delta-V Mode - Engine Submode, Delta-V Mode - RCS Submode, Science Mode - Asteroid Nadir Pointing Submode, Science Mode - Asteroid Target Tracking Submode. ACS SRS: [ACS-AC020.4] Set AC control mode: o Launch Mode, o Acquisition/Coarse Sun Pointing Mode - Rate Nulling Submode, o Acquisition/Coarse Sun Pointing Mode - Sun Acquisition Submode, o Acquisition/Coarse Sun Pointing Mode - Sun Pointing Submode, o Target Pointing Mode o Delta-V Mode - Engine Submode, o Delta-V Mode - RCS Submode, o Science Mode - Asteroid Nadir Pointing Submode, o Science Mode - Asteroid Target Tracking Submode.",6/24/04ProjectA - TIM - 1120,CM Requirement Text Issue: ACS-AC020.10,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC020.10] Set ACS Target Mode: Target Pointing Mode - Attitude Steering Submode, Target Pointing Mode - Inertial Target Submode. ACS SRS: [ACS-AC020.10] Set ACS Target Mode: o Target Pointing Mode",6/24/04ProjectA - TIM - 1119,CM Requirement Text Issue: ACS-AC013,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC013] After initialization is complete, the ACS software shall begin to generate telemetry, including responses to C&DH housekeeping requests. ACS SRS: [ACS-AC013] After initialization is complete, the ACS software shall start generating telemetry, including responses to C&DH housekeeping requests.",6/24/04ProjectA - TIM - 1118,CM Requirement Text Issue: ACS-AC012,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC012] The AC software shall generate an event message to signify ACS software completion of a power-on or re-boot. ACS SRS: [ACS-AC012] The AC software shall generate an event message to signify ACS software has completed initialization after a power-on or re-boot.",6/24/04ProjectA - TIM - 1117,CM Requirement Text Issue: ACS-AC010,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC010] When the C&DH software indicates that a power-on or re-boot has occurred, selected (table) ACS FDIR processing shall be initialized as disabled. ACS SRS: [ACS-AC010] When the C&DH software indicates that a power-on or re-boot has occurred, selected ACS FDIR processing shall be initialized as disabled.",6/24/04ProjectA - TIM - 1115,CM Requirement Text Issue: ACS-AC008,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC008] Autonomous transition from a higher mode to a lower mode, i.e., Science Mode to Acquisition and Coarse Sun Pointing Mode shall occur under the conditions outlined in ACS Performance Specification section 3.2.4.7. ACS SRS: [ACS-AC008] Autonomous transition from a ""higher"" mode to a ""lower"" mode, i.e., Science Mode to Acquisition and Coarse Sun Pointing Mode shall occur under the conditions outlined in ACS Performance Specification section 3.1.3.6.",6/24/04ProjectA - TIM - 1114,CM Requirement Text Issue: ACS-AC007,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC007] ACS FSW fault detection and correction shall incorporate Limits Data, which is protected (checksum) and configurable from the ground, and against which measured and processed data are compared. ACS SRS: [ACS-AC007] ACS FSW fault detection and correction shall incorporate ""Limits Data"", which is checksum protected and configurable from the ground, and against which measured and processed data are compared.",6/24/04ProjectA - TIM - 1113,CM Requirement Text Issue: ACS-AC002,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC002] The ACS software shall provide a latched FDIR status telemetry that reflects the FDIR status since last reset or until cleared by command. ACS SRS: [ACS-AC002] The ACS software shall provide a latched FDIR status telemetry that reflects the FDIR status since last reset or until cleared by ground command.",6/24/04ProjectA - TIM - 1112,CM Requirement Text Issue: ACS-AC001,2,"RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACS-AC001] During each 5 Hz cycle, the ACS software shall generate a FDIR status packet to identify which fault monitors failed their FDIR checks and which did not. ACS SRS: [ACS-AC001] During each 5 Hz cycle, the ACS software shall generate a FDIR status packet to identify which faults failed their FDIR checks and which did not.",6/24/04ProjectA - TIM - 1111,CM Requirement Text Issue: ACE-EXEC019.3,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACE-EXEC019.3] If the memory load CRC check fails, the ACE Executive shall reject the load, increment an error counter, calculate a CRC for each 4K-bytes of the load, and transmit the CRCs in telemetry for ground analysis. ACE SRS: [ACE-EXEC019.3] If the memory load checksum check fails, the ACE Executive shall reject the load, increment an error counter, calculate a CRC for each 4K-bytes of the load, and transmit the CRCs in telemetry for ground analysis.",6/24/04ProjectA - TIM - 1110,CM Requirement Text Issue: ACE-EXEC017,2,"The RMS text and the SRS text differ for the same requirement number, which indicates that the Project has a configuration management issue with the L4 Flight Software Requirements: RMS: [ACE-EXEC017] The ACE Executive shall schedule all ACE application software at a maximum rate of 5 hz. ACE SRS: [ACE-EXEC017] The ACE Executive shall schedule all ACE application software at a maximum rate of 5 Hz. in both Normal and Safehold modes.",6/23/04ProjectA - TIM - 1109,Conflicting requirements on redundant hardware in L2-FPR-139 and L3-PSR-239,3,"The two FC instruments are classified as redundant hardware therefore the simultaneous operation required in L3-PSR-239 needs to be approved by the Project Manager. The Project Manager approval is required by L2-FP-139. There is only one L3 requirement (i.e., L3-SFS-1034) traced to L2-FPR-139 and it does not appear to be applicable. Reference Requirements: [L2-FPR-139] The ProjectA Project shall only swap to redundant hardware elements for fault recovery actions in order to assure health/ safety. Violations shall be approved by the Project Manager. [L3-PSR-239] Goal: The payload system's two imaging cameras shall be able to acquire images concurrently (i.e. within 100 msec of each other). [L3-SFS-1034] Redundant Flight System electrical components shall undergo 500 hours of accumulated operating/power-on time prior to launch using a combination of component and spacecraft level test time.",6/22/04ProjectA - TIM - 1108,ACS FP Monitors/Responses Not Controlled as Defined in the SFS L3,3,"The FSW CDR slide 137 states, ""A) ACS FDC tests is performed all the time without enable or disable flag. The FDC tests evaluation which yields to FDC action can be enabled or disabled as a group (e.g. RWA, CSS, etc.)."" There appears to be a disconnect between the CDR defined approach to disabling/enabling monitors and responses (enables/disables as a group) and the L3 requirements (ability to disable/enable individual monitors and responses). Based on the CDR material, the design does not meet the intent of the L3. Referenced Requirements: [L3-SFS-770] 1) The Flight Software shall allow ground operators to disable the following autonomous capabilities: [L3-SFS-771] Fault Protection: individual monitors and responses [L3-SFS-978] Spacecraft FSW FP monitors and responses shall be individually enabled and disabled via command.",6/16/04ProjectA - TIM - 1107,L2-FGI-773 not flowed down to the L3 SCFSRD,2,"The flow-down of L2-FGI-773 is incomplete. In the July 15, 2004 DOORS database there were no inlinks for L2-FGI-773. After review of the L3 Spacecraft and Flight System Requirements Document (SCFSRD) no L3 requirements were identified to address L2-FGI-773. Referenced Requirements: [L2-FGI-773] The spacecraft shall report in downlink engineering telemetry the number of successfully received telecommand frames.",6/9/04ProjectA - TIM - 1106,L2-FGI-774 not flowed down to the L3 SCFSRD,2,"The flow-down of L2-FGI-774 is incomplete. In the July 15, 2004 DOORS database there were no inlinks for L2-FGI-774. After review of the L3 Spacecraft and Flight System Requirements Document (SCFSRD) no L3 requirements were identified to address L2-FGI-774. Referenced Requirement: [L2-FGI-774] The spacecraft shall report in downlink engineering telemetry the number of uplink commands that were successfully or unsuccessfully processed.",6/9/04ProjectA - TIM - 1105,The payload should be included in L3 SFS requirement,4,"In the Spacecraft and Flight Systems Requirements Document requirement L3-SFS-758 states: ""All Flight Software shall be patchable and have the patches survive a computer reset with the exception of computer SUROM. Specifically for the flight software: OBC, ACE, Uplink Card, EngCntrl and instruments as required"". This requirement should have the payload included in the exception list regarding a computer reset. This is due to requirement L3-PSR-226 in the Payload Systems Requirements Document which states: ""Each instrument shall be able to accept patches(code or parameters) to the operational FSW image, i.e. the FSW image that it is currently executing. Such patches are not required to survive an instrument reset."" Thus, the SC&FSRD requirement L3-SFS-758 should be modified as follows: ""All Flight Software shall be patchable and have the patches survive a computer reset with the exception of computer SUROM and the payload instruments. Specifically for the flight software: OBC, ACE, Uplink Card, EngCntrl and instruments as required"".",6/8/04ProjectA - TIM - 1104,Incomplete Traceability Links Between L3 SC&FSRD and L2-FGI-315,3,"The traceability links for L2-FGI-315 are incomplete. L2-FGI-315 should be linked to L3-SFS-2248 in the Systems section and L3-SFS-756 in the Flight Software section of the Spacecraft & Flight Systems Requirements Document. L2-FGI-315 is not linked to L3-SFS-756 in the 7-15-04 DOORS database. In addition, the list of applicable components in L3-SFS-2248 and L3-SFS-756 is not consistent with L2-FGI-315. L2-FGI-315 includes the Framing Camera in the list of applicable components; however, neither L3-SFS-2248 nor L3-SFS-756 includes the Framing Camera. It appears that L3-FGI-315 should also be linked to requirements in the PSRD. ""ACE"" is included in L3-SFS-756 as an applicable component, but L2-FGI-315 does not include ""ACE"". L3-SFS-756 satisfies L2-FGI-315, but also introduces new functionality for ""ACE"", which is inconsistent with the parent requirement, L2-FGI-315. Referenced Requirements: [L2-FGI-315] 1. The Flight System shall be able to Load and Patch FSW on powered but non controlling critical components in a normal operational configuration. Specifically OBC, Uplink Card, EngCntrl, and Framing Camera. [L3-SFS-2248] The Spacecraft shall be able to Load and Patch FSW on powered but non controlling components in a normal operational configuration. Specifically for the spacecraft: OBC, Uplink Card, EngCntrl. [L3-SFS-756] Spacecraft shall support FSW Load and Patch on powered but non controlling components in a normal operational configuration. Specifically for the flight software: OBC, ACE, Uplink Card, and EngCntrl.",6/8/04ProjectA - TIM - 1103,L3-SFS-876: Misspelling is communicating the wrong information,4,"There is a misspelled word in L3-SFS-876, which is conveying the wrong meaning. The misspelled word is ""detectable"", which should be ""deletable"". Referenced Requirement: [L3-SFS-876] Sequences and blocks shall be detectable from the ground. This may be via overwriting the CRC information with zeroes.",6/7/04ProjectA - TIM - 1102,L2-FGI-771 is not flowed down to the L3 SC&FSRD,3,L2-FGI-771 is not linked to any requirements in the L3 Spacecraft and Flight Systems Requirements Document (SC&FS RD). L2-FGI-771 seems to imply software functionality. Referenced Requirements: [L2-FGI-771] The spacecraft shall prioritize Virtual Recorder playback via a loadable table.,6/7/04ProjectA - TIM - 1100,L2-FPR-135 Not Adequately Addressed in the L3 SFS,2,"The intent of the L2 is to ""verify timeliness of switching between redundant elements and the availability of them, at the system level"". The two linked L3s provide test bed requirements and therefore do not address the intent of the linked L2. Referenced Requirements: [L2-FPR-135] For the ProjectA Project, when redundancy has been used in the flight system design to provide fault tolerance, system fault protection testing shall verify the timeliness of switching between redundant elements, in addition to verifying the availability of the redundant functionality. [L3-SFS-2196] The testbed shall provide hardware/software necessary to verify complete Fault Protection regression testing. This capability will be provided on all testbeds so that early verification can be performed prior to spacecraft testing. [L3-SFS-1038] The Flight System shall use a Flight System Testbed (a scaled down, non-flight version of the Flight System) to provide early confidence in bus hardware and software design.",6/6/04ProjectA - TIM - 1099,L2-FPR-134 Not Adequately Addressed in the L3 SFS,3,"There is no linked L3 for this L2 requirement. Referenced Requirements: [L2-FPR-134] The ProjectA Project's software fault protection test planning shall be guided by a failure modes and effects analysis (FMEA) and/or fault tree analysis (FTA) that considers 1) possible failure modes and 2) both failure and off-nominal behavior of interfacing hardware components. The test plan should specify the extent of exception testing, error injection testing, and transient testing.",6/6/04ProjectA - TIM - 1098,L2-FPR-133 Not Adequately Addressed in the L3 SFS,3,"This L2 requirement focuses on FP design attributes (it is to enable FP testing at all levels of development from unit through system test bed). The single linked L3 addresses test bed capability, not the FP design; hence, it does not reflect the parent L2. Referenced Requirements: [L2-FPR-133] The ProjectA FP design shall enable early and often software testing at unit, module, subsystem test bed and system test bed levels to incrementally verify functionality/operability. It is recognized that a full end-to-end system test is required to completely validate the final FP design. [L3-SFS-2196] The testbed shall provide hardware/software necessary to verify complete Fault Protection regression testing. This capability will be provided on all testbeds so that early verification can be performed prior to spacecraft testing",6/6/04ProjectA - TIM - 1096,L2-FPR-125/126/127/129/130 Not Adequately Addressed in the L3 SFS,3,The specific testing objectives in the L2 are mapped to two generic L3s (stating that a CPT would be performed and that the test bed shall provide components for complete FP regression testing) that do not address the intent of the parent L2. It is unclear how these five L2 requirements will be carried into the test program due to the lack of specificity in the L3s.,6/6/04ProjectA - TIM - 1095,L2-FPR-112 Not Adequately Addressed in the L3 SFS,3,This L2 has only been flowed down to the GS and the PSR L3s. Since FP counters also reside in the S/C FSW this L2 should also influence the L3-SFS. Referenced Requirements: [L2-FPR-112] The ProjectA Project shall be able to clear all fault protection counters via ground command. [L3-GS-1345] The MOS shall be able to clear all fault protection counters by ground command. [L3-PSR-251] The ProjectA Project shall be able to clear all instrument fault protection counters via ground command. [L3-GS-750] The MOS shall be able to generate all the spacecraft commands defined in the Command Dictionary. [L3-GS-77] The MOS shall have the capability to generate and radiate commands that respond to high-priority spacecraft events or activities (including TCMs) within 12 hours of the decision to send the commands.,6/6/04ProjectA - TIM - 1094,L2-FPR-109 Not Adequately Addressed in the L3 SFS,4,"The L2 addresses monitoring science instrument engineering data and if the data indicates problems then the S/C shall issue an instrument safing command, power the offending unit of, safe the flight system (FS), etc. L3-SFS-996 states that the response is just to, ""safe the FS"". It appears that the objective of the L2 is to ""safe the instrument"". The L3 requirement seems to address the ""FS"". Clarification is needed. Referenced Requirements: [L2-FPR-109] The Spacecraft shall monitor a limited set of each Science Instrument's engineering data (e.g. electronics temperature, current and command interface). If any of the measurements in an Science Instrument's engineering data exceeds acceptable bounds for a prescribed duration, the Spacecraft shall execute that Science Instrument's .safe. command block and/or may power the unit off and/or take other actions to safe the flight system. [L3-SFS-996] The Spacecraft FP shall monitor a limited set of engineering and interface data for each instrument, as provided by Spacecraft sensors, and respond in a simple manner to safe the FS. [L3-SFS-913] The Spacecraft shall inform the necessary Flight System components (Payload and Engine) of an impending power down prior to power off when possible.",6/6/04ProjectA - TIM - 1093,L2-FPR-106 Not Adequately Addressed in the L3 SFS,4,"The L2 states that ""no single failure of the Flight System shall cause the loss of more than one science instrument"". The single linked L3 restricts the loss of functionality to only the FCs. In addition, the L3 does not specifically state what has faulted (e.g., the Flight System, the FC, etc.). Referenced Requirements: [L2-FPR-106] To meet minimum mission requirements, no single failure of the Flight System shall cause the loss of more than one science instrument.[L3-PSR-123] The FC system shall be block redundant, such that no single fault will compromise the functionality or performance of both FCs",6/6/04ProjectA - TIM - 1092,L2-FPR-105 Not Adequately Addressed in the L3 SFS,3,"It appears that the intent of the L2 is to state that a failure in one instrument shall not cause permanent loss of data from the other science instruments. The single linked L3 constrains the L2 requirement to just the FC instruments. If the intent of the L2 applies to all instruments, then the linked L3 is incomplete. Referenced Requirements: [L2-FPR-105] No single failure of a science instrument shall cause permanent loss of data of the other science instrument data. [L3-PSR-123] The FC system shall be block redundant, such that no single fault will compromise the functionality or performance of both FCs.",6/6/04ProjectA - TIM - 1091,L2-FPR-100 Not Adequately Addressed in the L3 SFS,2,"The L2 requires that FP be executed all times following its initialization. The single linked L3 states that, ""-- all monitors ---"". Unless the term ""monitors"" also includes all other C&DH FP functions (e.g., FP responses), then the L3 requirement does not fully respond to the parent L2. In addition, it was stated at the FP CDR that all TMONs are disabled when FP responds to a fault. If this is true, then the intent of the L2 is not met. Referenced Requirements: [L2-FPR-100] Spacecraft Fault Protection shall be executed by the C&DH and shall be active at all times following its initialization. [L3-SFS-929] Spacecraft FP shall autonomously enable all monitors required for critical unit health and safety including after critical unit resets or boot-ups. Critical unit definition: Components that are required to maintain a power/thermal safe environment allowing operator communication (e.g. CEU, ACE, PDU, HVEA, IRU, RCS, TWTA, SDST).",6/6/04ProjectA - TIM - 1090,L2-FPR-93 Not Adequately Addressed in the L3 SFS,3,"In the linked L3-SFS-909 the term ""Phoenix mode"" is not defined; therefore, it is unclear if the full intent of the L2 is captured in the L3s. The issue here is 'long duration under voltage"". Referenced Requirements: [L2-FPR-93] The ProjectA Project design shall be able to autonomously boot up and safe the spacecraft after long duration undervoltage events assuming no units were thermally damaged. In addition each subsystem shall autonomously configure to a unique, unambiguous, safe, system compatible state [L3-SFS-952] At prime power-on during ground testing or recovery from a severe undervoltage condition that causes components to reset, the Spacecraft EPS components shall autonomously configure to a safe, system compatible state including autonomous activation of down converters and battery charging in an undervoltage state.[L3-SFS-944] Spacecraft C&DH components shall boot and initialize in a systematic, deterministic, and safe manner when required power levels are applied (to switched or unswitched power). [L3-SFS-929] Spacecraft FP shall autonomously enable all monitors required for critical unit health and safety including after critical unit resets or boot-ups. Critical unit definition: Components that are required to maintain a power/thermal safe environment allowing operator communication (e.g. CEU, ACE, PDU, HVEA, IRU, RCS, TWTA, SDST). [L3-SFS-909] The Flight System shall initialize to a safe state following initial powerup, component reset or switch or recovery from Phoenix mode. Safe State: prevent powering previously failed unit, use of actuators while mated, monitor separation and initiate separation sequence and transition to Safe Mode when appropriate.",6/6/04ProjectA - TIM - 1089,L2-FPR-88 Not Adequately Addressed in the L3 SFS,4,There are no linked L3 requirements for this L2 parent. Referenced Requirement: [L2-FPR-88] The spacecraft shall autonomously reduce its momentum if the spacecraft momentum exceeds an emergency momentum threshold.,6/6/04ProjectA - TIM - 1088,L2-FPR-87 Not Adequately Addressed in the L3 SFS,2,"The L2 requires FP status and responses to be logged in ""critically powered memory"". If this data is not stored as required by the L2, then there are no linked L3 requirements that address the L2. (Note: it appears that the FP log stored in the UL card will not survive a power outage, if this is the intent of the L2). L3 SFS-905 contains a TBD. Referenced Requirements: [L2-FPR-87] The S/C fault protection shall log a record of its status and responses in critically powered memory to support subsequent ground diagnosis and evaluation. [L3-SFS-905] The Spacecraft shall maintain a FP log in both UL cards and shall be kept in sync within TBD seconds",6/6/04ProjectA - TIM - 1087,L2-FPR-86 Not Adequately Addressed in the L3 SFS,3,"The L2 requires all pertinent data to be stored in ""critically powered memory"" prior to a reset. The single linked L3 does not address the requirement for ""critically powered memory. L3-SFS-992 uses the term ""exception log"" which is not defined and does not appear in any other FP L3 requirement. If this log is not stored as required by the L2, then there are no linked L3 requirements that address the L2. Note: L3-SFS-650 states, ""The C&DH subsystem shall provide the capability for processor re-initialization after a processor reboot resulting from a cold or warm start"". These terms are not defined in the L3. Referenced Requirements: [L2-FPR-86] The S/C fault protection shall record all pertinent monitor readings and state information to critically powered memory prior to initiating a software-induced processor reset. [L3-SFS-992] The Spacecraft shall store an exception log detailing software processing status in the event of a run-time error causing the flight computer to reset.",6/6/04ProjectA - TIM - 1086,L2-FPR-80 Not Adequately Addressed in the L3 SFS,4,"L2-FPR-80 requires all autonomous actions to be reported in telemetry and recorded in the FP logs. Unless the term ""event"" is synonymous with ""action taken"" L3-SFS-984/982/981/979 are not related to the L2 requirement. If the FP log (contents not defined in this L3) does not contain all autonomous actions taken by FP, then L3-SFS-905 does not correlate with the L2. The minimum message contents stated in L3-SFS-979 does not address response types and therefore the ""response' part of the requirement could be missing. Referenced Requirements: [L2-FPR-80] Any autonomous action taken by S/C Fault Protection shall be reported in S/C telemetry and recorded in the FP logs. [L3-SFS-1013] The Spacecraft Engine shall provide telemetry flagging and time-tagging of short term, anomalous Engine events, for which recovery was automatic. [L3-SFS-990] The Spacecraft shall log telemetry and/or events necessary to indicate that a critical unit has undergone a Power On Reset (POR). [L3-SFS-984] The Spacecraft shall store all Payload System and Engine FP events in mass memory. [L3-SFS-982] The Spacecraft shall store all ACS mode transition and error events in the FP log. [L3-SFS-981] The Spacecraft shall store all FP event messages in the FP log. [L3-SFS-979] Spacecraft FP shall generate messages for every significant event observed (by UL or OBC monitors) and for every subsequent response. The message shall include at a minimum the monitor id, threshold, and monitor value. [L3-SFS-905] The Spacecraft shall maintain a FP log in both UL cards and shall be kept in sync within 10 messages. The number of messages shall be modifiable by table load. [L3-SFS-903] The Spacecraft shall clearly indicate mode transitions in telemetry and provide indication of Safe Mode entry to required subsystems and assemblies.",6/6/04ProjectA - TIM - 1085,L2-FPR-79 Not Adequately Addressed in the L3 SFS,3,"The intent of the L2 seems to be the generation of a TLM report that contains specific data pertaining to Safe Mode entry and major events that occurred during Safe Mode. If this implies that the FSW must collect and store specific time correlated data that it would not otherwise do without special commanding, then the linked L3s does not capture the intent of the L2. This data must be collected automatically --------------------------------------- L2-FPR-79 On ground command, the S/C shall generate a telemetry report containing data just prior to and during Safe Mode entry, the current S/C state, and major events within Safe Mode execution. /ProjectA/L3 - Spacecraft and Flight System Requirements Document D-25870: Object L3-SFS-986. Object Text: The Spacecraft FP monitored telemetry shall be stored in spacecraft mass memory (DRAM) for later transmission. /ProjectA/L3 - Spacecraft and Flight System Requirements Document D-25870: Object L3-SFS-985. Object Text: The Spacecraft FP log shall be downlinked during every pass, shall have priority in the operational selection of downlink data, and shall have the ability to be re-transmitted. /ProjectA/L3 - Spacecraft and Flight System Requirements Document D-25870: Object L3-SFS-984. Object Text: The Spacecraft shall store all Payload System and Engine FP events in mass memory. /ProjectA/L3 - Spacecraft and Flight System Requirements Document D-25870: Object L3-SFS-982. Object Text: The Spacecraft shall store all ACS mode transition and error events in the FP log. /ProjectA/L3 - Spacecraft and Flight System Requirements Document D-25870: Object L3-SFS-981. Object Text: The Spacecraft shall store all FP event messages in the FP log.",6/6/04ProjectA - TIM - 1084,L2-FPR-78 Not Adequately Addressed in the L3 SFS,4,"The linked L3s do not include the L2 requirement that high water marks be cleared by a dedicated command. In addition, it is unclear whether the L3s fully respond to the timing requirements: continuously, periodically, by sequenced command. Referenced Requirements: [L2-FPR-78] Input data used by S/C Fault Protection shall have high water marks downlinked in engineering telemetry or via memory readout, continuously on a periodic basis, or by sequenced command, and be clearable by a dedicated command. Definition: High Water Marks (HWM) are the recorded maximum value of a fault protection monitor input data. It can also cover low water marks for items that are negative or are nominally at non-zero values (i.e. temperature, wheel torque etc...) [L3-SFS-989] The Spacecraft FP shall store a log of hi/low water marks for data being monitored which can be downlinked in real time telemetry. [L3-SFS-986] The Spacecraft FP monitored telemetry shall be stored in spacecraft mass memory (DRAM) for later transmission. [L3-SFS-985] The Spacecraft FP log shall be downlinked during every pass, shall have priority in the operational selection of downlink data, and shall have the ability to be re-transmitted.",6/6/04ProjectA - TIM - 1083,L2-FPR-77 Not Adequately Addressed in the L3 SFS,4,There are no linked L3 children for this L2 requirement. Referenced Requirement: [L2-FPR-77] Input data used by S/C Fault Protection shall be downlinked in engineering telemetry on a periodic basis.,6/6/04ProjectA - TIM - 1081,L2-FPR-72 Not Adequately Addressed in the L3 SFS,3,"The L2 requires ""all hardware and software configuration actions --- to be reversible by ground command"". L3-SFS-923 just states ""irreversible configurations"" and therefore is not specific in stating ""all hardware and software configurations"". In addition, if FP happened (through an error) to create a specific hardware or software configuration, the L2 parent states that this action must be ""reversible by ground command"". L3-PSR-330 fully responds to the L2 requirement; however, it is only applicable to the payload system. Since the payload system is specifically identified, it is unclear if this requirement should be imposed on the Engine, as well. Referenced Requirements: [L2-FPR-72] All hardware and software configuration actions taken by all Flight System Fault Protection responses shall be reversible by ground command. [L3-SFS-923] The Spacecraft FP responses shall not initiate irreversible configurations (array deployment is considered normal operational event). [L3-SFS-922] The Spacecraft shall execute any ground commands it receives while FP responses are in progress, and after responses are complete. [L3-PSR-330] All hardware and software configuration actions taken by all Payload System Fault Protection responses shall be reversible by ground command.",6/6/04ProjectA - TIM - 1080,L2-FPR-71 Not Adequately Addressed in the L3 SFS,4,"The payload system is specifically identified in L3-PSR-329 as being linked to this parent L2. Given this, it is unclear if the Engine should be linked as well. Referenced Requirements: [L2-FPR-71] Flight System Fault Protection shall allow ground operators to enable any previously disabled individual test or response. [L3-SFS-978] Spacecraft FSW FP monitors and responses shall be individually enabled and disabled via command. [L3-SFS-977] Spacecraft FP software response enable defaults and sequence contents shall be in-flight modifiable via commands, table, or parameter loads. [L3-SFS-976] Spacecraft FSW FP monitor enable defaults, threshold trigger values, persistence and responses shall be run-time modifiable by in-flight commands, table or parameter uploads.[L3-PSR-329] Payload System Fault Protection shall allow ground operators to enable any previously disabled individual test or response.",6/6/04ProjectA - TIM - 1079,L2-FPR-70 Not Adequately Addressed in the L3 SFS,3,"The first four linked L3s do not address the L2 requirement for ""-in such a way that it cannot be autonomously re-enabled"". L3-PSR-328 links the L2 to the payload system but not to the S/C FP as implied by the L2. The full intent of the L2 is not captured in any of the linked L3s. Referenced Requirements: [L2-FPR-70] Flight System Fault Protection shall allow ground operators to disable any previously enabled individual test or response, in such a way that it cannot be autonomously re-enabled. [L3-SFS-1004] Spacecraft Engine autonomous functions shall be capable of being enabled or disabled by ground command. [L3-SFS-977] Spacecraft FP software response enable defaults and sequence contents shall be in-flight modifiable via commands, table, or parameter loads. [L3-SFS-976] Spacecraft FSW FP monitor enable defaults, threshold trigger values, persistence and responses shall be run-time modifiable by in-flight commands, table or parameter uploads. [L3-SFS-969] The Spacecraft shall be designed to allow the ground to generate and upload FSW monitors and autonomous responses. [L3-PSR-328] Payload System Fault Protection shall allow ground operators to disable any previously enabled individual test or response, in such a way that it cannot be autonomously re-enabled.",6/6/04ProjectA - TIM - 1078,L2-FPR-69 Not Adequately Addressed in the L3 SFS,4,"None of the linked L3 identifies the L2 requirement to, ""disable"" monitors and responses. Also it is unclear in L3-SFS-976 & 977 if the term ""response enable defaults"" is the same as ""enable responses"". [L3-SFS-936] It is unclear why only the ACS function is linked to this L2. It gives the impression that there is something different about ACS thresholds and persistence being modified in this case - the other FSW functions containing monitors are not mentioned. Referenced Requirements: [L2-FPR-69] All software fault protection shall have monitor and response enable and disables, threshold trigger values, and persistences. In addition, fault protection parameters that may have to be changed shall be run-time modifiable by in-flight commands, table or parameter uploads. [L3-SFS-977] Spacecraft FP software response enable defaults and sequence contents shall be in-flight modifiable via commands, table, or parameter loads. [L3-SFS-976] Spacecraft FSW FP monitor enable defaults, threshold trigger values, persistence and responses shall be run-time modifiable by in-flight commands, table or parameter uploads. [L3-SFS-969] The Spacecraft shall be designed to allow the ground to generate and upload FSW monitors and autonomous responses. [L3-SFS-936] All Spacecraft ACS performance and component monitor thresholds and persistence shall be in-flight modifiable via commands or table/parameter loads.",6/6/04ProjectA - TIM - 1077,L2-FPR-66/67/68 Not Adequately Addressed in the L3 SFS,2,"There are no linked L3 requirements for the following L2s: [L2-FPR-66] The ProjectA FP design parameter selection shall take into consideration mass properties effects throughout the mission. [L2-FPR-67] Spacecraft Autonomous fault protection enable/ disable strategy, threshold trigger values, and persistence values shall be established considering mission phase applicability and operational activity and shall be documented in the FP design note. [L2-FPR-68] The enable/disable, threshold, and persistence values shall be selected to ensure safety but not hair triggered to cause inadvertent F/P entry/ execution, but not too loose as to cause unnecessary extreme FP responses.",6/6/04ProjectA - TIM - 1076,L2-FPR-65 Not Adequately Addressed in the L3 SFS,3,"The L2 identifies Safe Mode. L3-SFS-902 - Item (2) in this requirement is not consistent with the L2 parent (exit from Safe Mode can only be accomplished through ground commands). None of the linked L3 children address the need to maintain operation of critical components (e.g., CEU, ----). L3-SFS-897 - The topic of this L3 is preventing solar array deployment during launch and separation. It is unclear how this relates to the definition of Safe Mode. Referenced Requirements: [L2-FPR-65] PIP 11.5.1.3 Spacecraft Operations: Safe Mode - In Safe Mode, the fault protection system shall put the spacecraft in a safe, quiescent, ground commandable state transmitting, a downlink signal. This safe state is achieved by shedding noncritical loads (including Engine), maintaining the solar arrays perpendicular to the sun, and awaiting ground commands. Exit from Safe Mode can only be accomplished through ground commands to return to normal operations, after the anomaly has been identified and the resumption of operations is verified to be safe. Note: A safe state is a state in which the spacecraft thermal condition and inertial orientation are stable, the spacecraft is commandable and is transmitting a downlink signal, and requires no immediate commanding to ensure spacecraft health and safety. Critical units/loads definition: Components that are required to maintain a power/thermal safe environment allowing operator communication (e.g. CEU, ACE, PDU, HVEA, IRU, RCS, TWTA, SDST).] [L3-SFS-908] No single failure of the Flight System shall permanently prevent the spacecraft from meeting any of its Level 2 pointing control requirements. [L3-SFS-906] The Spacecraft shall be capable of communicating with the ground station in any mode following any single fault. [L3-SFS-904] No single fault in the Flight System shall preclude use of and entry to Safe Mode from any other mission mode. [L3-SFS-902] The Flight System shall not exit Safe Mode until either (1) Normal operations entry is initiated by ground command, or (2) A subsequent fault results in flight computer reset/swap [L3-SFS-901] The Flight System Safe Mode shall provide the capability to communicate with the ground via at least one LGA for at least 58 days at any point in the mission with no MOS intervention. [L3-SFS-900] The Flight System Safe Mode shall maintain the Spacecraft in a power positive, thermally safe configuration by orienting the S/C +X-axis to within 8 deg (TBR) of the sun line for at least 58 days at any point in the mission with no MOS intervention. [L3-SFS-899] The Spacecraft FP design will include transition to Safe Mode for a minimum of the following failure modes: . ACS performance degradation (attitude solution, pointing ability, rate/momentum) . EPS performance degradation (array current, bus voltage, battery charge) . CDH functional degradation (OBC software, critical unit hardware, 1553 data bus) . Telecom functional loss (command timeout) [L3-SFS-898] The Flight System shall utilize a Safe Mode of operation allowing the following functions for at least 58 days with a goal of being indefinitely stable: . OBC control of spacecraft subsystems . ACS control to sun pointing (pseudo-inertial fixed position) . Solar arrays fixed position . Telecommand paths active (uplink/downlink) . Send safe notification to instruments/Engine . Shed non-critical loads to maintain spacecraft health . Maintain active FP for powered components and subsystem performance [L3-SFS-897] No single fault of the Spacecraft shall allow either solar array to deploy prematurely during launch and separation (before spindown).",6/6/04ProjectA - TIM - 1075,L2-FPR-64 Not Adequately Addressed in the L3 SFS,4,"The L2 uses the term “failure”. The linked L3 uses the term “fault”. The FP Performance Specification defines these terms. They are not defined in the L2 or the L3. If they are not the same (and they are not as defined in the FP Performance Specification), then the L3 is not consistent with the L2. ------------------------------------- L2-FPR-64 After launch vehicle separation, no single failure of the S/C shall cause the S/C to keep its attitude control system idle. /ProjectA/L3 - Spacecraft and Flight System Requirements Document D-25870: Object L3-SFS-904. Object Text: No single fault in the Flight System shall preclude use of and entry to Safe Mode from any other mission mode.",6/6/04ProjectA - TIM - 1074,L2-FPR-63 Not Adequately Addressed in the L3 SFS,2,"The intent of the L2 is to prevent a single failure from causing the S/C to activate its attitude control system before launch vehicle separation. If a single failure results in a power up or electronic assembly reset, then the linked L3 seems to address the L2 requirement. However, a failure could result in actions other than ""initialization upon power-up or a reset ---"", therefore, the linked L3 does not fully address the intent of the L2. The L3 does not address the full scope of the parent L2. Referenced Requirements: [L2-FPR-63] No single failure shall cause the S/C to activate its attitude control system before launch vehicle separation. [L3-SFS-896] The Flight System shall initialize, upon powerup or reset of any electronic assemblies, to a state which does not violate any safety constraints for ATLO and Launch.",6/6/04ProjectA - TIM - 1073,L2-FPR-62 Not Adequately Addressed in the L3 SFS,2,"The intent of the L2 is to ""provide redundant detectors to determine initiation or termination of critical events"". The linked L3 focuses on processor resets during mission-critical events. The L3 does not address the intent of the L2. Referenced Requirements: [L2-FPR-62] When a mission critical event (e.g. Solar Array Deployment) requires initiation or termination via autonomous event detection, physically or functionally redundant event detectors shall be used to guard against either .false negative. or .false positive. indications from a single detector. [L3-SFS-974] The Spacecraft FSW shall be designed to accommodate processor resets during mission-critical events, such as launch and solar array deployments.",6/6/04ProjectA - TIM - 1072,L2-FPR-61 Not Adequately Addressed in the L3 SFS,2,"The focus of the L2 is, ""no single fault --- shall prevent solar array deployment"". L3-SFS-950 addresses only failures in arming and firing circuits and redundant electrical firing mechanisms. L3-SFS-909 focuses on Safe Mode and therefore does not consider faults that could prevent solar array deployment. The linked L3s do not fully address the intent of the L2. Referenced Requirements: [L2-FPR-61] No single fault during or after launch shall prevent the solar array deployment (i.e. in C&DH, ACE, EPS) [L3-SFS-950] The Spacecraft shall have primary and redundant arming and firing circuits and redundant electrical firing mechanisms for each deployment tiedown to ensure solar array deployment. [L3-SFS-909] The Flight System shall initialize to a safe state following initial powerup, component reset or switch or recovery from Phoenix mode. Safe State: prevent powering previously failed unit, use of actuators while mated, monitor separation and initiate separation sequence and transition to Safe Mode when appropriate.",6/6/04ProjectA - TIM - 1071,L2-FPR-60 Not Adequately Addressed in the L3 SFS,3,"The intent of the L2 seems to be, ""ensure solar array deployment occurs under adverse conditions, e.g., an under voltage or OBC swap"". L3-SFS-974 addresses processor resets, not cold undervolt or swaps. L3-SFS-904 focuses on Safe Mode. Apparently, Safe Mode entry assumes that the solar arrays are deployed. It appears that none of the linked L3 children satisfy the intent of the parent L2. Referenced Requirements: [L2-FPR-60] The ProjectA Solar array deployment shall be able to performed from a EEPROM load (i.e. tolerant to an undervolt or OBC processor swap) [L3-SFS-974] The Spacecraft FSW shall be designed to accommodate processor resets during mission-critical events, such as launch and solar array deployments. [L3-SFS-904] No single fault in the Flight System shall preclude use of and entry to Safe Mode from any other mission mode.",6/5/04ProjectA - TIM - 1070,L2-FPR-59 Not Adequately Addressed in the L3 SFS,3,"L3-SFS-2166 does not include the L2 requirement for a partial solar array deployment (partial in this case means one array is only partially extended). It is unclear why L3-SFS-974 is linked to this L2 because it focuses on processor resets and does not address nominal deployment or single failed or partial solar array deployments. Referenced Requirements: [L2-FPR-59] The spacecraft shall be power-safe, thermal-safe, controllable, commandable and provide downlink for: 1) a nominal deployment sequence. 2) a single failed or partial solar array deployment. Note: a nominal separation and both solar arrays failed to deploy is not covered because it is a 2 fault scenario and as such is beyond the single point failure requirement [L3-SFS-2166] The Spacecraft shall autonomously attain a Safe Mode of operation following a nominal launch vehicle separation with one or both solar arrays deployed. [L3-SFS-975] The Spacecraft FSW shall support predefined critical operations autonomously, including separation events (rate null, deployment, sun acquisition). [L3-SFS-974] The Spacecraft FSW shall be designed to accommodate processor resets during mission-critical events, such as launch and solar array deployments.",6/5/04ProjectA - TIM - 1069,L2-FPR-57 Not Adequately Addressed in the L3 SFS,3,"The subject of this L2 is ""fault protection responses (to faults that occur) during mission critical events"". L3-SFS-975 addresses supporting critical operations but does not mention fault responses. L3-SFS-974 only addresses processor resets during critical events (does not include all faults). L3-SFS-909 does not address fault response during critical events. None of the three linked L3s fully reflect the intent of the L2. Referenced Requirements: [L2-FPR-57] During time critical mission events (i.e. launch, separation, solar array deployments and initial sun acquisition), the flight fault protection response shall autonomously re-establish the needed spacecraft functionality to permit successful completion of the mission critical event. [L3-SFS-975] The Spacecraft FSW shall support predefined critical operations autonomously, including separation events (rate null, deployment, sun acquisition). [L3-SFS-974] The Spacecraft FSW shall be designed to accommodate processor resets during mission-critical events, such as launch and solar array deployments. [L3-SFS-909] The Flight System shall initialize to a safe state following initial powerup, component reset or switch or recovery from Phoenix mode. Safe State: prevent powering previously failed unit, use of actuators while mated, monitor separation and initiate separation sequence and transition to Safe Mode when appropriate.",6/5/04ProjectA - TIM - 1068,L2-FPR-56 Not Adequately Addressed in the L3 SFS,3,"The L2 states that processor resets are to be accommodated during mission critical events such as launch and solar array deployments. The single linked L3 only addresses solar array deployment (and it focuses on not allowing solar array deployment). It is assumed that within the set ""no single fault"" there could be faults that result in a processor reset (the subject of the L2). In addition, launch vehicle separation and initial sun acquisition are critical events (according to L2-FPR-57) that are not specifically mentioned in the linked L3. Referenced Requirements: [L2-FPR-56] Flight software shall be designed to accommodate processor resets during mission-critical events, such as launch and solar array deployments. [L3-SFS-897] No single fault of the Spacecraft shall allow either solar array to deploy prematurely during launch and separation (before spindown).",6/5/04ProjectA - TIM - 1067,L2-FPR-52 Not Adequately Addressed in the L3 SFS,2,"The L2 requirement is to, ""use physically or functionally redundant error detectors to guard against false indications from a single sensor"". The intent of the L2 is not captured in the single linked L3. The L3 omits the need for extra detectors to guard against FP false alarms that could result in severe responses. Just range checking to detect failed or corrupted sensor data does not meet the intent of the L2. Referenced Requirements: [L2-FPR-52] When an autonomously detected error causes a severe response (e.g. downlink loss, irreversible hardware swaps, autonomously irreversible hardware swaps for critical units, large use of expendables), physically or functionally redundant error detectors shall be used to guard against .false positive. indications from a single detector. Critical units definition: Components that are required to maintain a power/thermal safe environment allowing operator communication (e.g. CEU, ACE, PDU, HVEA, IRU, RCS, TWTA, SDST).] [L3-SFS-973] The Spacecraft FP shall perform range checking to detect failed or corrupted sensor data where redundant sensors are used.",6/5/04ProjectA - TIM - 1066,L2-FPR-50 Not Adequately Addressed in the L3 SFS,3,"Discussions that occurred during the FP CDR and during the EngCntrl SRR seemed to indicate that the S/C is responsible for Engine component redundancy management. L3-SFS-976/977 are concerned with ""modifying"" parameters, etc. L3-SFS-926 address use of redundant units but it is unclear if this pertains to the Engine. The need to provide for Engine software uploads is not mentioned in the linked L3s. Referenced Requirements: [L2-FPR-50] The Spacecraft shall have no autonomous redundancy management for the Engine system, though not preclude it for post launch FSW uploads, with the exception of any DS1 heritage internal EngCntrl Fault Protection on the Engine feed system. This is to minimize fault protection complexity in the EngCntrl and OBC. [L3-SFS-977] Spacecraft FP software response enable defaults and sequence contents shall be in-flight modifiable via commands, table, or parameter loads. [L3-SFS-976] Spacecraft FSW FP monitor enable defaults, threshold trigger values, persistence and responses shall be run-time modifiable by in-flight commands, table or parameter uploads. [L3-SFS-926] The Spacecraft FP shall autonomously use redundancy for critical units where autonomy shall be limited by the number of thresholds and design of fault response progression.",6/5/04ProjectA - TIM - 1065,L2-FPR-49 Not Adequately Addressed in the L3 SFS,3,"It is unclear if the L2 requirement is correct. For example, there should be a ""manager"" that decides if a FC has failed and switches operation over to the back-up unit (unless the ground has complete responsibility for switching to the back-up). Neither of the two linked L3s address the intent of the L2, in fact just the opposite, as L3-SFS-926 requires the use of redundancy (but it is unclear if 926 pertains to the instruments). Referenced Requirements: [L2-FPR-49] The Spacecraft shall have no autonomous redundancy management for the science instruments. [L3-SFS-926] The Spacecraft FP shall autonomously use redundancy for critical units where autonomy shall be limited by the number of thresholds and design of fault response progression. [L3-SFS-889] Spacecraft FP shall detect system-level anomalies, based on predetermined performance thresholds, and take autonomous corrective action when necessary to keep the Spacecraft in a power-positive, thermally safe, commandable state.",6/5/04ProjectA - TIM - 1064,L2-FPR-47 Not Adequately Addressed in the L3 SFS,2,"The intent of the L2 is to allow FP actions to be ""autonomously reversible"" for critical units. None of the five linked L3s address this intent. L3-SFS-920 states that the OBC can be changed up to three times but this requirement does not address the other critical units identified in the L2. Also, it does not state that this is done autonomously. Referenced Requirements: [L2-FPR-47] Any autonomous redundancy management for critical units shall be autonomously reversible, but shall be limited by counters or by the design of the fault response progression (i.e. low level to high level swaps). Critical units definition: Components that are required to maintain a power/thermal safe environment allowing operator communication (e.g. CEU, ACE, PDU, HVEA, IRU, RCS, TWTA, SDST, WTSs).] [L3-SFS-929] Spacecraft FP shall autonomously enable all monitors required for critical unit health and safety including after critical unit resets or boot-ups. Critical unit definition: Components that are required to maintain a power/thermal safe environment allowing operator communication (e.g. CEU, ACE, PDU, HVEA, IRU, RCS, TWTA, SDST). [L3-SFS-926] The Spacecraft FP shall autonomously use redundancy for critical units where autonomy shall be limited by the number of thresholds and design of fault response progression. [L3-SFS-921] In the event of a persistent fault the Spacecraft FP monitor/response system shall prevent infinite loops and exhaust its response after a reasonable number of tries [L3-SFS-920] The Spacecraft FP shall be able to have its 'prime' OBC changed up to three times per FP event (e.g. OBC A-B-A-B) Definition: an FP event is a single fault, SEU, operator error or accidental FP trip OR a single fault, plus a non-simultaneous SEU, operator error or accidental FP trip.",6/5/04ProjectA - TIM - 1063,L2-FPR-43 Not Adequately Addressed in the L3 SFS,3,"The L2 addresses the need for multiple signatures to identify certain types of faults. The linked L3 does not address multiple signatures but rather focuses on ""system level anomalies"" as if this term is equivalent to ""multiple signatures"". For this reason the single linked L3 does not capture the intent of the L2 requirement. Referenced Requirements: [L2-FPR-43] The FP system shall be designed to autonomously recognize sets of symptoms stemming from any single failure when a fault can only be recognized by multiple signatures. Note some faults can be waived if it can be shown that high-level fault protection can mitigate the problem. [L3-SFS-889] Spacecraft FP shall detect system-level anomalies, based on predetermined performance thresholds, and take autonomous corrective action when necessary to keep the Spacecraft in a power-positive, thermally safe, commandable state.",6/4/04ProjectA - TIM - 1062,L2-FPR-39 Not Adequately Addressed in the L3 SFS,2,"None of the linked L3s include the L2 requirement ""--and shall be demonstrated (by analysis) to be free of deadlocks."", i.e., the (by analysis) is missing. [L3-SFS-988 does not state that, ""suspending execution of stored command sequences"" will ""preclude collisions."" [L3-SFS-970] This L3 deals with ""missing inputs"" and therefore it is unclear how it directly correlates to ""precluding collisions"". [L3-SFS-925] It is unclear that the ""system design"" can prevent deadlocks. This requirement seems to rely on an existing ""design"" in a way that the result will be as stated in the L2 (the L2 requirement is not used to drive the L3 requirements/design). Referenced Requirements: [L2-FPR-39] The FP system design shall preclude the collision of overlapping fault responses and shall be demonstrated (by analysis) to be free of deadlocks. Definition: A deadlock is the condition where two processes cannot proceed because they both simultaneously require the exclusive use of shared resources held by one another. [L3-SFS-988] Spacecraft FP responses shall suspend execution of programmed, on-board stored command sequences when this becomes necessary, where the termination event will be recorded in telemetry. [L3-SFS-970] The Spacecraft FP monitors shall be designed to tolerate and continue functioning in situations where inputs are temporarily missing and respond accordingly. [L3-SFS-925] The Spacecraft FP responses shall be configured to use the system design such that no deadlock occurs (e.g. aborting VML commanding, command timing to dedicated components, etc.) [L3-SFS-917] All Flight System FP responses allocated to hardware shall not conflict with software fault modes of spacecraft operation.",6/4/04ProjectA - TIM - 1061,L3 SFS requirements need rephrasing for added clarity,5,"Requirements L3-SFS-780 thru 786 in the Spacecraft & Flight Systems Requirements Document are single phrases which should all become full sentences. The phrases are as follows: ""Issue any command in the Command and Telemetry Dictionary"" ""Call a function"" ""Spawn a function"" ""Branch to another instruction anywhere with the same function"" ""Assign expression values to variables"" ""Terminate a thread of execution"" ""Load a module onto a virtual machine"" There are two ways of handling this problem. The first is exactly like it is worded in the FGICD 3.1.1.1(6) with the introductory phrase: ""The Flight System shall be capable of the following:"". After this phrase, the requirements above are enumerated as steps (a) thru (g). The introductory phrase in L3-SFS-779 does not qualify as a cure to this problem because that phrase does not have a colon and the requirements below it are not sub-enumerated. The second way of handling this problem is to have a phrase in front of each of the above requirements such as: ""The Flight Software shall have the capability to"".",6/2/04ProjectA - TIM - 1060,L2-PRD-582 not satisfied by L3-SFS-707,2,"1. L2-PRD-582 specifies that the spacecraft shall be able to report onboard RCS and Engine thruster activity with specific uncertainties. L3-SFS-707 is the only requirement in the L3 SCFSRD that is linked as a child requirement to L2-PRD-582. L3-SFS-707 does not specify what activities will be reported on, or how the data for the activities will be generated, or to what accuracy the data will be generated. L2-PRD-582 is not satisfied by L3-SFS-707. Additional L3 SCFSRD requirements are needed to satisfy the functionality described in L2-PRD-582. 2. The ""be"" in L3-SFS-707 should be deleted. Referenced Requirements: [L2-PRD-582] Allocation: The Spacecraft System shall be able to report onboard RCS and Engine thruster activity with uncertainties of less than 2 mm/sec (1 sigma) over 5 minutes, and 2 cm/sec (1 sigma) in 1 day. [L3-SFS-707] The Flight Software shall be support telemetry required to report onboard RCS and Engine thruster activity to the MOS.",6/2/04ProjectA - TIM - 1059,L2-FPR-37 Not Adequately Addressed in the L3 SFS,2,"Neither of the two linked L3s addresses the requirement for a ""response tier architecture that shall always flow up to a higher level response""; hence, the L2 requirement is not captured in the L3. L3-SFS-921 may imply that the FP design shall use a ""tiered architecture"" but it is not specifically stated. Referenced Requirements: [L2-FPR-37] The ProjectA spacecraft autonomous response tier architecture shall always flow up to a higher level response. [L3-SFS-921] In the event of a persistent fault the Spacecraft FP monitor/response system shall prevent infinite loops and exhaust its response after a reasonable number of tries [L3-SFS-889] Spacecraft FP shall detect system-level anomalies, based on predetermined performance thresholds, and take autonomous corrective action when necessary to keep the Spacecraft in a power-positive, thermally safe, commandable state.",6/2/04ProjectA - TIM - 1058,L2-PRD-233: Missing requirement links to L3 SCFSRD requirements,3,"The Project Requirements Document states in requirement L2-PRD-233: ""The Flight System shall telemeter information that is sufficient to estimate the remaining hydrazine mass to within 10kg or 5%, whichever is smaller"". This requirement is not linked to any requirement in the L3 Spacecraft & Flight Systems Requirements Document. It appears that this requirement should be linked to L3-SFS-147 and L3-SFS-489. In addition, a software requirement may need to be added to address collection and telemetry of the necessary information to perform the estimate. Referenced Requirements: [L2-PRD-233] Allocation: The Flight System shall telemeter information that is sufficient to estimate the remaining hydrazine mass to within 10 kg or 5%, whichever is smaller. [L3-SFS-147] The ACS shall monitor the on time of each thruster for use in determining the delivered impulse and relative hydrazine consumption. [L3-SFS-489] Telemetry data necessary for on-ground residual propellant evaluation shall be provided. An established method for residual propellant measurement shall also be provided. It shall be possible to determine the amount of on-board propellant to an accuracy of less than or equal to 2 kg during ground processing and all times during the mission.",6/2/04ProjectA - TIM - 1056,L2-FPR-33 Not Adequately Addressed in the L3 SFS,3,"Both the L2 and the linked L3 point to the FP Design Note for constraint definition, and the L2 points to instrument UIRDs for the same definitions. During the FP CDR it was stated that the FP Design Note is in reality the FP Performance Specification. In any event, there is the potential that the constraints may be omitted or incorrect due to the referencing. In addition, splitting the requirements between multiple documents can create CM problems. This L2 requirement focuses on ""shall not permit its attitude to violate ---"". L3-SFS-924 addresses safing actions ""if a violation occurs"". Hence, the L3 does not address the intent of the L2. L3-SFS-913 addresses ""impending power down"" and, therefore, seems to be totally disconnected from the L2. Referenced Requirements: [L2-FPR-33] At all times between initial attitude acquisition and the end of the mission, the spacecraft shall not permit its attitude to violate the sun intrusion keepout zone requirements of any component when the Spacecraft is under active control. Note: It is expected that when the spacecraft loses attitude knowledge or control, it will be far enough away from any sun intrusion keepout zone to avoid damage until safe protective measures can be taken. Note: Flight and Ground Sun constraints are documented in the FP Design Note (ProjectA-DN-SE-002) which reference the VIR and Framing Camera UIRDs for instrument sun constraint information. [L3-SFS-924] The Spacecraft FP shall monitor sun angle and take necessary safing actions if a violation occurs (including safing components and FS configuration). NOTE: constraints are documented in the FP Design Note (ProjectA-DN-SE-002). [L3-SFS-913] The Spacecraft shall inform the necessary Flight System components (Payload and Engine) of an impending power down prior to power off when possible.",6/2/04ProjectA - TIM - 1055,L2-FPR-32 Not Adequately Addressed in the L3 SFS,4,"The linked L3s point to the FP Design Note for constraint definition which in turn point to instrument UIRDs. During the FP CDR it was stated that the FP Design Note is in reality the FP Performance Specification. In any event, there is the potential that the FP Design Note may overlook these constraints. In addition, splitting the requirements between multiple documents can create CM problems. Referenced Requirements: [L2-FPR-32] No single Spacecraft failure, SEU, operator error or accidental FP trip shall cause sun exposure damage to susceptible components (e.g. instruments). [L3-SFS-924] The Spacecraft FP shall monitor sun angle and take necessary safing actions if a violation occurs (including safing components and FS configuration). NOTE: constraints are documented in the FP Design Note (ProjectA-DN-SE-002). [L3-GS-722] At all times between initial attitude acquisition and the end of the mission, the MOS shall ensure that the Flight System is not commanded any closer to the sun that the MOS keep out zones as defined in the FP Design Note (ProjectA-DN-SE-002) which references the VIR and Framing Camera UIRDs for instrument sun constraint information. [L3-GS-106] The ground segment shall design and check each sequence and each realtime command to ensure that flight rules and constraints are not violated",6/2/04ProjectA - TIM - 1054,L2-FPR-31 Not Adequately Addressed in the L3 SFS,3,"The L2 requires ""fault containment regions to prevent a single fault from impacting functionality or preventing use of multiple units or subsystems"". Three of the linked L3s specifically focus on storage, collection and distribution of science instrument and data. L3-SFS-887 only specifies the existence of ""fault containment regions around specific components"". The L3 has lost some of the specificity of the L2 in that it does not state, ""prevent a single fault from impacting ---"". Verification that ""fault containment regions"" exist can be done by inspection. Verification that there is fault containment (prevention from impacting) is another story and must be shown by testing and/or analysis. Referenced Requirements: [L2-FPR-31] The ProjectA Project Shall have fault containment regions to prevent a single fault from impacting functionality or preventing use of multiple units or subsystems. [L3-SFS-948] No single failure of the Spacecraft shall prevent the storage of science data for later transmission. [L3-SFS-947] No single failure of the Spacecraft shall prevent the collection of science data from more than one Science Instrument. [L3-SFS-946] No single failure of the Spacecraft shall permanently prevent the distribution of commands to more than one Science Instrument. [L3-SFS-887] The Flight System shall have fault containment regions around each of the following flight system sections: [HW] CEU, ACE, ACE peripherals (reaction wheel, gyro, thruster, sun sensor, SADE/SADA) , SDST, PDU/HVEA, EngCntrl, EngCntrl peripherals (PPU, thruster, gimbal assembly, XFA), and Instruments (FC, VIR, GRaND) - [SW] flight system processors",6/2/04ProjectA - TIM - 1053,L2-FPR-30 Not Adequately Addressed in the L3 SFS,3,"L2-FPR-30 seems to imply that the both the S/C (autonomously) and the MOS are responsible for ""conserving non-renewable resources"". The single linked L3 simply states that, ""the MOS shall analyze ---"". It appears that this L2 requires analysis of the FP design, before launch, to show that the S/C (autonomous FP) and the MOS will ""conserve"". The linked L3 does not address the intent of the parent L2. Referenced Requirements: [L2-FPR-30] The ProjectA Project shall conserve non-renewable resources (e.g., Hydrazine, Xenon, EEPROM writes, ON/OFF cycles, battery cycles, instrument cover cycles etc.,) during autonomous fault responses and during normal operations. [L3-GS-1061] The MOS shall analyze data affecting the utilization of renewable and non-renewable spacecraft resources (e.g. power and temperature cycling, gyro revolutions, reaction wheel de-saturations, momentum, propellant usage, key on/off cycles, actuations).",6/2/04ProjectA - TIM - 1052,L2-FPR-29 Not Adequately Addressed in the L3 SFS,3,"The L2 identifies fixed amounts of Hydrazine and Xenon that can be lost in a worst single event scenario. None of the linked L3's states the specific loss of consumables weight limits. Referenced Requirements: [L2-FPR-29] No single FP event with no ground contact for 58 days shall cause a loss of enough Hydrazine or Xenon propellant to prevent fulfillment of the minimum L1 requirements. Specifically, no more than 5 kg of hydrazine and 10 kg of Xenon shall be consumed in the worst single event scenario. Definition: an FP event is a single fault, SEU, operator error or accidental FP trip OR a single fault, plus a non-simultaneous SEU, operator error or accidental FP trip. [L3-GS-73] The MOS shall develop and maintain contingency plans and recovery procedures for anomalies whose recovery response time would result in a significant threat to the achievement of level 1 requirements. [L3-SFS-1020] The Spacecraft FP shall monitor hydrazine tank pressure to prevent bulk loss of propellant from otherwise undetected leaks below the latch valves. [L3-SFS-1019] The Spacecraft RCS shall be single fault tolerant to all liquid leakage within the scope of the ProjectA SFT Exemption List by use of latch and thrust valve implementation. [L3-SFS-1012] The Spacecraft Engine shall maintain functions required for the Safe State without ground or spacecraft intervention for at least 58 days. [L3-SFS-1011] The Spacecraft Engine shall be capable of maintaining any operational or safe ground commanded state for at least 58 days without damaging components. [L3-SFS-1003] The Spacecraft Engine shall provide all control and monitoring functions required for autonomous Engine operation, relying on the Spacecraft for power, command, thrust vector command and telemetry interfaces. [L3-SFS-1000] The Spacecraft Engine shall be capable of monitoring component faults (EngCntrl, PPU, XFA) and autonomously initiating corrective action.",6/1/04ProjectA - TIM - 1051,FP L2-FPR-20 Requirement Not Adequately Addressed in the L3 SFS,3,"The L2 requirement focuses on the ""quiescent"" radiation environment. L3-SFS-939 addresses ""unexpected large solar flares and less than once per week resets"". Hence, this linked L3 appears to be unrelated to the L2. L3-SFS-927 states that, ""the components will be identified, analyzed and mitigated to minimize S/C safing"". This does not appear to be consistent with the L2: ""the predicted frequency shall be less than 3 years"". If there are say two ""events"" in 3 years, L3-SFS-927 does not constrain the predicted frequency to be less than once per 3 years Referenced Requirements: [L2-FPR-20] The predicted frequency of Safe Mode entry due to S/C single event effects from the quiescent radiation environment (ref ERD JPL D-25841) shall be less than once per 3 years. [L3-SFS-939] The predicted frequency of Spacecraft C&DH resets due to single event effects from an unexpected large solar flare (ref Environmental Requirements Document Doc # JPL D-25841) shall be less than once per week. [L3-SFS-927] Spacecraft components and interfaces with upset rates greater than once per 3 years for the prescribed quiescent environment will be identified, analyzed, and mitigated to minimize S/C safing.",6/1/04ProjectA - TIM - 1050,FP L2-FPR-28 Requirement Not Adequately Addressed in the L3 SFS,2,"The L2 states ""---shall detect and stop the source of anomalous delta V ----"". The three referenced L3 requirements address the ""detect"" part of the requirement, including single fault tolerance to liquid leakage. L3-GS-73 is a MOS requirement that addresses ""maintaining contingency plans and procedures""; however, it does not state that these are loaded in the S/C, are part of the FP recovery process, and together with the other L3 requirements will result in a design that prevents more than 10cm/sec of delta V. L3-SFS-935 contains a TBR-P. The linked L3s do not capture the full intent of the parent L2. Referenced Requirements: [L2-FPR-28] No single FP event of the spacecraft shall impart more than 10cm/sec TBR of delta V during orbit phase to the spacecraft before autonomous fault protection responses shall detect and stop the source of the anomalous delta V. Definition: an FP event is a single fault, SEU, operator error or accidental FP trip OR a single fault, plus a non-simultaneous SEU, operator error or accidental FP trip. [L3-GS-73] The MOS shall develop and maintain contingency plans and recovery procedures for anomalies whose recovery response time would result in a significant threat to the achievement of level 1 requirements. [L3-SFS-1019] The Spacecraft RCS shall be single fault tolerant to all liquid leakage within the scope of the ProjectA SFT Exemption List by use of latch and thrust valve implementation. [L3-SFS-935] The Spacecraft ACS thruster monitor mechanism and threshold shall allow detection of malfunction prior to excessive thrusting resulting in a total delta-V of 10 cm/sec (TBR-P). [L3-SFS-934] The Spacecraft ACS shall monitor commands sent to thrusters under specified conditions to determine if a possible leak is present.",6/1/04ProjectA - TIM - 1048,FP L2-FPR-7 Requirement Not Adequately Addressed in the L3 SFS,3,"The referenced L3 requirements address ""fail safe"" to a general degree. There is no definition of ""critical faults"" or ""specific non-critical faults"" in either the L2-FPR-7 or the linked L3 requirements. Therefore, the L3 requirements do not specifically specify fail safe for critical faults or fail operational or non-critical faults. L3-SFS-1007 seems to imply some form of ""fail operational"". L3-SFS-916 addresses both fail operational and fail safe but only in general terms. L3-SFSA-899 specifies a limited number of failure modes for transitioning to safe mode. The FP CDR Chart #20 states, ""transition to safe modes from most faults"". In addition, when questioned about this subject during the FP CDR (why do most responses to faults seem to be ""fail safe?""), the presenter stated that, ""they have no requirement to fail operational"". Other FP CDR charts seem to indicate a combination of safe mode and other actions (e.g., swap components, etc.). If the intent of L2-FPR-7 is to fail safe for only a defined, limited set of ""critical faults"" and fail operational for all others it appears that the SFS L3 and CDR material are not specific about faults that cause ""fail operational"" versus ""fail safe"". Referenced Requirements: [L2-FPR-7] The ProjectA Spacecraft shall fail safe for critical faults and shall have the ability to fail operational for specific non-critical faults. Definition: critical faults are those that may endanger s/c health if not responded to, where that response interrupts normal operations or impairs execution of future (pre-loaded) operational sequences. [L3-SFS-1007] The Spacecraft Engine shall be capable of automatically clearing designated faults and returning to normal operating conditions if permitted by hardware or software constraints. [L3-SFS-916] The Flight System FP design shall have capability to: . Respond to minor anomalies without interrupting normal operations . Autonomously switch/reset components w/temporary interruption of normal operations . Autonomously abort normal operations and transition to safe state awaiting ground recovery [L3-SFS-915] The Spacecraft shall reduce the Engine thrust setting at least once in response to a selected power level (battery SOC) without aborting the thrust profile. [L3-SFS-904] No single fault in the Flight System shall preclude use of and entry to Safe Mode from any other mission mode. [L3-SFS-899] The Spacecraft FP design will include transition to Safe Mode for a minimum of the following failure modes: . ACS performance degradation (attitude solution, pointing ability, rate/momentum) . EPS performance degradation (array current, bus voltage, battery charge) . CDH functional degradation (OBC software, critical unit hardware, 1553 data bus) . Telecom functional loss (command timeout) [L3-SFS-889] Spacecraft FP shall detect system-level anomalies, based on predetermined performance thresholds, and take autonomous corrective action when necessary to keep the Spacecraft in a power-positive, thermally safe, commandable state.",6/1/04ProjectA - TIM - 1047,FP L2-FPR-6 Requirement Not Adequately Addressed in the L3 SFS,3,"L2-FPR-6 indicates there are two event based critical sequences that are hard coded: separation and solar array deployment. L3-SFS-968 states only ""a critical event"". The referenced L3 requirement does not fully address the L2 requirement. Referenced Requirements: [L2-FPR-6] The ProjectA fault protection design and VML operational sequence engine shall not be required to support any fault tolerant time-based (or time critical) critical sequences other than the hard coded event-based (event critical) separation and solar array deployment sequences. [L3-SFS-968] The Flight System shall not require VML based fault tolerant time-based critical sequences. (the only critical event is hardcoded into the fault design)",6/1/04ProjectA - TIM - 1046,FP L2-FPR-4 Requirement Not Adequately Addressed in the L3 SFS,3,"The intent of the L2 requirement appears to be, ""fault propagation within the unit"", e.g., a fault in Side A of the PDU will not propagate to Side B. If such an event occurred the entire PDU may be ""faulted"" and therefore ""cross strapping"" would not solve the problem. The linked L3 requirements do not address this interpretation of the L2 requirement as they only consider ""redundant components"", ""excess performance or overlapping functions"", ""cross strapping"" and ""fault containment regions"". The identified fault containment regions are, apparently, not internal to either the PDU or HVCE but rather encompass the entire PDU/HVEA. None of the linked L3s reflect the intent of the L2. Referenced Requirements: [L2-FPR-4] The ProjectA project design robustness shall for internally redundant units [PDU, HVEA] include consideration of fault propagation due to collocation of components, e.g., thrusters, adjacent redundant electronic components on the same chip. Rationale: To reduce possibility of catastrophic mission loss or major mission degradation. [L3-SFS-960] The Spacecraft EPS shall contain internally redundant components (PDU/HVEA) that are fully cross strapped to C&DH and applicable spacecraft loads and are isolated by fault containment regions. [L3-SFS-956] The Spacecraft shall provide excess performance or overlapping functions on those components that are not fully redundant. [L3-SFS-887] The Flight System shall have fault containment regions around each of the following flight system sections: [HW] CEU, ACE, ACE peripherals (reaction wheel, gyro, thruster, sun sensor, SADE/SADA) , SDST, PDU/HVEA, EngCntrl, EngCntrl peripherals (PPU, thruster, gimbal assembly, XFA), and Instruments (FC, VIR, GRaND) - [SW] flight system processors",6/1/04ProjectA - TIM - 1045,Incomplete traceability links between L2-PRD-759 and L3 SC&FSRD: Incomplete traceability link to software requirement,5,"The PRD requirement L2-PRD-759 in 9.1.10.3, is linked to L3-SFS-24 in the L3 SCFSRD. L2-PRD-759 should also be linked to L3-SFS-724 since all of the timing events on the spacecraft are handled by software. Referenced Requirements: [L2-PRD-759] Requirement: The ProjectA Project shall be able to control the UTC-relative execution time of a Flight System event to within 5 seconds during science phases. Note: Allocations of this requirement are in the Flight-Ground ICD. [L3-SFS-24] The Flight System shall support control of the UTC-relative execution time of a Flight System event to within 5 seconds during science phases. Note: Allocations of this requirement are in the FGICD. [L3-SFS-724] The Flight Software shall support control the UTC-relative execution time of a Flight System event to within 5 minutes.",4/28/04ProjectA - TIM - 1044,L3-SFS-527 missing from Flight Software section of L3 SC&FSRD,5,"L3-SFS-527 resides in the Ion Propulsion Subsystem section of the L3 SFS. Although this requirement correctly represents a general Engine function, it still needs to be duplicated in the Flight Software section due to the fact that the PRD wording in L2-PRD-235 implies that the requirement is to be implemented by software. As examples of requirements that are duplicated in two different sections, the requirements in paragraphs 1.1.12.2 thru 1.1.12.6 of the ""Systems"" section in the SCFSRD are duplicated as requirements 10.1.16.1 thru 10.1.16.4 in the ""Flight Software"" section. Thus, it appears proper for requirements that have both hardware and software implications to be duplicated in applicable sections. Referenced Requirements: [L3-SFS-527] The Engine shall be capable of measuring the pressure of the xenon storage tank over the entire range of expected pressures. A calibration curve shall be developed to compensate for Xenon properties with an overall goal for the ground to determine the Xenon mass to within 10 kg. [L2-PRD-235] Allocation: The Flight System shall telemeter information that is sufficient to estimate the remaining xenon mass to within 20 kg or 5%, whichever is smaller.",4/28/04ProjectA - TIM - 1043,ProjectA L3 SC&FSRD Rqt: L3-SFS-527 is Inconsistent with Rqt L2-PRD-235,3,"L2-PRD-235 states that the remaining xenon mass should be estimated to ""within 20kg or 5%, whichever is smaller"" whereas the L3-SFS-527 states that this estimate should be ""within 10kg"". Provided the remaining xenon mass is greater than 200kg, the L3 requirement conveys a stricter tolerance than the L2 requirement. However, once the remaining mass drops below 200kg, the 5% tolerance specified by the L2 requirement becomes smaller than the 10kg specified by the L3 requirement. Consequently, under this condition the L2 requirement conveys a stricter tolerance than the L3 requirement. Recommend evaluating these requirements to determine the necessary tolerance to satisfy the mission goals, and then updating the one or both requirements accordingly. Referenced Requirements: [L3-SFS-527] The Engine shall be capable of measuring the pressure of the xenon storage tank over the entire range of expected pressures. A calibration curve shall be developed to compensate for Xenon properties with an overall goal for the ground to determine the Xenon mass to within 10 kg. [L2-PRD-235] Allocation: The Flight System shall telemeter information that is sufficient to estimate the remaining xenon mass to within 20 kg or 5%, whichever is smaller.",4/28/04ProjectA - TIM - 1042,Purpose of the FP Performance Specification,4,"The title of document S912-PF3300 is, FP Performance Specification, yet Section 2. Purpose states, “The purpose of this design note is to document the ProjectA Fault Protection (FP) design and implementation.” Section 1.1 references the Spacecraft and Flight Systems L3 but does not reference the Mode Design Note or the FP Design Note or the SRSs. Section 2.2.3 is titled “Key Level 2 Requirements”, which seems to imply a source of Parent requirements. It is noted that no Spacecraft and Flight System L3 requirements are entered in the FP Performance Specification in the same manner as the L2 requirements. It is unclear why the L3 requirements were omitted as the FP Performance Specification is apparently below the L3 in the ProjectA specification tree.. Section 2.4 is titled, “System Test and Verification” and states, “All the level 3 FP requirements shall be verified by analysis (design notes, fault tree, fault modes and effects), or test (software, test bed, spacecraft) at various levels during the course of the ProjectA program. The test plan for such verification is captured in the released Assembly, Test, Launch, and Operations (ATLO) plan (Ref 4). Table 2-1 provides a system level FP verification matrix referring to FP functions and mechanisms.” Table 2-1 is titled, “System Level FP Verification Plan”. Given the previous information, The purpose of the FP Performance Specification is unclear: (1) It seems to follow the L2 due to the ported requirements, (2) It discusses L3 testing yet the pointer in this section is to a table that addresses system level FP verification, (3) No specific L3 requirements are identified for V&V, (4) the material format is “descriptive” in nature (e.g., describing how various hardware components, etc. function) rather than structured in a “specification” format, e.g., including shalls) and (5) There are no specific requirements in this document that are identified or allocated to a V&V test program.",4/21/04ProjectA - TIM - 1041,Inconsistent Definition of Fault Protection Terminology,4,"This issue concerns use of FP related terminology across the referenced documents. IV&V comments are identified by a *. The remaining material was extracted from the referenced documents. *The ProjectA Fault Protection (FP) Performance Specification S912-PF3300, preliminary version provides the following definitions in Section 2.2.1: ""2.2.1 Definitions There are several common terms applied throughout the requirements and documentation that deserve special attention. They are defined here for clarity. Errors – Single Event Effects (SEE), Flight Software (FSW) coding or handling upsets, unintended monitor trEngine (hair trigger), and out of sequence or inappropriate issue of nominal commands are not considered failures but rather errors that may be transient in nature due to nominal system operations or active FDC responses (e.g. processor or interface reset). Failure – permanent and unrecoverable failure of a subsystem, assembly, or component resulting in anomalous behavior or loss of functionality of that element. Fault – general term encompassing either an error or a failure or both (‘fault scenario’."" *The ProjectA Spacecraft and Flight Systems L3 Requirements Document does not define these terms. *The Spacecraft and Flight Systems L3 Requirements Document, FP Section, uses FP related terms as follows: FP Events “A FP event is a single fault, SEU, operator error or accidental FP trip OR a single fault, plus a non-simultaneous SEU, operator error or accidental FP trip.“ *In this context a “fault” does not appear to encompass an “error” or “trip”, whereas in the the ProjectA Fault Protection (FP) Performance Specification a “fault” includes an “error”. *Use of the term “FP event” seems to be unique to the Spacecraft and Flight Systems L3 as it is not used in the FP Performance Specification, other than in the material copied directly from the L3. *The following uses of the term “FP event” are found in the L3: 11.1.35. The Spacecraft FP shall be able to have its 'prime' OBC changed up to three times per FP event (e.g. OBC A-B-A-B) 11.5.12. S/C FP Event Messages. Spacecraft FP shall generate messages for every significant event observed (by UL or OBC monitors) and for every subsequent response. The message shall include at a minimum the monitor id, threshold, and monitor value. 11.5.14. S/C FP Log - FP Event Storage. The Spacecraft shall store all FP event messages in the FP log. 11.5.17. FS FP Event Storage. The Spacecraft shall store all Payload System and Engine FP events in mass memory. *The following uses of the term ""error"" are found in the L3: 11.1.6. The Flight System FP design shall include hardware and low level flight software monitors such as watchdog timers, fault indicators (e.g., self diagnostics, error logging), error detection and correction systems, etc. for critical component processors. 11.5.15. The Spacecraft shall store all ACS mode transition and error events in the FP log. *The following uses of the term ""failure"" are found in the L3: 11.1.4. The Spacecraft FP design will include transition to Safe Mode for a minimum of the following failure modes: • ACS performance degradation (attitude solution, pointing ability, rate/momentum) • EPS performance degradation (array current, bus voltage, battery charge) • CDH functional degradation (OBC software, critical unit hardware, 1553 data bus) • Telecom functional loss (command timeout) 11.1.23. No single failure of the Flight System shall permanently prevent the spacecraft from meeting any of its Level 2 pointing control requirements. 11.1.25. Spacecraft FP shall respond to all credible 1553 bus failures. 11.1.34. The Spacecraft FP shall be designed to autonomously recognize sets of symptoms stemming from any single failure or fault. 11.3.2. No single failure of the Spacecraft shall permanently prevent the it from being able to decode ground commands for immediate execution to store ground commands for later execution. 11.3.8. No single failure of the Spacecraft shall permanently prevent the distribution of commands to more than one Science Instrument. 11.3.9. No single failure of the Spacecraft shall prevent the collection of science data from more than one Science Instrument. 11.3.10. No single failure of the Spacecraft shall prevent the storage of science data for later transmission. 11.4.4. No single failure of the EPS shall cause the Spacecraft bus voltage to deviate outside the bus voltage specifications, as identified in the GDRD. 11.4.6. No single failure of the Spacecraft shall prevent supplying power to the set of components required to meet the minimum level 1 requirements (use of redundancy in each redundant pair or group of components, e.g. 1 of 2 EngCntrls, 3 of 4 reaction wheels, etc.). 11.4.16. No single failure of the Spacecraft shall prevent the Spacecraft from removing power from an assembly if it will prevent the Minimum Level 1 requirements from being met. 11.7.9. Spacecraft Engine failures shall not propagate to other Spacecraft subsystems. 11.9.1. No single failure of the Spacecraft shall permanently prevent it from meeting the Level 2 telecommunications requirements (i.e. command receipt and telemetering engineering and science data at sufficient rates).",4/21/04ProjectA - TIM - 1040,"SuROM SRS Rqt: SU001 missing details necessary to establish ""safe system configuration""",4,"Issue: SU001 contains the phrase, ""safe system configuration,"" which does not seem to provide sufficient detail to support implementation. The requirement should include details specific to SuROM's responsibility for establishing a safe configuration. Referenced Requirement: [SU001] Flight Computer startup applications shall place the spacecraft into a safe system configuration without any ground intervention following power-up or a temporary power bus fault (cold-boot).",4/21/04ProjectA - TIM - 1039,"C&DH SRS Rqt: missing details necessary to establish ""safe system configuration""",4,"Issue: OS001 contains the phrase, ""safe system configuration,"" which does not seem to provide sufficient detail to support implementation. The requirement should include details specific to the OS's responsibility for establishing a safe configuration. Referenced Requirement: [OS001] Flight Computer startup applications shall place the spacecraft into a safe system configuration without any ground intervention following power-up or a temporary power bus fault (cold-boot).",4/20/04ProjectA - TIM - 1038,Requirement ID SRC-UPC002 associated with two different requirements,4,"Issue: Requirement ID ""SRC-UPC002"" is assigned to two requirement statements within the Uplink Card SRS. One requirement is in Section 5.7.2.1.1.2 & the other is in Section 5.7.2.1.1.1. Referenced U/L Card SRS Rqts: [SRC-UPC002] The Uplink FSW shall write the contents of the HLP Extended Code Field into a hardware defined I/O address prior to writing the HLP command into the HLP Control register if the HLP command is HLP_GRPA_2. [SRC-UPC002] The Uplink FSW shall process the function codes in a Local PCC command in accordance with the following:",4/20/04ProjectA - TIM - 1037,Inconsistent Definition of Mode and Transition Criteria Terminology in the SuROM SRS,4,"The following sections are from: ProjectA, OBC SuROM Flight Firmware Requirements Specification, S912-SRS4921 REVISION A. Issues are identified by (). This TIM is a companion to TIMs 1031, 1035 and 1036. 5.4 Target Software Environment The SuROM FSW provides initialization of the OBC upon RAD6000 reset, performing the following functions: (1) Initialization functions should also be performed (in addition to reset) on ¡§power up¡¨ and at other times depending on the definition of the terms used in the documents under review. These should be added as appropriate. The SuROM recognizes three startup modes: ƒn1. UART Initialization Mode - This mode is used only on the ground for the purpose of loading memory through a UART device. ƒn2. SuROM Monitor Mode - In this mode the OBC supports the command and telemetry links, and allows the ground to examine or modify any memory location. 3. ƒnEEPROM-Boot Mode - In this mode the OBC looks in several separate memory areas for a ¡§Load Descriptor¡¨ that has the information necessary for the SuROM to copy the Applications Boot-loader code from EEPROM into SRAM and start its execution. During nominal operations, restarts of the OBC are performed in ¡§EEPROM-Boot Mode.¡¨ (2) The condition that determines which mode is to be selected should be stated. Reference [6] discuss use of SuROM mode in Table 5-3. If these three ¡§modes¡¨ are really sub-modes of Boot State, then they should be described in Reference [6]. If the SuROM executes these modes then the term ¡§recognizes¡¨ should be changed to something like ¡§performs¡¨. 5.7.1 Startup Processing SU001 Flight Computer startup applications shall place the spacecraft into a safe system configuration without any ground intervention following power-up or a temporary power bus fault (cold-boot). (3) The term ¡§temporary¡¨ is not defined. Reference 1,FPR-93, indicates that the design shall be able to autonomously boot up after a ¡§long duration¡¨ undervoltage event. Presumably, this would also result in a ¡§cold-boot¡¨ using the SRS terminology. If the term ¡§safe system configuration¡¨ is the same as ¡§safe mode¡¨ a common term should be used. Neither Reference [6] or [7] discuss or define the term ¡§cold-boot¡¨. 5.7.2 Exceptions SU013 Flight Software shall trap processor interrupts, make an Exception Log entry, and respond according to the following Exception/Required Action Tables: (4) There are no tables in the following subsections. Suggest that the interrupts and the responses be separated for clarity. SU013.1 System Reset Interrupt COLD_RESTART (5) The term COLD_RESTART is not defined in this SRS. Neither Reference [6] or [7] discuss or define the term ¡§cold-restart¡¨. SU013.9 Supervisor Call Interrupt Restart as Cold Boot (6) The term ¡§Cold Boot¡¨ is not defined in this SRS. Neither Reference [6] or [7] discuss or define the terms ¡§cold boot¡¨. SU015 Flight Software shall determine whether this processor mode transition was due to a Command, POWER_ON or External Hardware Reset command. (7) The term ¡§processor mode transition¡¨ has not been defined in this context. SU018 If sufficient RAD6000 and LIO processing resources are operable, restart operations shall progress to completion in SuROM Diagnostic (Monitor) Mode or Normal Mode. (8) Normal Mode is not defined here. The conditions for determining the selected mode (Monitor or Normal) are not stated. Reference [6] uses the term Normal State, not Normal Mode. According to Reference [5] restart is supposed to end in the Standby State not Monitor Mode or Normal Mode. The ¡§sufficient resources¡¨ needed are not stated. 5.7.4 SuROM Diagnostic ""Monitor"" Mode SU211 In the event of a processor exception, the SuROM Monitor Mode shall provide a RAD6000 state exception log, which is non-volatile through an OBC soft reset. (9) The term ¡§soft reset¡¨ is not defined. Neither Reference [6] or [7] discuss or define the terms ¡§soft reset¡¨.",4/20/04ProjectA - TIM - 1036,Inconsistent Definition of Mode and Transition Criteria Terminology in the OBC SRS,4,"This TIM is a companion to TIMS 1031 and 1035. The following sections are from: ProjectA, OBC C&DH Flight Software Requirements Specification, S912-SRS4920 REVISION A. Issues are identified by (). Section 5.7.1.1 Startup Processing OS001 Flight Computer startup applications shall place the spacecraft into a safe system configuration without any ground intervention following power-up or a temporary power bus fault (cold-boot). (1) The term “temporary” is not defined. Reference 1, FPR-93, indicates that the design shall be able to autonomously boot up after a “long duration” undervoltage event. Presumably, this would also result in a “cold-boot” using the SRS terminology. If the term “safe system configuration” is the same as “safe mode” a common term should be used. Neither Reference [6] or [7] discuss or define the term “cold-boot”. OS012 Provided processor hardware is operating nominally, Flight Software shall perform the following on a Flight Computer COLD_RESTART: (2) Reference 2 uses the term “reset”. Presumably, this requirement changes the terminology to (restart) and specializes to a specific type (cold). The terminology should be consistent across the documents. Neither Reference [6] or [7] discuss or define the terms “cold restart” or “cold start"". OS100.4 Patch load failures shall cause an OBC Reset. (3) Repeated patch load failures could result in continuous resets. Suggest some limit be imposed. Section 5.7.1.2 Exceptions OS013 Flight Software shall trap processor interrupts, make an Exception Log entry, and respond according to the following Exception/Required Action Tables: (4) There are no tables in the following subsections. Suggest that the interrupts and the responses be separated for clarity. OS013.9. Supervisor Call Interrupt Restart as Cold Boot. (5) Cold boot is not defined. Neither Reference [6] or [7] discuss or define the terms “cold boot”. OS015 Flight Software shall determine whether a processor mode transition was due to POWER_ON or External Hardware Reset command. (6) The term “processor mode transition” has not been defined in this context. It is not stated whether the transitions are the same or different in each case. OS018 If sufficient RAD-6000 and LIO processing resources are operable, restart operations shall progress to completion in SuROM Diagnostic (Monitor) Mode or Normal Mode. (7) It is unclear if this requirement should be removed and placed in Reference 4. Normal Mode is not discussed in Reference 4, nor is it defined here. The conditions for determining the selected mode (Monitor or Normal) are not stated. Reference [6] uses the term Normal State, not Normal Mode. According to Reference [5] restart is supposed to end in the Standby State not Monitor Mode or Normal Mode. The “sufficient resources” needed are not stated. Section 5.7.8.2 Data Storage DS008 The OBC C&DH software shall on a WARM_RESTART use the operational parameters stored in DRAM to recover the state of the recorded telemetry. TBD (8) The term “WARM_RESTART” is introduced but not defined. Neither Reference [6] or [7] discuss or define the term “warm star” or “warm restart”. DS028 The OBC-C&DH software shall ensure the preservation of DRAM contents through an OBC Soft Reset. (9)The term “Soft Reset” is introduced but not defined. Neither Reference [6] or [7] discuss or define the term “soft reset”.",4/20/04ProjectA - TIM - 1035,Inconsistent Definition of Mode and Transition Criteria Terminology in the Spacecraft and Flight System L3 Spec,4,"This TIM is a companion to TIM 1031. The following sections are from Reference #2. Issues are identified by (). 11.1.11 FS ATLO Safe Boot State. The Flight System shall initialize, upon powerup or reset of any electronic assemblies, to a state which does not violate any safety constraints for ATLO and Launch. (1)The specific safety constraints for ATLO and Launch should be defined somewhere (e.g., in the L3, the L4 SRSs, etc.). Also, the input parameter that specifies ATLO or Launch should be defined somewhere. 11.1.17. FS Safe Mode Exit Criteria. The Flight System shall not exit Safe Mode until either (1) Normal operations entry is initiated by ground command, or (2) A subsequent fault results in flight computer reset/swap (2) Reference 1, FPR-65, states that exit from Safe Mode can only be accomplished through ground commands. This seems to conflict with 11.1.17, item (2). Reference [7] states in Section 2.3, “4. Autonomous progression from safe modes of operation will not be allowed such that the FP monitors and responses are simplified.” 11.1.24. FS Boot State. The Flight System shall initialize to a safe state following initial powerup, component reset or switch or recovery from Phoenix mode. Safe State: prevent powering previously failed unit, use of actuators while mated, monitor separation and initiate separation sequence and transition to Safe Mode when appropriate. (3)Phoenix mode is not specifically defined in any of the referenced documents (it appears to be associated with the power subsystem). This term may be a carry over term from a previous project. The title contains the term “boot state” yet the description seems to focus on “safe state”. 11.4.3. S/C EPS Phoenix Mode Recovery. At prime power-on during ground testing or recovery from a severe undervoltage condition that causes components to reset, the Spacecraft EPS components shall autonomously configure to a safe, system compatible state including autonomous activation of down converters and battery charging in an undervoltage state. (4) Phoenix mode is not specifically defined in any of the referenced documents. It is unclear how this requirement differs from response to a power-on as discussed in References [6] and [7]. Neither Reference [6] or [7] discuss response to a “severe undervolatge” condition. The following sections are from: Spacecraft and Flight System Requirements, Level 3 Requirements, S912-GR3400, December 19, 2003, FSW Section. Issues are identified by (). 10.2.3. Bulk Storage. The Flight Software shall support DRAM memory retention following an OBC reset (i.e. do not overwrite old data). (5) Reference 3, section OS013.1, states that a system reset interrupt results in a COLD_RESTART. The two requirements seem to conflict if an “OBC reset” is the result of a “system reset interrupt”. Neither Reference [6] or [7] state that DRAM memory is to be retained under these conditions. 10.4.2. System startup configuration. The Flight Software shall support a startup configuration of safe mode such that the OBC is monitoring separation and controlling basic ACS functions and is the bus controller. (6) Safe mode seems to be focused on launch in this case as “separation is monitored” yet the title is “system startup configuration”. The title seems to indicate that the requirements should address more than just safe mode during launch. Requirement 11.1.11 indicates that ATLO is to be supported as part of startup, also. Reference [6] indicated that the OBC monitoring of separation occurs during Launch Mode not “safe mode”. If separation monitoring is the only event that drives the OBS FSW autonomously to Safe Mode, a back up event, such as a timer expiring, may be indicated. 10.13.2. The Flight System shall be capable of retaining the current sequence memory content following a reset. After a reset, the Ground Segment shall verify memory contents before a sequence is loaded. (7) As in 10.2.3, reset indicates retention of memory. If a reset results in memory retention, then this needs to be part of a complete definition of all events that should occur as the result of a “reset”. Neither References [6] or [7] state that “sequence memory” is to be retained under these conditions. The last sentence pertains to the ground system and should be moved to the appropriate document. The following sections are from: Spacecraft and Flight System Requirements, Level 3 Requirements, S912-GR3400, December 19, 2003, CDHS Section. Issues are identified by (). 9.1.2. Processor Reinitialization. The C&DH subsystem shall provide the capability for processor re-initialization after a processor reboot resulting from a cold or warm start. (8) The terms “cold start” and “warm start” are introduced but not defined. Prior to this section the term “reset” was used. If these are actual commands or conditions, then the differences should be identified, including how the FSW is to respond. Neither Reference [6] or [7] discuss or define the terms “cold” or “warm” start.",4/20/04ProjectA - TIM - 1031,Inconsistent Definition and Use of Moding Terminology,4,"Within the Spacecraft and Flight System Requirements L3 specification material pertinent to resets, power-up, power interruptions and the response to these events is found in three sections: FP, FSW and CDHS. At the SRS level both References [3] and [4] address this subject. The following general problems were noted within References 1 - 5: The terminology used is not consistent within and across the referenced documents. The terms boot, power up, reset, OBC reset, startup, cold start, warm start, cold-boot, cold_restart, warm_restart, restart, soft reset, safe state, boot state and safe mode are used, in many cases without specific definition and/or interchangeably. While some of these terms (e.g., reset) may be more or less “self descriptive” (in the realm of FSW design) the specifications for ProjectA should be specific in their definitions. The software response to events (e.g., power on, resets, etc.) while operating under all initial conditions (e.g., power off, low power, launch, etc) is not clearly identified. This situation in combination with the inconsistent use of terminology creates an incomplete and inconsistent set of software requirements for the important area of response to power changes resets, etc. and for entering Safe Mode. This TIM serves as a general statement of the specific issues identified in TIMs 1035, 1036 and 1037.",4/20/04ProjectA - TIM - 1030,Transition to Boot State is Not Consistently Defined,4,"The reference document is DN-ProjectA-SE-001, Rev Ltr. 002. Boot State is entered at power up and upon Ground or FP actions causing departure from the Standby and Normal states. The Ground and FP actions/commands seem to include: reset, swap, power cycle, power off. In the following discussions it is assumed that a mode/state transition is associated with a single OBC. Mode and State transitions are defined in DN-ProjectA-SE-001 as follows Note, IV&V issues are identified by a ( ). 4.5.2.2 Standby Launch to Boot State. CDH transitions from Normal to Boot mode. This will occur when the OBC is reset or during a CEU Swap. (1)It is unclear if the intent is to place the primary CEU/OBC in Boot state while the swap to the backup CEU occurs. The backup CEU will not be in Standby Launch (it is either off or in the SuROM monitor mode); therefore, it appears that the transition from Standby Launch to Boot cannot occur in the backup CEU as the result of a swap. 4.5.3.2 Standby Safe to Boot. The transition from the Standby-Safe to the Boot-No BC (Uplink Active) sub-state occurs by fault response or ground command. The transition requires only one step: CDH transitions from Normal to Boot mode. This will occur when the primary OBC is turned off. (2)Boot cannot occur when the primary OBC is turned off. The backup CEU will not be in the Standby Safe mode (it is either off or in the SuROM monitor mode); therefore, it appears that the transition from Standby Safe to Boot cannot occur after the primary OBC is turned off. 4.5.4.4 Normal Target Point to Boot. CDH transitions from Normal to Boot mode. This will occur when the primary OBC is turned off. (3)Boot cannot occur when the primary OBC is turned off. The backup CEU will not be in Normal Target Point (it is either off or in the SuROM monitor mode); therefore, it appears that the transition from Normal Target Point to Boot cannot occur after the primary OBC is turned off. 5.9.2 CDH Mode Transitions. The CDH transitions between Normal mode and Boot-up mode when the primary OBC is power cycled or turned off. Caused by Ground or FP actions. (4) Boot cannot occur when the primary OBC is turned off. The backup CEU will not be in Normal Mode (it is either off or in the SuROM monitor mode); therefore, it appears that the transition from Normal Mode to Boot cannot occur after the primary OBC is turned off. Table 5-3 states: “Normal: In this mode, the OBC is the 1553 bus controller and controlling all other subsystems through a variety of software tasks. At a minimum, Normal mode has one full CEU powered, and the “critical” portion of the other CEU powered. The backup CEU can be fully powered up as well, although FP software in the uplink cards will ensure that only one of the OBCs is the 1553 BC. As an example, the backup CEU can be booted into SuROM mode to facilitate diagnostic and reprogramming activities.” (5)It appears that the definition of “Normal” mode extends to the operation mode of both CEUs. It is unclear if the backup can operate in any condition other than SuROM mode as it cannot be in Normal mode because there can be only one bus controller. The definition seems to be inconsistent when applied to the backup CEU. (6)It is unclear if DN-ProjectA-SE-001 completely or consistently defines all the planned actions that drive the CDH into Boot and the actions that are performed during Boot. This document identifies the actions as: OBC reset, CEU swap, OBC turned off, OBC power cycled. Other ProjectA documents (e.g., the SRSs and the Spacecraft and Flight Systems L3) identify other actions including: cold start, warm start, and soft reset. DN-ProjectA-SE-001 does not reflect these actions.",4/20/04ProjectA - TIM - 1029,ProjectA L3 SCFSRD Rqt: L3-SFS-807 is in conflict with L3-SFS-806,3,"Section 10.6.5.8 (L3-SFS-807) of the Spacecraft and Flight Systems Requirements document states that the flight software shall be capable of executing 16 or more relative time sequence instructions per second. This statement is in conflict with the previous requirement, in section 10.6.5.7 (L3-SFS-806), which states that the maximum capability to execute consecutive sequence instructions with relative time tags are 0.1 second apart, meaning 10 instructions per second. Referenced Requirements: [L3-SFS-806] The Flight Software shall provide the capability to execute consecutive sequence instructions with relative time tags of 0.1 second apart. [L3-SFS-807] The Flight Software shall be capable of executing 16 or more relative time sequence instructions per second.",3/17/04ProjectA - TIM - 1028,Engine thrust control commands missing in L3 requirements,2,"Requirement L2-PRD-565 in the Project Requirements Document (PRD) is processing of Engine uplink commands and it appears to have S/C systems and software implications; however, L2-PRD-565 is not flowed down to the Spacecraft and Flight System Requirements document. Referenced Requirement: [L2-PRD-565] Allocation: The Spacecraft System shall be able to accept thrust profiles that are uplinked outside of the backbone sequence.",3/16/04ProjectA - TIM - 1027,Duplicate specifications in L3 requirements document,5,"In the Spacecraft and Flight System Requirements document, section 10.1.5 and section 10.6.2.3 contain identical requirements. The duplicated requirement is stated thus: ""The Flight Software shall have the ability to detect and report invalid opcodes and out-of-range errors for commands.""",3/12/04ProjectA - TIM - 1024,Confused wording in the recording of uplink handling errors,4,"The Flight Ground Interface Control Document states in section 3.1.1.1.2: ""The spacecraft shall provide in telemetry the total number of uncorrectable uplink handling errors detected."" The Spacecraft and Flight System Requirements document, in section 10.6.4.4, states for this same procedure: ""The flight Software shall record the total number of uncorrectable uplink handling errors detected in the uplink telemetry."" There are two areas of inconsistency between the two documents. The first is that the SC&FSRD does not specify that this number should be sent by telemetry whereas the FGICD does. In order to correct this, the SC&FSRD statement should be continued thus: ""... in the uplink telemetry, and provide this data in telemetry."" The second inconsistency is that the SC&FSRD states that this number is recorded but the FGICD makes no mention of this fact. The FGICD is ambiguous on whether this data is recorded and then sent by telemetry or whether it is sent only by real-time telemetry. The correct method should be resolved and inserted in both documents.",3/11/04ProjectA - TIM - 1016,The SIS and SDD are not listed within Table 1-9 of the SDP,4,"The System Interface Specification and Software Design Document are not listed within Table 1-9 of the SDP as compared to table 8 of the PSMP. It is unclear as to whether the System Interface Specification and Software Design Document are planned to be developed and delivered. Referenced JPL ProjectA PSMP Rqt: [7] SOFTWARE DOCUMENTATION - Each ProjectA software development organization shall specify and document their software documentation process in the subordinate SMP, at a minimum, to include: • A list of receivable, deliverable, and non-deliverable software documentation • Personnel responsible for developing and approving each document • Due dates for draft, preliminary, and final versions • Processes for document review, approval, release, change control, and configuration management. Table 8 provides a guideline for software documentation to be produced for each software class. Some software documents may be combined with other software documents or system/subsystem level documents. This table may be tailored by individual software development organizations to meet their budget and resource constraints. All JPL contractor and subcontractor’s receivable and deliverable software documentation identified in the subordinate SMP shall conform to the contract agreement. All instrument partner’s receivable and deliverable software documentation identified in the subordinate SMP shall confirm to the Instrument Memorandum of Agreement (MOA). The Project Software Technical Representative’s and the cognizant Project System Manager’s approval on the subordinate SMP constitutes approval of its documentation plan. All receivable, deliverable, and non-deliverable documentation shall be managed according to the provisions of the ProjectA Project Communication, Information Management, and Documentation Plan (JPL D-25846). Table 8 Contains following recommended documents as “guidelines”: SMP, SRD or SRS, SIS, SDD, Unit Test Plan/Procedures/Report, I&T Test Plan/Procedures/Report, Acceptance Test Plan/Procedures/ Report, User’s Guide/Operator’s Manual, RDD"" Referenced Orbital SDP Sec. [1.5.4] Overview of the Documentation Efforts - The ProjectA software development team will produce the documents necessary for the adequate development and testing of software for ProjectA. These are summarized in the following table. Table 1-9 ProjectA Software Documentation Effort",3/9/04ProjectA - TIM - 1005,Incorrect and Incomplete traceability between the PSMP and the SDR,5,"Issue: JPL SDR 2.1.3h and 2.1.6 are traced to JPL ProjectA PSMP 2.6 in the PSMP Appendix B Compliance Matrix. However, PSMP 2.6 is an invalid section number. SDR 2.1.3h is addressed by PSMP 2.3.4. So a trace should be added to the Compliance Matrix accordingly. SDR 2.1.6 appears to be addressed by PSMP 8.2 & 7. So, no new traces are necessary for this SDR requirement. Referenced JPL SDR Rqt: [2.1.3h] h. An implementation schedule at a level of detail that facilitates tracking the progress. [2.1.6] The software plan shall define receivables and deliverables internal to the project, establish points-of-contact on both sides of an organizational interface, and provide for regular meetings to ensure that the activities of interdependent groups are coordinated and reflect budget and schedule commitments. Referenced JPL ProjectA PSMP Rqt: [2.3.4] Schedule - The software schedules are used to monitor the progress of the software development process in meeting the project-level milestones and to keep software process metrics. Each ProjectA software development organization shall maintain and update their software schedule based on the most current information available, and present the software schedule and software progress status to the project at the MMRs, technical reviews, and milestone reviews. The software schedules shall show interdependencies with other ProjectA disciplines. The latest ProjectA Project schedules and software schedules are maintained at the web site: http://sched-central.jpl.nasa.gov/ProjectA/ProjectA.html by the ProjectA Project Schedule Administrator. A copy of project top-level schedule is shown in Figure 5. Figure 6 ProjectA Project Top-Level Schedule",3/8/04ProjectA - TIM - 1004,Incorrect and Incomplete traceability between the PSMP and the SDR,5,"Issue: JPL SDR 2.1.3i, 2.1.6, 2.2.1, 2.2.2a, 2.2.2b, 2.2.2c, 2.2.2d, 2.2.3, 2.2.4, 3.1.12, and 4.2.3 are traced to JPL ProjectA PSMP 2.5.1 in the PSMP Appendix B Compliance Matrix. However, PSMP 2.5.1 is an invalid section number. Therefore, the traces should be removed from the Compliance Matrix. SDR 2.1.3i, 2.2.1, 2.2.2a, 2.2.2b, 2.2.2c, 2.2.2d, 2.2.3, 2.2.4, and 4.2.3 are addressed by PSMP 2.3.2. So, traces should be added to the Compliance Matrix accordingly. SDR 2.1.6 appears to be addressed by PSMP 8.2 & 7, and SDR 3.1.12 addressed by PSMP 3.1. So, no new traces are necessary for these SDR requirements. Referenced JPL SDR Rqt: [2.1.3i] A budget consistent with the approach to risk management. [2.2.1] A documented cost estimate shall be prepared, addressing major sources of risk and uncertainty. [2.2.2a] Input data, including relevant cost data from JPL experience [2.2.2b] Assumptions [2.2.2c] Description of the costing approach used [2.2.2d] Quantification of the uncertainty in the estimate [2.2.3] The cost estimate shall recommend a funded margin that is based on a risk management plan and staffing profile. [2.2.4] At key development milestones or when the development is re-planned, the-cost-to-complete the software product shall be re-assessed and the results documented. [3.1.12] Proposed software requirements changes shall be documented, assessed for cost, schedule, technical impacts, and risk before being accepted as a delivery commitment. [4.2.3] An estimate of the resources required for both milestone reviews and peer reviews shall be prepared in accord with the Software Cost Estimation Requirement. Referenced JPL ProjectA PSMP Rqt: [2.3.2] Cost Estimates and Budget - The information of the project-level cost estimates, budget profiles, and reserves are available from the ProjectA Project Business Manager. Each ProjectA software development organization shall provide and document cost estimates, budget, and reserves for their software elements consistent with risk management plan and staffing profile. Each software cost estimate shall document major sources of risk and uncertainty, input data including relevant historical data, assumptions, cost method or model used, and a quantification of the uncertainties in the estimate. At development milestones or any time the software development is re-planned, the cost to complete shall be re-estimated, and the results shall be documented and submitted to the project for review and approval.",3/8/04